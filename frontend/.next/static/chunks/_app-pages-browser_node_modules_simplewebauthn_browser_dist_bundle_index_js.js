"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_simplewebauthn_browser_dist_bundle_index_js"],{

/***/ "(app-pages-browser)/./node_modules/@simplewebauthn/browser/dist/bundle/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@simplewebauthn/browser/dist/bundle/index.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebAuthnAbortService: function() { return /* binding */ WebAuthnAbortService; },\n/* harmony export */   WebAuthnError: function() { return /* binding */ WebAuthnError; },\n/* harmony export */   base64URLStringToBuffer: function() { return /* binding */ base64URLStringToBuffer; },\n/* harmony export */   browserSupportsWebAuthn: function() { return /* binding */ browserSupportsWebAuthn; },\n/* harmony export */   browserSupportsWebAuthnAutofill: function() { return /* binding */ browserSupportsWebAuthnAutofill; },\n/* harmony export */   bufferToBase64URLString: function() { return /* binding */ bufferToBase64URLString; },\n/* harmony export */   platformAuthenticatorIsAvailable: function() { return /* binding */ platformAuthenticatorIsAvailable; },\n/* harmony export */   startAuthentication: function() { return /* binding */ startAuthentication; },\n/* harmony export */   startRegistration: function() { return /* binding */ startRegistration; }\n/* harmony export */ });\n/* [@simplewebauthn/browser@9.0.1] */ function utf8StringToBuffer(value) {\n    return new TextEncoder().encode(value);\n}\nfunction bufferToBase64URLString(buffer) {\n    const bytes = new Uint8Array(buffer);\n    let str = \"\";\n    for (const charCode of bytes){\n        str += String.fromCharCode(charCode);\n    }\n    const base64String = btoa(str);\n    return base64String.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\nfunction base64URLStringToBuffer(base64URLString) {\n    const base64 = base64URLString.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    const padLength = (4 - base64.length % 4) % 4;\n    const padded = base64.padEnd(base64.length + padLength, \"=\");\n    const binary = atob(padded);\n    const buffer = new ArrayBuffer(binary.length);\n    const bytes = new Uint8Array(buffer);\n    for(let i = 0; i < binary.length; i++){\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return buffer;\n}\nfunction browserSupportsWebAuthn() {\n    var _window;\n    return ((_window = window) === null || _window === void 0 ? void 0 : _window.PublicKeyCredential) !== undefined && typeof window.PublicKeyCredential === \"function\";\n}\nfunction toPublicKeyCredentialDescriptor(descriptor) {\n    const { id } = descriptor;\n    return {\n        ...descriptor,\n        id: base64URLStringToBuffer(id),\n        transports: descriptor.transports\n    };\n}\nfunction isValidDomain(hostname) {\n    return hostname === \"localhost\" || /^([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}$/i.test(hostname);\n}\nclass WebAuthnError extends Error {\n    constructor({ message, code, cause, name }){\n        super(message, {\n            cause\n        });\n        this.name = name !== null && name !== void 0 ? name : cause.name;\n        this.code = code;\n    }\n}\nfunction identifyRegistrationError(param) {\n    let { error, options } = param;\n    const { publicKey } = options;\n    if (!publicKey) {\n        throw Error(\"options was missing required publicKey property\");\n    }\n    if (error.name === \"AbortError\") {\n        if (options.signal instanceof AbortSignal) {\n            return new WebAuthnError({\n                message: \"Registration ceremony was sent an abort signal\",\n                code: \"ERROR_CEREMONY_ABORTED\",\n                cause: error\n            });\n        }\n    } else if (error.name === \"ConstraintError\") {\n        var _publicKey_authenticatorSelection, _publicKey_authenticatorSelection1;\n        if (((_publicKey_authenticatorSelection = publicKey.authenticatorSelection) === null || _publicKey_authenticatorSelection === void 0 ? void 0 : _publicKey_authenticatorSelection.requireResidentKey) === true) {\n            return new WebAuthnError({\n                message: \"Discoverable credentials were required but no available authenticator supported it\",\n                code: \"ERROR_AUTHENTICATOR_MISSING_DISCOVERABLE_CREDENTIAL_SUPPORT\",\n                cause: error\n            });\n        } else if (((_publicKey_authenticatorSelection1 = publicKey.authenticatorSelection) === null || _publicKey_authenticatorSelection1 === void 0 ? void 0 : _publicKey_authenticatorSelection1.userVerification) === \"required\") {\n            return new WebAuthnError({\n                message: \"User verification was required but no available authenticator supported it\",\n                code: \"ERROR_AUTHENTICATOR_MISSING_USER_VERIFICATION_SUPPORT\",\n                cause: error\n            });\n        }\n    } else if (error.name === \"InvalidStateError\") {\n        return new WebAuthnError({\n            message: \"The authenticator was previously registered\",\n            code: \"ERROR_AUTHENTICATOR_PREVIOUSLY_REGISTERED\",\n            cause: error\n        });\n    } else if (error.name === \"NotAllowedError\") {\n        return new WebAuthnError({\n            message: error.message,\n            code: \"ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY\",\n            cause: error\n        });\n    } else if (error.name === \"NotSupportedError\") {\n        const validPubKeyCredParams = publicKey.pubKeyCredParams.filter((param)=>param.type === \"public-key\");\n        if (validPubKeyCredParams.length === 0) {\n            return new WebAuthnError({\n                message: 'No entry in pubKeyCredParams was of type \"public-key\"',\n                code: \"ERROR_MALFORMED_PUBKEYCREDPARAMS\",\n                cause: error\n            });\n        }\n        return new WebAuthnError({\n            message: \"No available authenticator supported any of the specified pubKeyCredParams algorithms\",\n            code: \"ERROR_AUTHENTICATOR_NO_SUPPORTED_PUBKEYCREDPARAMS_ALG\",\n            cause: error\n        });\n    } else if (error.name === \"SecurityError\") {\n        const effectiveDomain = window.location.hostname;\n        if (!isValidDomain(effectiveDomain)) {\n            return new WebAuthnError({\n                message: \"\".concat(window.location.hostname, \" is an invalid domain\"),\n                code: \"ERROR_INVALID_DOMAIN\",\n                cause: error\n            });\n        } else if (publicKey.rp.id !== effectiveDomain) {\n            return new WebAuthnError({\n                message: 'The RP ID \"'.concat(publicKey.rp.id, '\" is invalid for this domain'),\n                code: \"ERROR_INVALID_RP_ID\",\n                cause: error\n            });\n        }\n    } else if (error.name === \"TypeError\") {\n        if (publicKey.user.id.byteLength < 1 || publicKey.user.id.byteLength > 64) {\n            return new WebAuthnError({\n                message: \"User ID was not between 1 and 64 characters\",\n                code: \"ERROR_INVALID_USER_ID_LENGTH\",\n                cause: error\n            });\n        }\n    } else if (error.name === \"UnknownError\") {\n        return new WebAuthnError({\n            message: \"The authenticator was unable to process the specified options, or could not create a new credential\",\n            code: \"ERROR_AUTHENTICATOR_GENERAL_ERROR\",\n            cause: error\n        });\n    }\n    return error;\n}\nclass BaseWebAuthnAbortService {\n    createNewAbortSignal() {\n        if (this.controller) {\n            const abortError = new Error(\"Cancelling existing WebAuthn API call for new one\");\n            abortError.name = \"AbortError\";\n            this.controller.abort(abortError);\n        }\n        const newController = new AbortController();\n        this.controller = newController;\n        return newController.signal;\n    }\n    cancelCeremony() {\n        if (this.controller) {\n            const abortError = new Error(\"Manually cancelling existing WebAuthn API call\");\n            abortError.name = \"AbortError\";\n            this.controller.abort(abortError);\n            this.controller = undefined;\n        }\n    }\n}\nconst WebAuthnAbortService = new BaseWebAuthnAbortService();\nconst attachments = [\n    \"cross-platform\",\n    \"platform\"\n];\nfunction toAuthenticatorAttachment(attachment) {\n    if (!attachment) {\n        return;\n    }\n    if (attachments.indexOf(attachment) < 0) {\n        return;\n    }\n    return attachment;\n}\nasync function startRegistration(creationOptionsJSON) {\n    var _creationOptionsJSON_excludeCredentials;\n    if (!browserSupportsWebAuthn()) {\n        throw new Error(\"WebAuthn is not supported in this browser\");\n    }\n    const publicKey = {\n        ...creationOptionsJSON,\n        challenge: base64URLStringToBuffer(creationOptionsJSON.challenge),\n        user: {\n            ...creationOptionsJSON.user,\n            id: utf8StringToBuffer(creationOptionsJSON.user.id)\n        },\n        excludeCredentials: (_creationOptionsJSON_excludeCredentials = creationOptionsJSON.excludeCredentials) === null || _creationOptionsJSON_excludeCredentials === void 0 ? void 0 : _creationOptionsJSON_excludeCredentials.map(toPublicKeyCredentialDescriptor)\n    };\n    const options = {\n        publicKey\n    };\n    options.signal = WebAuthnAbortService.createNewAbortSignal();\n    let credential;\n    try {\n        credential = await navigator.credentials.create(options);\n    } catch (err) {\n        throw identifyRegistrationError({\n            error: err,\n            options\n        });\n    }\n    if (!credential) {\n        throw new Error(\"Registration was not completed\");\n    }\n    const { id, rawId, response, type } = credential;\n    let transports = undefined;\n    if (typeof response.getTransports === \"function\") {\n        transports = response.getTransports();\n    }\n    let responsePublicKeyAlgorithm = undefined;\n    if (typeof response.getPublicKeyAlgorithm === \"function\") {\n        try {\n            responsePublicKeyAlgorithm = response.getPublicKeyAlgorithm();\n        } catch (error) {\n            warnOnBrokenImplementation(\"getPublicKeyAlgorithm()\", error);\n        }\n    }\n    let responsePublicKey = undefined;\n    if (typeof response.getPublicKey === \"function\") {\n        try {\n            const _publicKey = response.getPublicKey();\n            if (_publicKey !== null) {\n                responsePublicKey = bufferToBase64URLString(_publicKey);\n            }\n        } catch (error) {\n            warnOnBrokenImplementation(\"getPublicKey()\", error);\n        }\n    }\n    let responseAuthenticatorData;\n    if (typeof response.getAuthenticatorData === \"function\") {\n        try {\n            responseAuthenticatorData = bufferToBase64URLString(response.getAuthenticatorData());\n        } catch (error) {\n            warnOnBrokenImplementation(\"getAuthenticatorData()\", error);\n        }\n    }\n    return {\n        id,\n        rawId: bufferToBase64URLString(rawId),\n        response: {\n            attestationObject: bufferToBase64URLString(response.attestationObject),\n            clientDataJSON: bufferToBase64URLString(response.clientDataJSON),\n            transports,\n            publicKeyAlgorithm: responsePublicKeyAlgorithm,\n            publicKey: responsePublicKey,\n            authenticatorData: responseAuthenticatorData\n        },\n        type,\n        clientExtensionResults: credential.getClientExtensionResults(),\n        authenticatorAttachment: toAuthenticatorAttachment(credential.authenticatorAttachment)\n    };\n}\nfunction warnOnBrokenImplementation(methodName, cause) {\n    console.warn(\"The browser extension that intercepted this WebAuthn API call incorrectly implemented \".concat(methodName, \". You should report this error to them.\\n\"), cause);\n}\nfunction bufferToUTF8String(value) {\n    return new TextDecoder(\"utf-8\").decode(value);\n}\nfunction browserSupportsWebAuthnAutofill() {\n    const globalPublicKeyCredential = window.PublicKeyCredential;\n    if (globalPublicKeyCredential.isConditionalMediationAvailable === undefined) {\n        return new Promise((resolve)=>resolve(false));\n    }\n    return globalPublicKeyCredential.isConditionalMediationAvailable();\n}\nfunction identifyAuthenticationError(param) {\n    let { error, options } = param;\n    const { publicKey } = options;\n    if (!publicKey) {\n        throw Error(\"options was missing required publicKey property\");\n    }\n    if (error.name === \"AbortError\") {\n        if (options.signal instanceof AbortSignal) {\n            return new WebAuthnError({\n                message: \"Authentication ceremony was sent an abort signal\",\n                code: \"ERROR_CEREMONY_ABORTED\",\n                cause: error\n            });\n        }\n    } else if (error.name === \"NotAllowedError\") {\n        return new WebAuthnError({\n            message: error.message,\n            code: \"ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY\",\n            cause: error\n        });\n    } else if (error.name === \"SecurityError\") {\n        const effectiveDomain = window.location.hostname;\n        if (!isValidDomain(effectiveDomain)) {\n            return new WebAuthnError({\n                message: \"\".concat(window.location.hostname, \" is an invalid domain\"),\n                code: \"ERROR_INVALID_DOMAIN\",\n                cause: error\n            });\n        } else if (publicKey.rpId !== effectiveDomain) {\n            return new WebAuthnError({\n                message: 'The RP ID \"'.concat(publicKey.rpId, '\" is invalid for this domain'),\n                code: \"ERROR_INVALID_RP_ID\",\n                cause: error\n            });\n        }\n    } else if (error.name === \"UnknownError\") {\n        return new WebAuthnError({\n            message: \"The authenticator was unable to process the specified options, or could not create a new assertion signature\",\n            code: \"ERROR_AUTHENTICATOR_GENERAL_ERROR\",\n            cause: error\n        });\n    }\n    return error;\n}\nasync function startAuthentication(requestOptionsJSON) {\n    let useBrowserAutofill = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n    var _requestOptionsJSON_allowCredentials;\n    if (!browserSupportsWebAuthn()) {\n        throw new Error(\"WebAuthn is not supported in this browser\");\n    }\n    let allowCredentials;\n    if (((_requestOptionsJSON_allowCredentials = requestOptionsJSON.allowCredentials) === null || _requestOptionsJSON_allowCredentials === void 0 ? void 0 : _requestOptionsJSON_allowCredentials.length) !== 0) {\n        var _requestOptionsJSON_allowCredentials1;\n        allowCredentials = (_requestOptionsJSON_allowCredentials1 = requestOptionsJSON.allowCredentials) === null || _requestOptionsJSON_allowCredentials1 === void 0 ? void 0 : _requestOptionsJSON_allowCredentials1.map(toPublicKeyCredentialDescriptor);\n    }\n    const publicKey = {\n        ...requestOptionsJSON,\n        challenge: base64URLStringToBuffer(requestOptionsJSON.challenge),\n        allowCredentials\n    };\n    const options = {};\n    if (useBrowserAutofill) {\n        if (!await browserSupportsWebAuthnAutofill()) {\n            throw Error(\"Browser does not support WebAuthn autofill\");\n        }\n        const eligibleInputs = document.querySelectorAll(\"input[autocomplete$='webauthn']\");\n        if (eligibleInputs.length < 1) {\n            throw Error('No <input> with \"webauthn\" as the only or last value in its `autocomplete` attribute was detected');\n        }\n        options.mediation = \"conditional\";\n        publicKey.allowCredentials = [];\n    }\n    options.publicKey = publicKey;\n    options.signal = WebAuthnAbortService.createNewAbortSignal();\n    let credential;\n    try {\n        credential = await navigator.credentials.get(options);\n    } catch (err) {\n        throw identifyAuthenticationError({\n            error: err,\n            options\n        });\n    }\n    if (!credential) {\n        throw new Error(\"Authentication was not completed\");\n    }\n    const { id, rawId, response, type } = credential;\n    let userHandle = undefined;\n    if (response.userHandle) {\n        userHandle = bufferToUTF8String(response.userHandle);\n    }\n    return {\n        id,\n        rawId: bufferToBase64URLString(rawId),\n        response: {\n            authenticatorData: bufferToBase64URLString(response.authenticatorData),\n            clientDataJSON: bufferToBase64URLString(response.clientDataJSON),\n            signature: bufferToBase64URLString(response.signature),\n            userHandle\n        },\n        type,\n        clientExtensionResults: credential.getClientExtensionResults(),\n        authenticatorAttachment: toAuthenticatorAttachment(credential.authenticatorAttachment)\n    };\n}\nfunction platformAuthenticatorIsAvailable() {\n    if (!browserSupportsWebAuthn()) {\n        return new Promise((resolve)=>resolve(false));\n    }\n    return PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@simplewebauthn/browser/dist/bundle/index.js\n"));

/***/ })

}]);