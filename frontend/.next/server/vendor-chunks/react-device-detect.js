"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-device-detect";
exports.ids = ["vendor-chunks/react-device-detect"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-device-detect/dist/lib.js":
/*!******************************************************!*\
  !*** ./node_modules/react-device-detect/dist/lib.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nfunction _interopDefault(ex) {\n    return ex && typeof ex === \"object\" && \"default\" in ex ? ex[\"default\"] : ex;\n}\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar React__default = _interopDefault(React);\nvar UAParser = __webpack_require__(/*! ua-parser-js/dist/ua-parser.min */ \"(ssr)/./node_modules/ua-parser-js/dist/ua-parser.min.js\");\nvar ClientUAInstance = new UAParser();\nvar browser = ClientUAInstance.getBrowser();\nvar cpu = ClientUAInstance.getCPU();\nvar device = ClientUAInstance.getDevice();\nvar engine = ClientUAInstance.getEngine();\nvar os = ClientUAInstance.getOS();\nvar ua = ClientUAInstance.getUA();\nvar setUa = function setUa(userAgentString) {\n    return ClientUAInstance.setUA(userAgentString);\n};\nvar parseUserAgent = function parseUserAgent(userAgent) {\n    if (!userAgent) {\n        console.error(\"No userAgent string was provided\");\n        return;\n    }\n    var UserAgentInstance = new UAParser(userAgent);\n    return {\n        UA: UserAgentInstance,\n        browser: UserAgentInstance.getBrowser(),\n        cpu: UserAgentInstance.getCPU(),\n        device: UserAgentInstance.getDevice(),\n        engine: UserAgentInstance.getEngine(),\n        os: UserAgentInstance.getOS(),\n        ua: UserAgentInstance.getUA(),\n        setUserAgent: function setUserAgent(userAgentString) {\n            return UserAgentInstance.setUA(userAgentString);\n        }\n    };\n};\nvar UAHelper = /*#__PURE__*/ Object.freeze({\n    ClientUAInstance: ClientUAInstance,\n    browser: browser,\n    cpu: cpu,\n    device: device,\n    engine: engine,\n    os: os,\n    ua: ua,\n    setUa: setUa,\n    parseUserAgent: parseUserAgent\n});\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread2(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n        return call;\n    } else if (call !== void 0) {\n        throw new TypeError(\"Derived constructors may only return object or undefined\");\n    }\n    return _assertThisInitialized(self);\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nvar DeviceTypes = {\n    Mobile: \"mobile\",\n    Tablet: \"tablet\",\n    SmartTv: \"smarttv\",\n    Console: \"console\",\n    Wearable: \"wearable\",\n    Embedded: \"embedded\",\n    Browser: undefined\n};\nvar BrowserTypes = {\n    Chrome: \"Chrome\",\n    Firefox: \"Firefox\",\n    Opera: \"Opera\",\n    Yandex: \"Yandex\",\n    Safari: \"Safari\",\n    InternetExplorer: \"Internet Explorer\",\n    Edge: \"Edge\",\n    Chromium: \"Chromium\",\n    Ie: \"IE\",\n    MobileSafari: \"Mobile Safari\",\n    EdgeChromium: \"Edge Chromium\",\n    MIUI: \"MIUI Browser\",\n    SamsungBrowser: \"Samsung Browser\"\n};\nvar OsTypes = {\n    IOS: \"iOS\",\n    Android: \"Android\",\n    WindowsPhone: \"Windows Phone\",\n    Windows: \"Windows\",\n    MAC_OS: \"Mac OS\"\n};\nvar InitialDeviceTypes = {\n    isMobile: false,\n    isTablet: false,\n    isBrowser: false,\n    isSmartTV: false,\n    isConsole: false,\n    isWearable: false\n};\nvar checkDeviceType = function checkDeviceType(type) {\n    switch(type){\n        case DeviceTypes.Mobile:\n            return {\n                isMobile: true\n            };\n        case DeviceTypes.Tablet:\n            return {\n                isTablet: true\n            };\n        case DeviceTypes.SmartTv:\n            return {\n                isSmartTV: true\n            };\n        case DeviceTypes.Console:\n            return {\n                isConsole: true\n            };\n        case DeviceTypes.Wearable:\n            return {\n                isWearable: true\n            };\n        case DeviceTypes.Browser:\n            return {\n                isBrowser: true\n            };\n        case DeviceTypes.Embedded:\n            return {\n                isEmbedded: true\n            };\n        default:\n            return InitialDeviceTypes;\n    }\n};\nvar setUserAgent = function setUserAgent(userAgent) {\n    return setUa(userAgent);\n};\nvar setDefaults = function setDefaults(p) {\n    var d = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"none\";\n    return p ? p : d;\n};\nvar getNavigatorInstance = function getNavigatorInstance() {\n    if (false) {}\n    return false;\n};\nvar isIOS13Check = function isIOS13Check(type) {\n    var nav = getNavigatorInstance();\n    return nav && nav.platform && (nav.platform.indexOf(type) !== -1 || nav.platform === \"MacIntel\" && nav.maxTouchPoints > 1 && !window.MSStream);\n};\nvar browserPayload = function browserPayload(isBrowser, browser, engine, os, ua) {\n    return {\n        isBrowser: isBrowser,\n        browserMajorVersion: setDefaults(browser.major),\n        browserFullVersion: setDefaults(browser.version),\n        browserName: setDefaults(browser.name),\n        engineName: setDefaults(engine.name),\n        engineVersion: setDefaults(engine.version),\n        osName: setDefaults(os.name),\n        osVersion: setDefaults(os.version),\n        userAgent: setDefaults(ua)\n    };\n};\nvar mobilePayload = function mobilePayload(type, device, os, ua) {\n    return _objectSpread2({}, type, {\n        vendor: setDefaults(device.vendor),\n        model: setDefaults(device.model),\n        os: setDefaults(os.name),\n        osVersion: setDefaults(os.version),\n        ua: setDefaults(ua)\n    });\n};\nvar smartTvPayload = function smartTvPayload(isSmartTV, engine, os, ua) {\n    return {\n        isSmartTV: isSmartTV,\n        engineName: setDefaults(engine.name),\n        engineVersion: setDefaults(engine.version),\n        osName: setDefaults(os.name),\n        osVersion: setDefaults(os.version),\n        userAgent: setDefaults(ua)\n    };\n};\nvar consolePayload = function consolePayload(isConsole, engine, os, ua) {\n    return {\n        isConsole: isConsole,\n        engineName: setDefaults(engine.name),\n        engineVersion: setDefaults(engine.version),\n        osName: setDefaults(os.name),\n        osVersion: setDefaults(os.version),\n        userAgent: setDefaults(ua)\n    };\n};\nvar wearablePayload = function wearablePayload(isWearable, engine, os, ua) {\n    return {\n        isWearable: isWearable,\n        engineName: setDefaults(engine.name),\n        engineVersion: setDefaults(engine.version),\n        osName: setDefaults(os.name),\n        osVersion: setDefaults(os.version),\n        userAgent: setDefaults(ua)\n    };\n};\nvar embeddedPayload = function embeddedPayload(isEmbedded, device, engine, os, ua) {\n    return {\n        isEmbedded: isEmbedded,\n        vendor: setDefaults(device.vendor),\n        model: setDefaults(device.model),\n        engineName: setDefaults(engine.name),\n        engineVersion: setDefaults(engine.version),\n        osName: setDefaults(os.name),\n        osVersion: setDefaults(os.version),\n        userAgent: setDefaults(ua)\n    };\n};\nfunction deviceDetect(userAgent) {\n    var _ref = userAgent ? parseUserAgent(userAgent) : UAHelper, device = _ref.device, browser = _ref.browser, engine = _ref.engine, os = _ref.os, ua = _ref.ua;\n    var type = checkDeviceType(device.type);\n    var isBrowser = type.isBrowser, isMobile = type.isMobile, isTablet = type.isTablet, isSmartTV = type.isSmartTV, isConsole = type.isConsole, isWearable = type.isWearable, isEmbedded = type.isEmbedded;\n    if (isBrowser) {\n        return browserPayload(isBrowser, browser, engine, os, ua);\n    }\n    if (isSmartTV) {\n        return smartTvPayload(isSmartTV, engine, os, ua);\n    }\n    if (isConsole) {\n        return consolePayload(isConsole, engine, os, ua);\n    }\n    if (isMobile) {\n        return mobilePayload(type, device, os, ua);\n    }\n    if (isTablet) {\n        return mobilePayload(type, device, os, ua);\n    }\n    if (isWearable) {\n        return wearablePayload(isWearable, engine, os, ua);\n    }\n    if (isEmbedded) {\n        return embeddedPayload(isEmbedded, device, engine, os, ua);\n    }\n}\nvar isMobileType = function isMobileType(_ref) {\n    var type = _ref.type;\n    return type === DeviceTypes.Mobile;\n};\nvar isTabletType = function isTabletType(_ref2) {\n    var type = _ref2.type;\n    return type === DeviceTypes.Tablet;\n};\nvar isMobileAndTabletType = function isMobileAndTabletType(_ref3) {\n    var type = _ref3.type;\n    return type === DeviceTypes.Mobile || type === DeviceTypes.Tablet;\n};\nvar isSmartTVType = function isSmartTVType(_ref4) {\n    var type = _ref4.type;\n    return type === DeviceTypes.SmartTv;\n};\nvar isBrowserType = function isBrowserType(_ref5) {\n    var type = _ref5.type;\n    return type === DeviceTypes.Browser;\n};\nvar isWearableType = function isWearableType(_ref6) {\n    var type = _ref6.type;\n    return type === DeviceTypes.Wearable;\n};\nvar isConsoleType = function isConsoleType(_ref7) {\n    var type = _ref7.type;\n    return type === DeviceTypes.Console;\n};\nvar isEmbeddedType = function isEmbeddedType(_ref8) {\n    var type = _ref8.type;\n    return type === DeviceTypes.Embedded;\n};\nvar getMobileVendor = function getMobileVendor(_ref9) {\n    var vendor = _ref9.vendor;\n    return setDefaults(vendor);\n};\nvar getMobileModel = function getMobileModel(_ref10) {\n    var model = _ref10.model;\n    return setDefaults(model);\n};\nvar getDeviceType = function getDeviceType(_ref11) {\n    var type = _ref11.type;\n    return setDefaults(type, \"browser\");\n}; // os types\nvar isAndroidType = function isAndroidType(_ref12) {\n    var name = _ref12.name;\n    return name === OsTypes.Android;\n};\nvar isWindowsType = function isWindowsType(_ref13) {\n    var name = _ref13.name;\n    return name === OsTypes.Windows;\n};\nvar isMacOsType = function isMacOsType(_ref14) {\n    var name = _ref14.name;\n    return name === OsTypes.MAC_OS;\n};\nvar isWinPhoneType = function isWinPhoneType(_ref15) {\n    var name = _ref15.name;\n    return name === OsTypes.WindowsPhone;\n};\nvar isIOSType = function isIOSType(_ref16) {\n    var name = _ref16.name;\n    return name === OsTypes.IOS;\n};\nvar getOsVersion = function getOsVersion(_ref17) {\n    var version = _ref17.version;\n    return setDefaults(version);\n};\nvar getOsName = function getOsName(_ref18) {\n    var name = _ref18.name;\n    return setDefaults(name);\n}; // browser types\nvar isChromeType = function isChromeType(_ref19) {\n    var name = _ref19.name;\n    return name === BrowserTypes.Chrome;\n};\nvar isFirefoxType = function isFirefoxType(_ref20) {\n    var name = _ref20.name;\n    return name === BrowserTypes.Firefox;\n};\nvar isChromiumType = function isChromiumType(_ref21) {\n    var name = _ref21.name;\n    return name === BrowserTypes.Chromium;\n};\nvar isEdgeType = function isEdgeType(_ref22) {\n    var name = _ref22.name;\n    return name === BrowserTypes.Edge;\n};\nvar isYandexType = function isYandexType(_ref23) {\n    var name = _ref23.name;\n    return name === BrowserTypes.Yandex;\n};\nvar isSafariType = function isSafariType(_ref24) {\n    var name = _ref24.name;\n    return name === BrowserTypes.Safari || name === BrowserTypes.MobileSafari;\n};\nvar isMobileSafariType = function isMobileSafariType(_ref25) {\n    var name = _ref25.name;\n    return name === BrowserTypes.MobileSafari;\n};\nvar isOperaType = function isOperaType(_ref26) {\n    var name = _ref26.name;\n    return name === BrowserTypes.Opera;\n};\nvar isIEType = function isIEType(_ref27) {\n    var name = _ref27.name;\n    return name === BrowserTypes.InternetExplorer || name === BrowserTypes.Ie;\n};\nvar isMIUIType = function isMIUIType(_ref28) {\n    var name = _ref28.name;\n    return name === BrowserTypes.MIUI;\n};\nvar isSamsungBrowserType = function isSamsungBrowserType(_ref29) {\n    var name = _ref29.name;\n    return name === BrowserTypes.SamsungBrowser;\n};\nvar getBrowserFullVersion = function getBrowserFullVersion(_ref30) {\n    var version = _ref30.version;\n    return setDefaults(version);\n};\nvar getBrowserVersion = function getBrowserVersion(_ref31) {\n    var major = _ref31.major;\n    return setDefaults(major);\n};\nvar getBrowserName = function getBrowserName(_ref32) {\n    var name = _ref32.name;\n    return setDefaults(name);\n}; // engine types\nvar getEngineName = function getEngineName(_ref33) {\n    var name = _ref33.name;\n    return setDefaults(name);\n};\nvar getEngineVersion = function getEngineVersion(_ref34) {\n    var version = _ref34.version;\n    return setDefaults(version);\n};\nvar isElectronType = function isElectronType() {\n    var nav = getNavigatorInstance();\n    var ua = nav && nav.userAgent && nav.userAgent.toLowerCase();\n    return typeof ua === \"string\" ? /electron/.test(ua) : false;\n};\nvar isEdgeChromiumType = function isEdgeChromiumType(ua) {\n    return typeof ua === \"string\" && ua.indexOf(\"Edg/\") !== -1;\n};\nvar getIOS13 = function getIOS13() {\n    var nav = getNavigatorInstance();\n    return nav && (/iPad|iPhone|iPod/.test(nav.platform) || nav.platform === \"MacIntel\" && nav.maxTouchPoints > 1) && !window.MSStream;\n};\nvar getIPad13 = function getIPad13() {\n    return isIOS13Check(\"iPad\");\n};\nvar getIphone13 = function getIphone13() {\n    return isIOS13Check(\"iPhone\");\n};\nvar getIPod13 = function getIPod13() {\n    return isIOS13Check(\"iPod\");\n};\nvar getUseragent = function getUseragent(userAg) {\n    return setDefaults(userAg);\n};\nfunction buildSelectorsObject(options) {\n    var _ref = options ? options : UAHelper, device = _ref.device, browser = _ref.browser, os = _ref.os, engine = _ref.engine, ua = _ref.ua;\n    return {\n        isSmartTV: isSmartTVType(device),\n        isConsole: isConsoleType(device),\n        isWearable: isWearableType(device),\n        isEmbedded: isEmbeddedType(device),\n        isMobileSafari: isMobileSafariType(browser) || getIPad13(),\n        isChromium: isChromiumType(browser),\n        isMobile: isMobileAndTabletType(device) || getIPad13(),\n        isMobileOnly: isMobileType(device),\n        isTablet: isTabletType(device) || getIPad13(),\n        isBrowser: isBrowserType(device),\n        isDesktop: isBrowserType(device),\n        isAndroid: isAndroidType(os),\n        isWinPhone: isWinPhoneType(os),\n        isIOS: isIOSType(os) || getIPad13(),\n        isChrome: isChromeType(browser),\n        isFirefox: isFirefoxType(browser),\n        isSafari: isSafariType(browser),\n        isOpera: isOperaType(browser),\n        isIE: isIEType(browser),\n        osVersion: getOsVersion(os),\n        osName: getOsName(os),\n        fullBrowserVersion: getBrowserFullVersion(browser),\n        browserVersion: getBrowserVersion(browser),\n        browserName: getBrowserName(browser),\n        mobileVendor: getMobileVendor(device),\n        mobileModel: getMobileModel(device),\n        engineName: getEngineName(engine),\n        engineVersion: getEngineVersion(engine),\n        getUA: getUseragent(ua),\n        isEdge: isEdgeType(browser) || isEdgeChromiumType(ua),\n        isYandex: isYandexType(browser),\n        deviceType: getDeviceType(device),\n        isIOS13: getIOS13(),\n        isIPad13: getIPad13(),\n        isIPhone13: getIphone13(),\n        isIPod13: getIPod13(),\n        isElectron: isElectronType(),\n        isEdgeChromium: isEdgeChromiumType(ua),\n        isLegacyEdge: isEdgeType(browser) && !isEdgeChromiumType(ua),\n        isWindows: isWindowsType(os),\n        isMacOs: isMacOsType(os),\n        isMIUI: isMIUIType(browser),\n        isSamsungBrowser: isSamsungBrowserType(browser)\n    };\n}\nvar isSmartTV = isSmartTVType(device);\nvar isConsole = isConsoleType(device);\nvar isWearable = isWearableType(device);\nvar isEmbedded = isEmbeddedType(device);\nvar isMobileSafari = isMobileSafariType(browser) || getIPad13();\nvar isChromium = isChromiumType(browser);\nvar isMobile = isMobileAndTabletType(device) || getIPad13();\nvar isMobileOnly = isMobileType(device);\nvar isTablet = isTabletType(device) || getIPad13();\nvar isBrowser = isBrowserType(device);\nvar isDesktop = isBrowserType(device);\nvar isAndroid = isAndroidType(os);\nvar isWinPhone = isWinPhoneType(os);\nvar isIOS = isIOSType(os) || getIPad13();\nvar isChrome = isChromeType(browser);\nvar isFirefox = isFirefoxType(browser);\nvar isSafari = isSafariType(browser);\nvar isOpera = isOperaType(browser);\nvar isIE = isIEType(browser);\nvar osVersion = getOsVersion(os);\nvar osName = getOsName(os);\nvar fullBrowserVersion = getBrowserFullVersion(browser);\nvar browserVersion = getBrowserVersion(browser);\nvar browserName = getBrowserName(browser);\nvar mobileVendor = getMobileVendor(device);\nvar mobileModel = getMobileModel(device);\nvar engineName = getEngineName(engine);\nvar engineVersion = getEngineVersion(engine);\nvar getUA = getUseragent(ua);\nvar isEdge = isEdgeType(browser) || isEdgeChromiumType(ua);\nvar isYandex = isYandexType(browser);\nvar deviceType = getDeviceType(device);\nvar isIOS13 = getIOS13();\nvar isIPad13 = getIPad13();\nvar isIPhone13 = getIphone13();\nvar isIPod13 = getIPod13();\nvar isElectron = isElectronType();\nvar isEdgeChromium = isEdgeChromiumType(ua);\nvar isLegacyEdge = isEdgeType(browser) && !isEdgeChromiumType(ua);\nvar isWindows = isWindowsType(os);\nvar isMacOs = isMacOsType(os);\nvar isMIUI = isMIUIType(browser);\nvar isSamsungBrowser = isSamsungBrowserType(browser);\nvar getSelectorsByUserAgent = function getSelectorsByUserAgent(userAgent) {\n    if (!userAgent || typeof userAgent !== \"string\") {\n        console.error(\"No valid user agent string was provided\");\n        return;\n    }\n    var _UAHelper$parseUserAg = parseUserAgent(userAgent), device = _UAHelper$parseUserAg.device, browser = _UAHelper$parseUserAg.browser, os = _UAHelper$parseUserAg.os, engine = _UAHelper$parseUserAg.engine, ua = _UAHelper$parseUserAg.ua;\n    return buildSelectorsObject({\n        device: device,\n        browser: browser,\n        os: os,\n        engine: engine,\n        ua: ua\n    });\n};\nvar AndroidView = function AndroidView(_ref) {\n    var renderWithFragment = _ref.renderWithFragment, children = _ref.children, props = _objectWithoutProperties(_ref, [\n        \"renderWithFragment\",\n        \"children\"\n    ]);\n    return isAndroid ? renderWithFragment ? React__default.createElement(React.Fragment, null, children) : React__default.createElement(\"div\", props, children) : null;\n};\nvar BrowserView = function BrowserView(_ref2) {\n    var renderWithFragment = _ref2.renderWithFragment, children = _ref2.children, props = _objectWithoutProperties(_ref2, [\n        \"renderWithFragment\",\n        \"children\"\n    ]);\n    return isBrowser ? renderWithFragment ? React__default.createElement(React.Fragment, null, children) : React__default.createElement(\"div\", props, children) : null;\n};\nvar IEView = function IEView(_ref3) {\n    var renderWithFragment = _ref3.renderWithFragment, children = _ref3.children, props = _objectWithoutProperties(_ref3, [\n        \"renderWithFragment\",\n        \"children\"\n    ]);\n    return isIE ? renderWithFragment ? React__default.createElement(React.Fragment, null, children) : React__default.createElement(\"div\", props, children) : null;\n};\nvar IOSView = function IOSView(_ref4) {\n    var renderWithFragment = _ref4.renderWithFragment, children = _ref4.children, props = _objectWithoutProperties(_ref4, [\n        \"renderWithFragment\",\n        \"children\"\n    ]);\n    return isIOS ? renderWithFragment ? React__default.createElement(React.Fragment, null, children) : React__default.createElement(\"div\", props, children) : null;\n};\nvar MobileView = function MobileView(_ref5) {\n    var renderWithFragment = _ref5.renderWithFragment, children = _ref5.children, props = _objectWithoutProperties(_ref5, [\n        \"renderWithFragment\",\n        \"children\"\n    ]);\n    return isMobile ? renderWithFragment ? React__default.createElement(React.Fragment, null, children) : React__default.createElement(\"div\", props, children) : null;\n};\nvar TabletView = function TabletView(_ref6) {\n    var renderWithFragment = _ref6.renderWithFragment, children = _ref6.children, props = _objectWithoutProperties(_ref6, [\n        \"renderWithFragment\",\n        \"children\"\n    ]);\n    return isTablet ? renderWithFragment ? React__default.createElement(React.Fragment, null, children) : React__default.createElement(\"div\", props, children) : null;\n};\nvar WinPhoneView = function WinPhoneView(_ref7) {\n    var renderWithFragment = _ref7.renderWithFragment, children = _ref7.children, props = _objectWithoutProperties(_ref7, [\n        \"renderWithFragment\",\n        \"children\"\n    ]);\n    return isWinPhone ? renderWithFragment ? React__default.createElement(React.Fragment, null, children) : React__default.createElement(\"div\", props, children) : null;\n};\nvar MobileOnlyView = function MobileOnlyView(_ref8) {\n    var renderWithFragment = _ref8.renderWithFragment, children = _ref8.children, viewClassName = _ref8.viewClassName, style = _ref8.style, props = _objectWithoutProperties(_ref8, [\n        \"renderWithFragment\",\n        \"children\",\n        \"viewClassName\",\n        \"style\"\n    ]);\n    return isMobileOnly ? renderWithFragment ? React__default.createElement(React.Fragment, null, children) : React__default.createElement(\"div\", props, children) : null;\n};\nvar SmartTVView = function SmartTVView(_ref9) {\n    var renderWithFragment = _ref9.renderWithFragment, children = _ref9.children, props = _objectWithoutProperties(_ref9, [\n        \"renderWithFragment\",\n        \"children\"\n    ]);\n    return isSmartTV ? renderWithFragment ? React__default.createElement(React.Fragment, null, children) : React__default.createElement(\"div\", props, children) : null;\n};\nvar ConsoleView = function ConsoleView(_ref10) {\n    var renderWithFragment = _ref10.renderWithFragment, children = _ref10.children, props = _objectWithoutProperties(_ref10, [\n        \"renderWithFragment\",\n        \"children\"\n    ]);\n    return isConsole ? renderWithFragment ? React__default.createElement(React.Fragment, null, children) : React__default.createElement(\"div\", props, children) : null;\n};\nvar WearableView = function WearableView(_ref11) {\n    var renderWithFragment = _ref11.renderWithFragment, children = _ref11.children, props = _objectWithoutProperties(_ref11, [\n        \"renderWithFragment\",\n        \"children\"\n    ]);\n    return isWearable ? renderWithFragment ? React__default.createElement(React.Fragment, null, children) : React__default.createElement(\"div\", props, children) : null;\n};\nvar CustomView = function CustomView(_ref12) {\n    var renderWithFragment = _ref12.renderWithFragment, children = _ref12.children, viewClassName = _ref12.viewClassName, style = _ref12.style, condition = _ref12.condition, props = _objectWithoutProperties(_ref12, [\n        \"renderWithFragment\",\n        \"children\",\n        \"viewClassName\",\n        \"style\",\n        \"condition\"\n    ]);\n    return condition ? renderWithFragment ? React__default.createElement(React.Fragment, null, children) : React__default.createElement(\"div\", props, children) : null;\n};\nfunction withOrientationChange(WrappedComponent) {\n    return /*#__PURE__*/ function(_React$Component) {\n        _inherits(_class, _React$Component);\n        function _class(props) {\n            var _this;\n            _classCallCheck(this, _class);\n            _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this, props));\n            _this.isEventListenerAdded = false;\n            _this.handleOrientationChange = _this.handleOrientationChange.bind(_assertThisInitialized(_this));\n            _this.onOrientationChange = _this.onOrientationChange.bind(_assertThisInitialized(_this));\n            _this.onPageLoad = _this.onPageLoad.bind(_assertThisInitialized(_this));\n            _this.state = {\n                isLandscape: false,\n                isPortrait: false\n            };\n            return _this;\n        }\n        _createClass(_class, [\n            {\n                key: \"handleOrientationChange\",\n                value: function handleOrientationChange() {\n                    if (!this.isEventListenerAdded) {\n                        this.isEventListenerAdded = true;\n                    }\n                    var orientation = window.innerWidth > window.innerHeight ? 90 : 0;\n                    this.setState({\n                        isPortrait: orientation === 0,\n                        isLandscape: orientation === 90\n                    });\n                }\n            },\n            {\n                key: \"onOrientationChange\",\n                value: function onOrientationChange() {\n                    this.handleOrientationChange();\n                }\n            },\n            {\n                key: \"onPageLoad\",\n                value: function onPageLoad() {\n                    this.handleOrientationChange();\n                }\n            },\n            {\n                key: \"componentDidMount\",\n                value: function componentDidMount() {\n                    if ( true && isMobile) {\n                        if (!this.isEventListenerAdded) {\n                            this.handleOrientationChange();\n                            window.addEventListener(\"load\", this.onPageLoad, false);\n                        } else {\n                            window.removeEventListener(\"load\", this.onPageLoad, false);\n                        }\n                        window.addEventListener(\"resize\", this.onOrientationChange, false);\n                    }\n                }\n            },\n            {\n                key: \"componentWillUnmount\",\n                value: function componentWillUnmount() {\n                    window.removeEventListener(\"resize\", this.onOrientationChange, false);\n                }\n            },\n            {\n                key: \"render\",\n                value: function render() {\n                    return React__default.createElement(WrappedComponent, _extends({}, this.props, {\n                        isLandscape: this.state.isLandscape,\n                        isPortrait: this.state.isPortrait\n                    }));\n                }\n            }\n        ]);\n        return _class;\n    }(React__default.Component);\n}\nfunction useMobileOrientation() {\n    var _useState = React.useState(function() {\n        var orientation = window.innerWidth > window.innerHeight ? 90 : 0;\n        return {\n            isPortrait: orientation === 0,\n            isLandscape: orientation === 90,\n            orientation: orientation === 0 ? \"portrait\" : \"landscape\"\n        };\n    }), _useState2 = _slicedToArray(_useState, 2), state = _useState2[0], setState = _useState2[1];\n    var handleOrientationChange = React.useCallback(function() {\n        var orientation = window.innerWidth > window.innerHeight ? 90 : 0;\n        var next = {\n            isPortrait: orientation === 0,\n            isLandscape: orientation === 90,\n            orientation: orientation === 0 ? \"portrait\" : \"landscape\"\n        };\n        state.orientation !== next.orientation && setState(next);\n    }, [\n        state.orientation\n    ]);\n    React.useEffect(function() {\n        if ( true && isMobile) {\n            handleOrientationChange();\n            window.addEventListener(\"load\", handleOrientationChange, false);\n            window.addEventListener(\"resize\", handleOrientationChange, false);\n        }\n        return function() {\n            window.removeEventListener(\"resize\", handleOrientationChange, false);\n            window.removeEventListener(\"load\", handleOrientationChange, false);\n        };\n    }, [\n        handleOrientationChange\n    ]);\n    return state;\n}\nfunction useDeviceData(userAgent) {\n    var hookUserAgent = userAgent ? userAgent : window.navigator.userAgent;\n    return parseUserAgent(hookUserAgent);\n}\nfunction useDeviceSelectors(userAgent) {\n    var hookUserAgent = userAgent ? userAgent : window.navigator.userAgent;\n    var deviceData = useDeviceData(hookUserAgent);\n    var selectors = buildSelectorsObject(deviceData);\n    return [\n        selectors,\n        deviceData\n    ];\n}\nexports.AndroidView = AndroidView;\nexports.BrowserTypes = BrowserTypes;\nexports.BrowserView = BrowserView;\nexports.ConsoleView = ConsoleView;\nexports.CustomView = CustomView;\nexports.IEView = IEView;\nexports.IOSView = IOSView;\nexports.MobileOnlyView = MobileOnlyView;\nexports.MobileView = MobileView;\nexports.OsTypes = OsTypes;\nexports.SmartTVView = SmartTVView;\nexports.TabletView = TabletView;\nexports.WearableView = WearableView;\nexports.WinPhoneView = WinPhoneView;\nexports.browserName = browserName;\nexports.browserVersion = browserVersion;\nexports.deviceDetect = deviceDetect;\nexports.deviceType = deviceType;\nexports.engineName = engineName;\nexports.engineVersion = engineVersion;\nexports.fullBrowserVersion = fullBrowserVersion;\nexports.getSelectorsByUserAgent = getSelectorsByUserAgent;\nexports.getUA = getUA;\nexports.isAndroid = isAndroid;\nexports.isBrowser = isBrowser;\nexports.isChrome = isChrome;\nexports.isChromium = isChromium;\nexports.isConsole = isConsole;\nexports.isDesktop = isDesktop;\nexports.isEdge = isEdge;\nexports.isEdgeChromium = isEdgeChromium;\nexports.isElectron = isElectron;\nexports.isEmbedded = isEmbedded;\nexports.isFirefox = isFirefox;\nexports.isIE = isIE;\nexports.isIOS = isIOS;\nexports.isIOS13 = isIOS13;\nexports.isIPad13 = isIPad13;\nexports.isIPhone13 = isIPhone13;\nexports.isIPod13 = isIPod13;\nexports.isLegacyEdge = isLegacyEdge;\nexports.isMIUI = isMIUI;\nexports.isMacOs = isMacOs;\nexports.isMobile = isMobile;\nexports.isMobileOnly = isMobileOnly;\nexports.isMobileSafari = isMobileSafari;\nexports.isOpera = isOpera;\nexports.isSafari = isSafari;\nexports.isSamsungBrowser = isSamsungBrowser;\nexports.isSmartTV = isSmartTV;\nexports.isTablet = isTablet;\nexports.isWearable = isWearable;\nexports.isWinPhone = isWinPhone;\nexports.isWindows = isWindows;\nexports.isYandex = isYandex;\nexports.mobileModel = mobileModel;\nexports.mobileVendor = mobileVendor;\nexports.osName = osName;\nexports.osVersion = osVersion;\nexports.parseUserAgent = parseUserAgent;\nexports.setUserAgent = setUserAgent;\nexports.useDeviceData = useDeviceData;\nexports.useDeviceSelectors = useDeviceSelectors;\nexports.useMobileOrientation = useMobileOrientation;\nexports.withOrientationChange = withOrientationChange;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGV2aWNlLWRldGVjdC9kaXN0L2xpYi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUU3RCxTQUFTQyxnQkFBaUJDLEVBQUU7SUFBSSxPQUFPLE1BQVEsT0FBT0EsT0FBTyxZQUFhLGFBQWFBLEtBQU1BLEVBQUUsQ0FBQyxVQUFVLEdBQUdBO0FBQUk7QUFFakgsSUFBSUMsUUFBUUMsbUJBQU9BLENBQUM7QUFDcEIsSUFBSUMsaUJBQWlCSixnQkFBZ0JFO0FBRXJDLElBQUlHLFdBQVdGLG1CQUFPQSxDQUFDO0FBRXZCLElBQUlHLG1CQUFtQixJQUFJRDtBQUMzQixJQUFJRSxVQUFVRCxpQkFBaUJFLFVBQVU7QUFDekMsSUFBSUMsTUFBTUgsaUJBQWlCSSxNQUFNO0FBQ2pDLElBQUlDLFNBQVNMLGlCQUFpQk0sU0FBUztBQUN2QyxJQUFJQyxTQUFTUCxpQkFBaUJRLFNBQVM7QUFDdkMsSUFBSUMsS0FBS1QsaUJBQWlCVSxLQUFLO0FBQy9CLElBQUlDLEtBQUtYLGlCQUFpQlksS0FBSztBQUMvQixJQUFJQyxRQUFRLFNBQVNBLE1BQU1DLGVBQWU7SUFDeEMsT0FBT2QsaUJBQWlCZSxLQUFLLENBQUNEO0FBQ2hDO0FBQ0EsSUFBSUUsaUJBQWlCLFNBQVNBLGVBQWVDLFNBQVM7SUFDcEQsSUFBSSxDQUFDQSxXQUFXO1FBQ2RDLFFBQVFDLEtBQUssQ0FBQztRQUNkO0lBQ0Y7SUFFQSxJQUFJQyxvQkFBb0IsSUFBSXJCLFNBQVNrQjtJQUNyQyxPQUFPO1FBQ0xJLElBQUlEO1FBQ0puQixTQUFTbUIsa0JBQWtCbEIsVUFBVTtRQUNyQ0MsS0FBS2lCLGtCQUFrQmhCLE1BQU07UUFDN0JDLFFBQVFlLGtCQUFrQmQsU0FBUztRQUNuQ0MsUUFBUWEsa0JBQWtCWixTQUFTO1FBQ25DQyxJQUFJVyxrQkFBa0JWLEtBQUs7UUFDM0JDLElBQUlTLGtCQUFrQlIsS0FBSztR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elIsWUFBWSxHQUFHNFI7QUFDZjVSLGFBQWEsR0FBR3VSO0FBQ2hCdlIsZUFBZSxHQUFHb1M7QUFDbEJwUyxnQkFBZ0IsR0FBR3FTO0FBQ25CclMsa0JBQWtCLEdBQUdzUztBQUNyQnRTLGdCQUFnQixHQUFHdVM7QUFDbkJ2UyxvQkFBb0IsR0FBRzBTO0FBQ3ZCMVMsY0FBYyxHQUFHNlM7QUFDakI3UyxlQUFlLEdBQUc0UztBQUNsQjVTLGdCQUFnQixHQUFHNko7QUFDbkI3SixvQkFBb0IsR0FBR21SO0FBQ3ZCblIsc0JBQXNCLEdBQUdpUjtBQUN6QmpSLGVBQWUsR0FBRzJSO0FBQ2xCM1IsZ0JBQWdCLEdBQUcwUjtBQUNuQjFSLHdCQUF3QixHQUFHOFM7QUFDM0I5UyxpQkFBaUIsR0FBR2dLO0FBQ3BCaEssZ0JBQWdCLEdBQUc4SjtBQUNuQjlKLGtCQUFrQixHQUFHa0s7QUFDckJsSyxrQkFBa0IsR0FBR3NSO0FBQ3JCdFIsaUJBQWlCLEdBQUcyUztBQUNwQjNTLGdCQUFnQixHQUFHa1M7QUFDbkJsUyxtQkFBbUIsR0FBR2dTO0FBQ3RCaFMsb0JBQW9CLEdBQUcrUjtBQUN2Qi9SLGNBQWMsR0FBR3dMO0FBQ2pCeEwsaUJBQWlCLEdBQUd5TDtBQUNwQnpMLHNCQUFzQixHQUFHd0I7QUFDekJ4QixvQkFBb0IsR0FBRzhCO0FBQ3ZCOUIscUJBQXFCLEdBQUdpVztBQUN4QmpXLDBCQUEwQixHQUFHbVc7QUFDN0JuVyw0QkFBNEIsR0FBRzJWO0FBQy9CM1YsNkJBQTZCLEdBQUdvVSIsInNvdXJjZXMiOlsid2VicGFjazovL0Bwcml2eS1pby93YWdtaS1kZW1vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRldmljZS1kZXRlY3QvZGlzdC9saWIuanM/ZmQ2YSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdCAoZXgpIHsgcmV0dXJuIChleCAmJiAodHlwZW9mIGV4ID09PSAnb2JqZWN0JykgJiYgJ2RlZmF1bHQnIGluIGV4KSA/IGV4WydkZWZhdWx0J10gOiBleDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFJlYWN0X19kZWZhdWx0ID0gX2ludGVyb3BEZWZhdWx0KFJlYWN0KTtcblxudmFyIFVBUGFyc2VyID0gcmVxdWlyZSgndWEtcGFyc2VyLWpzL2Rpc3QvdWEtcGFyc2VyLm1pbicpO1xuXG52YXIgQ2xpZW50VUFJbnN0YW5jZSA9IG5ldyBVQVBhcnNlcigpO1xudmFyIGJyb3dzZXIgPSBDbGllbnRVQUluc3RhbmNlLmdldEJyb3dzZXIoKTtcbnZhciBjcHUgPSBDbGllbnRVQUluc3RhbmNlLmdldENQVSgpO1xudmFyIGRldmljZSA9IENsaWVudFVBSW5zdGFuY2UuZ2V0RGV2aWNlKCk7XG52YXIgZW5naW5lID0gQ2xpZW50VUFJbnN0YW5jZS5nZXRFbmdpbmUoKTtcbnZhciBvcyA9IENsaWVudFVBSW5zdGFuY2UuZ2V0T1MoKTtcbnZhciB1YSA9IENsaWVudFVBSW5zdGFuY2UuZ2V0VUEoKTtcbnZhciBzZXRVYSA9IGZ1bmN0aW9uIHNldFVhKHVzZXJBZ2VudFN0cmluZykge1xuICByZXR1cm4gQ2xpZW50VUFJbnN0YW5jZS5zZXRVQSh1c2VyQWdlbnRTdHJpbmcpO1xufTtcbnZhciBwYXJzZVVzZXJBZ2VudCA9IGZ1bmN0aW9uIHBhcnNlVXNlckFnZW50KHVzZXJBZ2VudCkge1xuICBpZiAoIXVzZXJBZ2VudCkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ05vIHVzZXJBZ2VudCBzdHJpbmcgd2FzIHByb3ZpZGVkJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIFVzZXJBZ2VudEluc3RhbmNlID0gbmV3IFVBUGFyc2VyKHVzZXJBZ2VudCk7XG4gIHJldHVybiB7XG4gICAgVUE6IFVzZXJBZ2VudEluc3RhbmNlLFxuICAgIGJyb3dzZXI6IFVzZXJBZ2VudEluc3RhbmNlLmdldEJyb3dzZXIoKSxcbiAgICBjcHU6IFVzZXJBZ2VudEluc3RhbmNlLmdldENQVSgpLFxuICAgIGRldmljZTogVXNlckFnZW50SW5zdGFuY2UuZ2V0RGV2aWNlKCksXG4gICAgZW5naW5lOiBVc2VyQWdlbnRJbnN0YW5jZS5nZXRFbmdpbmUoKSxcbiAgICBvczogVXNlckFnZW50SW5zdGFuY2UuZ2V0T1MoKSxcbiAgICB1YTogVXNlckFnZW50SW5zdGFuY2UuZ2V0VUEoKSxcbiAgICBzZXRVc2VyQWdlbnQ6IGZ1bmN0aW9uIHNldFVzZXJBZ2VudCh1c2VyQWdlbnRTdHJpbmcpIHtcbiAgICAgIHJldHVybiBVc2VyQWdlbnRJbnN0YW5jZS5zZXRVQSh1c2VyQWdlbnRTdHJpbmcpO1xuICAgIH1cbiAgfTtcbn07XG5cbnZhciBVQUhlbHBlciA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgQ2xpZW50VUFJbnN0YW5jZTogQ2xpZW50VUFJbnN0YW5jZSxcbiAgYnJvd3NlcjogYnJvd3NlcixcbiAgY3B1OiBjcHUsXG4gIGRldmljZTogZGV2aWNlLFxuICBlbmdpbmU6IGVuZ2luZSxcbiAgb3M6IG9zLFxuICB1YTogdWEsXG4gIHNldFVhOiBzZXRVYSxcbiAgcGFyc2VVc2VyQWdlbnQ6IHBhcnNlVXNlckFnZW50XG59KTtcblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpO1xuXG4gICAgaWYgKGVudW1lcmFibGVPbmx5KSB7XG4gICAgICBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgfVxuXG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9O1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuXG4gIHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcblxuICB2YXIga2V5LCBpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmIChjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9IGVsc2UgaWYgKGNhbGwgIT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtcbiAgfVxuXG4gIHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xufVxuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIHZhciBfaSA9IGFyciA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXTtcblxuICBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuO1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcblxuICB2YXIgX3MsIF9lO1xuXG4gIHRyeSB7XG4gICAgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuXG4gIHJldHVybiBhcnIyO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG52YXIgRGV2aWNlVHlwZXMgPSB7XG4gIE1vYmlsZTogJ21vYmlsZScsXG4gIFRhYmxldDogJ3RhYmxldCcsXG4gIFNtYXJ0VHY6ICdzbWFydHR2JyxcbiAgQ29uc29sZTogJ2NvbnNvbGUnLFxuICBXZWFyYWJsZTogJ3dlYXJhYmxlJyxcbiAgRW1iZWRkZWQ6ICdlbWJlZGRlZCcsXG4gIEJyb3dzZXI6IHVuZGVmaW5lZFxufTtcbnZhciBCcm93c2VyVHlwZXMgPSB7XG4gIENocm9tZTogJ0Nocm9tZScsXG4gIEZpcmVmb3g6ICdGaXJlZm94JyxcbiAgT3BlcmE6ICdPcGVyYScsXG4gIFlhbmRleDogJ1lhbmRleCcsXG4gIFNhZmFyaTogJ1NhZmFyaScsXG4gIEludGVybmV0RXhwbG9yZXI6ICdJbnRlcm5ldCBFeHBsb3JlcicsXG4gIEVkZ2U6ICdFZGdlJyxcbiAgQ2hyb21pdW06ICdDaHJvbWl1bScsXG4gIEllOiAnSUUnLFxuICBNb2JpbGVTYWZhcmk6ICdNb2JpbGUgU2FmYXJpJyxcbiAgRWRnZUNocm9taXVtOiAnRWRnZSBDaHJvbWl1bScsXG4gIE1JVUk6ICdNSVVJIEJyb3dzZXInLFxuICBTYW1zdW5nQnJvd3NlcjogJ1NhbXN1bmcgQnJvd3Nlcidcbn07XG52YXIgT3NUeXBlcyA9IHtcbiAgSU9TOiAnaU9TJyxcbiAgQW5kcm9pZDogJ0FuZHJvaWQnLFxuICBXaW5kb3dzUGhvbmU6ICdXaW5kb3dzIFBob25lJyxcbiAgV2luZG93czogJ1dpbmRvd3MnLFxuICBNQUNfT1M6ICdNYWMgT1MnXG59O1xudmFyIEluaXRpYWxEZXZpY2VUeXBlcyA9IHtcbiAgaXNNb2JpbGU6IGZhbHNlLFxuICBpc1RhYmxldDogZmFsc2UsXG4gIGlzQnJvd3NlcjogZmFsc2UsXG4gIGlzU21hcnRUVjogZmFsc2UsXG4gIGlzQ29uc29sZTogZmFsc2UsXG4gIGlzV2VhcmFibGU6IGZhbHNlXG59O1xuXG52YXIgY2hlY2tEZXZpY2VUeXBlID0gZnVuY3Rpb24gY2hlY2tEZXZpY2VUeXBlKHR5cGUpIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBEZXZpY2VUeXBlcy5Nb2JpbGU6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpc01vYmlsZTogdHJ1ZVxuICAgICAgfTtcblxuICAgIGNhc2UgRGV2aWNlVHlwZXMuVGFibGV0OlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXNUYWJsZXQ6IHRydWVcbiAgICAgIH07XG5cbiAgICBjYXNlIERldmljZVR5cGVzLlNtYXJ0VHY6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpc1NtYXJ0VFY6IHRydWVcbiAgICAgIH07XG5cbiAgICBjYXNlIERldmljZVR5cGVzLkNvbnNvbGU6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpc0NvbnNvbGU6IHRydWVcbiAgICAgIH07XG5cbiAgICBjYXNlIERldmljZVR5cGVzLldlYXJhYmxlOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXNXZWFyYWJsZTogdHJ1ZVxuICAgICAgfTtcblxuICAgIGNhc2UgRGV2aWNlVHlwZXMuQnJvd3NlcjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlzQnJvd3NlcjogdHJ1ZVxuICAgICAgfTtcblxuICAgIGNhc2UgRGV2aWNlVHlwZXMuRW1iZWRkZWQ6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpc0VtYmVkZGVkOiB0cnVlXG4gICAgICB9O1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBJbml0aWFsRGV2aWNlVHlwZXM7XG4gIH1cbn07XG52YXIgc2V0VXNlckFnZW50ID0gZnVuY3Rpb24gc2V0VXNlckFnZW50KHVzZXJBZ2VudCkge1xuICByZXR1cm4gc2V0VWEodXNlckFnZW50KTtcbn07XG52YXIgc2V0RGVmYXVsdHMgPSBmdW5jdGlvbiBzZXREZWZhdWx0cyhwKSB7XG4gIHZhciBkID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnbm9uZSc7XG4gIHJldHVybiBwID8gcCA6IGQ7XG59O1xudmFyIGdldE5hdmlnYXRvckluc3RhbmNlID0gZnVuY3Rpb24gZ2V0TmF2aWdhdG9ySW5zdGFuY2UoKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh3aW5kb3cubmF2aWdhdG9yIHx8IG5hdmlnYXRvcikge1xuICAgICAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IgfHwgbmF2aWdhdG9yO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG52YXIgaXNJT1MxM0NoZWNrID0gZnVuY3Rpb24gaXNJT1MxM0NoZWNrKHR5cGUpIHtcbiAgdmFyIG5hdiA9IGdldE5hdmlnYXRvckluc3RhbmNlKCk7XG4gIHJldHVybiBuYXYgJiYgbmF2LnBsYXRmb3JtICYmIChuYXYucGxhdGZvcm0uaW5kZXhPZih0eXBlKSAhPT0gLTEgfHwgbmF2LnBsYXRmb3JtID09PSAnTWFjSW50ZWwnICYmIG5hdi5tYXhUb3VjaFBvaW50cyA+IDEgJiYgIXdpbmRvdy5NU1N0cmVhbSk7XG59O1xuXG52YXIgYnJvd3NlclBheWxvYWQgPSBmdW5jdGlvbiBicm93c2VyUGF5bG9hZChpc0Jyb3dzZXIsIGJyb3dzZXIsIGVuZ2luZSwgb3MsIHVhKSB7XG4gIHJldHVybiB7XG4gICAgaXNCcm93c2VyOiBpc0Jyb3dzZXIsXG4gICAgYnJvd3Nlck1ham9yVmVyc2lvbjogc2V0RGVmYXVsdHMoYnJvd3Nlci5tYWpvciksXG4gICAgYnJvd3NlckZ1bGxWZXJzaW9uOiBzZXREZWZhdWx0cyhicm93c2VyLnZlcnNpb24pLFxuICAgIGJyb3dzZXJOYW1lOiBzZXREZWZhdWx0cyhicm93c2VyLm5hbWUpLFxuICAgIGVuZ2luZU5hbWU6IHNldERlZmF1bHRzKGVuZ2luZS5uYW1lKSxcbiAgICBlbmdpbmVWZXJzaW9uOiBzZXREZWZhdWx0cyhlbmdpbmUudmVyc2lvbiksXG4gICAgb3NOYW1lOiBzZXREZWZhdWx0cyhvcy5uYW1lKSxcbiAgICBvc1ZlcnNpb246IHNldERlZmF1bHRzKG9zLnZlcnNpb24pLFxuICAgIHVzZXJBZ2VudDogc2V0RGVmYXVsdHModWEpXG4gIH07XG59O1xudmFyIG1vYmlsZVBheWxvYWQgPSBmdW5jdGlvbiBtb2JpbGVQYXlsb2FkKHR5cGUsIGRldmljZSwgb3MsIHVhKSB7XG4gIHJldHVybiBfb2JqZWN0U3ByZWFkMih7fSwgdHlwZSwge1xuICAgIHZlbmRvcjogc2V0RGVmYXVsdHMoZGV2aWNlLnZlbmRvciksXG4gICAgbW9kZWw6IHNldERlZmF1bHRzKGRldmljZS5tb2RlbCksXG4gICAgb3M6IHNldERlZmF1bHRzKG9zLm5hbWUpLFxuICAgIG9zVmVyc2lvbjogc2V0RGVmYXVsdHMob3MudmVyc2lvbiksXG4gICAgdWE6IHNldERlZmF1bHRzKHVhKVxuICB9KTtcbn07XG52YXIgc21hcnRUdlBheWxvYWQgPSBmdW5jdGlvbiBzbWFydFR2UGF5bG9hZChpc1NtYXJ0VFYsIGVuZ2luZSwgb3MsIHVhKSB7XG4gIHJldHVybiB7XG4gICAgaXNTbWFydFRWOiBpc1NtYXJ0VFYsXG4gICAgZW5naW5lTmFtZTogc2V0RGVmYXVsdHMoZW5naW5lLm5hbWUpLFxuICAgIGVuZ2luZVZlcnNpb246IHNldERlZmF1bHRzKGVuZ2luZS52ZXJzaW9uKSxcbiAgICBvc05hbWU6IHNldERlZmF1bHRzKG9zLm5hbWUpLFxuICAgIG9zVmVyc2lvbjogc2V0RGVmYXVsdHMob3MudmVyc2lvbiksXG4gICAgdXNlckFnZW50OiBzZXREZWZhdWx0cyh1YSlcbiAgfTtcbn07XG52YXIgY29uc29sZVBheWxvYWQgPSBmdW5jdGlvbiBjb25zb2xlUGF5bG9hZChpc0NvbnNvbGUsIGVuZ2luZSwgb3MsIHVhKSB7XG4gIHJldHVybiB7XG4gICAgaXNDb25zb2xlOiBpc0NvbnNvbGUsXG4gICAgZW5naW5lTmFtZTogc2V0RGVmYXVsdHMoZW5naW5lLm5hbWUpLFxuICAgIGVuZ2luZVZlcnNpb246IHNldERlZmF1bHRzKGVuZ2luZS52ZXJzaW9uKSxcbiAgICBvc05hbWU6IHNldERlZmF1bHRzKG9zLm5hbWUpLFxuICAgIG9zVmVyc2lvbjogc2V0RGVmYXVsdHMob3MudmVyc2lvbiksXG4gICAgdXNlckFnZW50OiBzZXREZWZhdWx0cyh1YSlcbiAgfTtcbn07XG52YXIgd2VhcmFibGVQYXlsb2FkID0gZnVuY3Rpb24gd2VhcmFibGVQYXlsb2FkKGlzV2VhcmFibGUsIGVuZ2luZSwgb3MsIHVhKSB7XG4gIHJldHVybiB7XG4gICAgaXNXZWFyYWJsZTogaXNXZWFyYWJsZSxcbiAgICBlbmdpbmVOYW1lOiBzZXREZWZhdWx0cyhlbmdpbmUubmFtZSksXG4gICAgZW5naW5lVmVyc2lvbjogc2V0RGVmYXVsdHMoZW5naW5lLnZlcnNpb24pLFxuICAgIG9zTmFtZTogc2V0RGVmYXVsdHMob3MubmFtZSksXG4gICAgb3NWZXJzaW9uOiBzZXREZWZhdWx0cyhvcy52ZXJzaW9uKSxcbiAgICB1c2VyQWdlbnQ6IHNldERlZmF1bHRzKHVhKVxuICB9O1xufTtcbnZhciBlbWJlZGRlZFBheWxvYWQgPSBmdW5jdGlvbiBlbWJlZGRlZFBheWxvYWQoaXNFbWJlZGRlZCwgZGV2aWNlLCBlbmdpbmUsIG9zLCB1YSkge1xuICByZXR1cm4ge1xuICAgIGlzRW1iZWRkZWQ6IGlzRW1iZWRkZWQsXG4gICAgdmVuZG9yOiBzZXREZWZhdWx0cyhkZXZpY2UudmVuZG9yKSxcbiAgICBtb2RlbDogc2V0RGVmYXVsdHMoZGV2aWNlLm1vZGVsKSxcbiAgICBlbmdpbmVOYW1lOiBzZXREZWZhdWx0cyhlbmdpbmUubmFtZSksXG4gICAgZW5naW5lVmVyc2lvbjogc2V0RGVmYXVsdHMoZW5naW5lLnZlcnNpb24pLFxuICAgIG9zTmFtZTogc2V0RGVmYXVsdHMob3MubmFtZSksXG4gICAgb3NWZXJzaW9uOiBzZXREZWZhdWx0cyhvcy52ZXJzaW9uKSxcbiAgICB1c2VyQWdlbnQ6IHNldERlZmF1bHRzKHVhKVxuICB9O1xufTtcblxuZnVuY3Rpb24gZGV2aWNlRGV0ZWN0KHVzZXJBZ2VudCkge1xuICB2YXIgX3JlZiA9IHVzZXJBZ2VudCA/IHBhcnNlVXNlckFnZW50KHVzZXJBZ2VudCkgOiBVQUhlbHBlcixcbiAgICAgIGRldmljZSA9IF9yZWYuZGV2aWNlLFxuICAgICAgYnJvd3NlciA9IF9yZWYuYnJvd3NlcixcbiAgICAgIGVuZ2luZSA9IF9yZWYuZW5naW5lLFxuICAgICAgb3MgPSBfcmVmLm9zLFxuICAgICAgdWEgPSBfcmVmLnVhO1xuXG4gIHZhciB0eXBlID0gY2hlY2tEZXZpY2VUeXBlKGRldmljZS50eXBlKTtcbiAgdmFyIGlzQnJvd3NlciA9IHR5cGUuaXNCcm93c2VyLFxuICAgICAgaXNNb2JpbGUgPSB0eXBlLmlzTW9iaWxlLFxuICAgICAgaXNUYWJsZXQgPSB0eXBlLmlzVGFibGV0LFxuICAgICAgaXNTbWFydFRWID0gdHlwZS5pc1NtYXJ0VFYsXG4gICAgICBpc0NvbnNvbGUgPSB0eXBlLmlzQ29uc29sZSxcbiAgICAgIGlzV2VhcmFibGUgPSB0eXBlLmlzV2VhcmFibGUsXG4gICAgICBpc0VtYmVkZGVkID0gdHlwZS5pc0VtYmVkZGVkO1xuXG4gIGlmIChpc0Jyb3dzZXIpIHtcbiAgICByZXR1cm4gYnJvd3NlclBheWxvYWQoaXNCcm93c2VyLCBicm93c2VyLCBlbmdpbmUsIG9zLCB1YSk7XG4gIH1cblxuICBpZiAoaXNTbWFydFRWKSB7XG4gICAgcmV0dXJuIHNtYXJ0VHZQYXlsb2FkKGlzU21hcnRUViwgZW5naW5lLCBvcywgdWEpO1xuICB9XG5cbiAgaWYgKGlzQ29uc29sZSkge1xuICAgIHJldHVybiBjb25zb2xlUGF5bG9hZChpc0NvbnNvbGUsIGVuZ2luZSwgb3MsIHVhKTtcbiAgfVxuXG4gIGlmIChpc01vYmlsZSkge1xuICAgIHJldHVybiBtb2JpbGVQYXlsb2FkKHR5cGUsIGRldmljZSwgb3MsIHVhKTtcbiAgfVxuXG4gIGlmIChpc1RhYmxldCkge1xuICAgIHJldHVybiBtb2JpbGVQYXlsb2FkKHR5cGUsIGRldmljZSwgb3MsIHVhKTtcbiAgfVxuXG4gIGlmIChpc1dlYXJhYmxlKSB7XG4gICAgcmV0dXJuIHdlYXJhYmxlUGF5bG9hZChpc1dlYXJhYmxlLCBlbmdpbmUsIG9zLCB1YSk7XG4gIH1cblxuICBpZiAoaXNFbWJlZGRlZCkge1xuICAgIHJldHVybiBlbWJlZGRlZFBheWxvYWQoaXNFbWJlZGRlZCwgZGV2aWNlLCBlbmdpbmUsIG9zLCB1YSk7XG4gIH1cbn1cblxudmFyIGlzTW9iaWxlVHlwZSA9IGZ1bmN0aW9uIGlzTW9iaWxlVHlwZShfcmVmKSB7XG4gIHZhciB0eXBlID0gX3JlZi50eXBlO1xuICByZXR1cm4gdHlwZSA9PT0gRGV2aWNlVHlwZXMuTW9iaWxlO1xufTtcbnZhciBpc1RhYmxldFR5cGUgPSBmdW5jdGlvbiBpc1RhYmxldFR5cGUoX3JlZjIpIHtcbiAgdmFyIHR5cGUgPSBfcmVmMi50eXBlO1xuICByZXR1cm4gdHlwZSA9PT0gRGV2aWNlVHlwZXMuVGFibGV0O1xufTtcbnZhciBpc01vYmlsZUFuZFRhYmxldFR5cGUgPSBmdW5jdGlvbiBpc01vYmlsZUFuZFRhYmxldFR5cGUoX3JlZjMpIHtcbiAgdmFyIHR5cGUgPSBfcmVmMy50eXBlO1xuICByZXR1cm4gdHlwZSA9PT0gRGV2aWNlVHlwZXMuTW9iaWxlIHx8IHR5cGUgPT09IERldmljZVR5cGVzLlRhYmxldDtcbn07XG52YXIgaXNTbWFydFRWVHlwZSA9IGZ1bmN0aW9uIGlzU21hcnRUVlR5cGUoX3JlZjQpIHtcbiAgdmFyIHR5cGUgPSBfcmVmNC50eXBlO1xuICByZXR1cm4gdHlwZSA9PT0gRGV2aWNlVHlwZXMuU21hcnRUdjtcbn07XG52YXIgaXNCcm93c2VyVHlwZSA9IGZ1bmN0aW9uIGlzQnJvd3NlclR5cGUoX3JlZjUpIHtcbiAgdmFyIHR5cGUgPSBfcmVmNS50eXBlO1xuICByZXR1cm4gdHlwZSA9PT0gRGV2aWNlVHlwZXMuQnJvd3Nlcjtcbn07XG52YXIgaXNXZWFyYWJsZVR5cGUgPSBmdW5jdGlvbiBpc1dlYXJhYmxlVHlwZShfcmVmNikge1xuICB2YXIgdHlwZSA9IF9yZWY2LnR5cGU7XG4gIHJldHVybiB0eXBlID09PSBEZXZpY2VUeXBlcy5XZWFyYWJsZTtcbn07XG52YXIgaXNDb25zb2xlVHlwZSA9IGZ1bmN0aW9uIGlzQ29uc29sZVR5cGUoX3JlZjcpIHtcbiAgdmFyIHR5cGUgPSBfcmVmNy50eXBlO1xuICByZXR1cm4gdHlwZSA9PT0gRGV2aWNlVHlwZXMuQ29uc29sZTtcbn07XG52YXIgaXNFbWJlZGRlZFR5cGUgPSBmdW5jdGlvbiBpc0VtYmVkZGVkVHlwZShfcmVmOCkge1xuICB2YXIgdHlwZSA9IF9yZWY4LnR5cGU7XG4gIHJldHVybiB0eXBlID09PSBEZXZpY2VUeXBlcy5FbWJlZGRlZDtcbn07XG52YXIgZ2V0TW9iaWxlVmVuZG9yID0gZnVuY3Rpb24gZ2V0TW9iaWxlVmVuZG9yKF9yZWY5KSB7XG4gIHZhciB2ZW5kb3IgPSBfcmVmOS52ZW5kb3I7XG4gIHJldHVybiBzZXREZWZhdWx0cyh2ZW5kb3IpO1xufTtcbnZhciBnZXRNb2JpbGVNb2RlbCA9IGZ1bmN0aW9uIGdldE1vYmlsZU1vZGVsKF9yZWYxMCkge1xuICB2YXIgbW9kZWwgPSBfcmVmMTAubW9kZWw7XG4gIHJldHVybiBzZXREZWZhdWx0cyhtb2RlbCk7XG59O1xudmFyIGdldERldmljZVR5cGUgPSBmdW5jdGlvbiBnZXREZXZpY2VUeXBlKF9yZWYxMSkge1xuICB2YXIgdHlwZSA9IF9yZWYxMS50eXBlO1xuICByZXR1cm4gc2V0RGVmYXVsdHModHlwZSwgJ2Jyb3dzZXInKTtcbn07IC8vIG9zIHR5cGVzXG5cbnZhciBpc0FuZHJvaWRUeXBlID0gZnVuY3Rpb24gaXNBbmRyb2lkVHlwZShfcmVmMTIpIHtcbiAgdmFyIG5hbWUgPSBfcmVmMTIubmFtZTtcbiAgcmV0dXJuIG5hbWUgPT09IE9zVHlwZXMuQW5kcm9pZDtcbn07XG52YXIgaXNXaW5kb3dzVHlwZSA9IGZ1bmN0aW9uIGlzV2luZG93c1R5cGUoX3JlZjEzKSB7XG4gIHZhciBuYW1lID0gX3JlZjEzLm5hbWU7XG4gIHJldHVybiBuYW1lID09PSBPc1R5cGVzLldpbmRvd3M7XG59O1xudmFyIGlzTWFjT3NUeXBlID0gZnVuY3Rpb24gaXNNYWNPc1R5cGUoX3JlZjE0KSB7XG4gIHZhciBuYW1lID0gX3JlZjE0Lm5hbWU7XG4gIHJldHVybiBuYW1lID09PSBPc1R5cGVzLk1BQ19PUztcbn07XG52YXIgaXNXaW5QaG9uZVR5cGUgPSBmdW5jdGlvbiBpc1dpblBob25lVHlwZShfcmVmMTUpIHtcbiAgdmFyIG5hbWUgPSBfcmVmMTUubmFtZTtcbiAgcmV0dXJuIG5hbWUgPT09IE9zVHlwZXMuV2luZG93c1Bob25lO1xufTtcbnZhciBpc0lPU1R5cGUgPSBmdW5jdGlvbiBpc0lPU1R5cGUoX3JlZjE2KSB7XG4gIHZhciBuYW1lID0gX3JlZjE2Lm5hbWU7XG4gIHJldHVybiBuYW1lID09PSBPc1R5cGVzLklPUztcbn07XG52YXIgZ2V0T3NWZXJzaW9uID0gZnVuY3Rpb24gZ2V0T3NWZXJzaW9uKF9yZWYxNykge1xuICB2YXIgdmVyc2lvbiA9IF9yZWYxNy52ZXJzaW9uO1xuICByZXR1cm4gc2V0RGVmYXVsdHModmVyc2lvbik7XG59O1xudmFyIGdldE9zTmFtZSA9IGZ1bmN0aW9uIGdldE9zTmFtZShfcmVmMTgpIHtcbiAgdmFyIG5hbWUgPSBfcmVmMTgubmFtZTtcbiAgcmV0dXJuIHNldERlZmF1bHRzKG5hbWUpO1xufTsgLy8gYnJvd3NlciB0eXBlc1xuXG52YXIgaXNDaHJvbWVUeXBlID0gZnVuY3Rpb24gaXNDaHJvbWVUeXBlKF9yZWYxOSkge1xuICB2YXIgbmFtZSA9IF9yZWYxOS5uYW1lO1xuICByZXR1cm4gbmFtZSA9PT0gQnJvd3NlclR5cGVzLkNocm9tZTtcbn07XG52YXIgaXNGaXJlZm94VHlwZSA9IGZ1bmN0aW9uIGlzRmlyZWZveFR5cGUoX3JlZjIwKSB7XG4gIHZhciBuYW1lID0gX3JlZjIwLm5hbWU7XG4gIHJldHVybiBuYW1lID09PSBCcm93c2VyVHlwZXMuRmlyZWZveDtcbn07XG52YXIgaXNDaHJvbWl1bVR5cGUgPSBmdW5jdGlvbiBpc0Nocm9taXVtVHlwZShfcmVmMjEpIHtcbiAgdmFyIG5hbWUgPSBfcmVmMjEubmFtZTtcbiAgcmV0dXJuIG5hbWUgPT09IEJyb3dzZXJUeXBlcy5DaHJvbWl1bTtcbn07XG52YXIgaXNFZGdlVHlwZSA9IGZ1bmN0aW9uIGlzRWRnZVR5cGUoX3JlZjIyKSB7XG4gIHZhciBuYW1lID0gX3JlZjIyLm5hbWU7XG4gIHJldHVybiBuYW1lID09PSBCcm93c2VyVHlwZXMuRWRnZTtcbn07XG52YXIgaXNZYW5kZXhUeXBlID0gZnVuY3Rpb24gaXNZYW5kZXhUeXBlKF9yZWYyMykge1xuICB2YXIgbmFtZSA9IF9yZWYyMy5uYW1lO1xuICByZXR1cm4gbmFtZSA9PT0gQnJvd3NlclR5cGVzLllhbmRleDtcbn07XG52YXIgaXNTYWZhcmlUeXBlID0gZnVuY3Rpb24gaXNTYWZhcmlUeXBlKF9yZWYyNCkge1xuICB2YXIgbmFtZSA9IF9yZWYyNC5uYW1lO1xuICByZXR1cm4gbmFtZSA9PT0gQnJvd3NlclR5cGVzLlNhZmFyaSB8fCBuYW1lID09PSBCcm93c2VyVHlwZXMuTW9iaWxlU2FmYXJpO1xufTtcbnZhciBpc01vYmlsZVNhZmFyaVR5cGUgPSBmdW5jdGlvbiBpc01vYmlsZVNhZmFyaVR5cGUoX3JlZjI1KSB7XG4gIHZhciBuYW1lID0gX3JlZjI1Lm5hbWU7XG4gIHJldHVybiBuYW1lID09PSBCcm93c2VyVHlwZXMuTW9iaWxlU2FmYXJpO1xufTtcbnZhciBpc09wZXJhVHlwZSA9IGZ1bmN0aW9uIGlzT3BlcmFUeXBlKF9yZWYyNikge1xuICB2YXIgbmFtZSA9IF9yZWYyNi5uYW1lO1xuICByZXR1cm4gbmFtZSA9PT0gQnJvd3NlclR5cGVzLk9wZXJhO1xufTtcbnZhciBpc0lFVHlwZSA9IGZ1bmN0aW9uIGlzSUVUeXBlKF9yZWYyNykge1xuICB2YXIgbmFtZSA9IF9yZWYyNy5uYW1lO1xuICByZXR1cm4gbmFtZSA9PT0gQnJvd3NlclR5cGVzLkludGVybmV0RXhwbG9yZXIgfHwgbmFtZSA9PT0gQnJvd3NlclR5cGVzLkllO1xufTtcbnZhciBpc01JVUlUeXBlID0gZnVuY3Rpb24gaXNNSVVJVHlwZShfcmVmMjgpIHtcbiAgdmFyIG5hbWUgPSBfcmVmMjgubmFtZTtcbiAgcmV0dXJuIG5hbWUgPT09IEJyb3dzZXJUeXBlcy5NSVVJO1xufTtcbnZhciBpc1NhbXN1bmdCcm93c2VyVHlwZSA9IGZ1bmN0aW9uIGlzU2Ftc3VuZ0Jyb3dzZXJUeXBlKF9yZWYyOSkge1xuICB2YXIgbmFtZSA9IF9yZWYyOS5uYW1lO1xuICByZXR1cm4gbmFtZSA9PT0gQnJvd3NlclR5cGVzLlNhbXN1bmdCcm93c2VyO1xufTtcbnZhciBnZXRCcm93c2VyRnVsbFZlcnNpb24gPSBmdW5jdGlvbiBnZXRCcm93c2VyRnVsbFZlcnNpb24oX3JlZjMwKSB7XG4gIHZhciB2ZXJzaW9uID0gX3JlZjMwLnZlcnNpb247XG4gIHJldHVybiBzZXREZWZhdWx0cyh2ZXJzaW9uKTtcbn07XG52YXIgZ2V0QnJvd3NlclZlcnNpb24gPSBmdW5jdGlvbiBnZXRCcm93c2VyVmVyc2lvbihfcmVmMzEpIHtcbiAgdmFyIG1ham9yID0gX3JlZjMxLm1ham9yO1xuICByZXR1cm4gc2V0RGVmYXVsdHMobWFqb3IpO1xufTtcbnZhciBnZXRCcm93c2VyTmFtZSA9IGZ1bmN0aW9uIGdldEJyb3dzZXJOYW1lKF9yZWYzMikge1xuICB2YXIgbmFtZSA9IF9yZWYzMi5uYW1lO1xuICByZXR1cm4gc2V0RGVmYXVsdHMobmFtZSk7XG59OyAvLyBlbmdpbmUgdHlwZXNcblxudmFyIGdldEVuZ2luZU5hbWUgPSBmdW5jdGlvbiBnZXRFbmdpbmVOYW1lKF9yZWYzMykge1xuICB2YXIgbmFtZSA9IF9yZWYzMy5uYW1lO1xuICByZXR1cm4gc2V0RGVmYXVsdHMobmFtZSk7XG59O1xudmFyIGdldEVuZ2luZVZlcnNpb24gPSBmdW5jdGlvbiBnZXRFbmdpbmVWZXJzaW9uKF9yZWYzNCkge1xuICB2YXIgdmVyc2lvbiA9IF9yZWYzNC52ZXJzaW9uO1xuICByZXR1cm4gc2V0RGVmYXVsdHModmVyc2lvbik7XG59O1xudmFyIGlzRWxlY3Ryb25UeXBlID0gZnVuY3Rpb24gaXNFbGVjdHJvblR5cGUoKSB7XG4gIHZhciBuYXYgPSBnZXROYXZpZ2F0b3JJbnN0YW5jZSgpO1xuICB2YXIgdWEgPSBuYXYgJiYgbmF2LnVzZXJBZ2VudCAmJiBuYXYudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiB0eXBlb2YgdWEgPT09ICdzdHJpbmcnID8gL2VsZWN0cm9uLy50ZXN0KHVhKSA6IGZhbHNlO1xufTtcbnZhciBpc0VkZ2VDaHJvbWl1bVR5cGUgPSBmdW5jdGlvbiBpc0VkZ2VDaHJvbWl1bVR5cGUodWEpIHtcbiAgcmV0dXJuIHR5cGVvZiB1YSA9PT0gJ3N0cmluZycgJiYgdWEuaW5kZXhPZignRWRnLycpICE9PSAtMTtcbn07XG52YXIgZ2V0SU9TMTMgPSBmdW5jdGlvbiBnZXRJT1MxMygpIHtcbiAgdmFyIG5hdiA9IGdldE5hdmlnYXRvckluc3RhbmNlKCk7XG4gIHJldHVybiBuYXYgJiYgKC9pUGFkfGlQaG9uZXxpUG9kLy50ZXN0KG5hdi5wbGF0Zm9ybSkgfHwgbmF2LnBsYXRmb3JtID09PSAnTWFjSW50ZWwnICYmIG5hdi5tYXhUb3VjaFBvaW50cyA+IDEpICYmICF3aW5kb3cuTVNTdHJlYW07XG59O1xudmFyIGdldElQYWQxMyA9IGZ1bmN0aW9uIGdldElQYWQxMygpIHtcbiAgcmV0dXJuIGlzSU9TMTNDaGVjaygnaVBhZCcpO1xufTtcbnZhciBnZXRJcGhvbmUxMyA9IGZ1bmN0aW9uIGdldElwaG9uZTEzKCkge1xuICByZXR1cm4gaXNJT1MxM0NoZWNrKCdpUGhvbmUnKTtcbn07XG52YXIgZ2V0SVBvZDEzID0gZnVuY3Rpb24gZ2V0SVBvZDEzKCkge1xuICByZXR1cm4gaXNJT1MxM0NoZWNrKCdpUG9kJyk7XG59O1xudmFyIGdldFVzZXJhZ2VudCA9IGZ1bmN0aW9uIGdldFVzZXJhZ2VudCh1c2VyQWcpIHtcbiAgcmV0dXJuIHNldERlZmF1bHRzKHVzZXJBZyk7XG59O1xuXG5mdW5jdGlvbiBidWlsZFNlbGVjdG9yc09iamVjdChvcHRpb25zKSB7XG4gIHZhciBfcmVmID0gb3B0aW9ucyA/IG9wdGlvbnMgOiBVQUhlbHBlcixcbiAgICAgIGRldmljZSA9IF9yZWYuZGV2aWNlLFxuICAgICAgYnJvd3NlciA9IF9yZWYuYnJvd3NlcixcbiAgICAgIG9zID0gX3JlZi5vcyxcbiAgICAgIGVuZ2luZSA9IF9yZWYuZW5naW5lLFxuICAgICAgdWEgPSBfcmVmLnVhO1xuXG4gIHJldHVybiB7XG4gICAgaXNTbWFydFRWOiBpc1NtYXJ0VFZUeXBlKGRldmljZSksXG4gICAgaXNDb25zb2xlOiBpc0NvbnNvbGVUeXBlKGRldmljZSksXG4gICAgaXNXZWFyYWJsZTogaXNXZWFyYWJsZVR5cGUoZGV2aWNlKSxcbiAgICBpc0VtYmVkZGVkOiBpc0VtYmVkZGVkVHlwZShkZXZpY2UpLFxuICAgIGlzTW9iaWxlU2FmYXJpOiBpc01vYmlsZVNhZmFyaVR5cGUoYnJvd3NlcikgfHwgZ2V0SVBhZDEzKCksXG4gICAgaXNDaHJvbWl1bTogaXNDaHJvbWl1bVR5cGUoYnJvd3NlciksXG4gICAgaXNNb2JpbGU6IGlzTW9iaWxlQW5kVGFibGV0VHlwZShkZXZpY2UpIHx8IGdldElQYWQxMygpLFxuICAgIGlzTW9iaWxlT25seTogaXNNb2JpbGVUeXBlKGRldmljZSksXG4gICAgaXNUYWJsZXQ6IGlzVGFibGV0VHlwZShkZXZpY2UpIHx8IGdldElQYWQxMygpLFxuICAgIGlzQnJvd3NlcjogaXNCcm93c2VyVHlwZShkZXZpY2UpLFxuICAgIGlzRGVza3RvcDogaXNCcm93c2VyVHlwZShkZXZpY2UpLFxuICAgIGlzQW5kcm9pZDogaXNBbmRyb2lkVHlwZShvcyksXG4gICAgaXNXaW5QaG9uZTogaXNXaW5QaG9uZVR5cGUob3MpLFxuICAgIGlzSU9TOiBpc0lPU1R5cGUob3MpIHx8IGdldElQYWQxMygpLFxuICAgIGlzQ2hyb21lOiBpc0Nocm9tZVR5cGUoYnJvd3NlciksXG4gICAgaXNGaXJlZm94OiBpc0ZpcmVmb3hUeXBlKGJyb3dzZXIpLFxuICAgIGlzU2FmYXJpOiBpc1NhZmFyaVR5cGUoYnJvd3NlciksXG4gICAgaXNPcGVyYTogaXNPcGVyYVR5cGUoYnJvd3NlciksXG4gICAgaXNJRTogaXNJRVR5cGUoYnJvd3NlciksXG4gICAgb3NWZXJzaW9uOiBnZXRPc1ZlcnNpb24ob3MpLFxuICAgIG9zTmFtZTogZ2V0T3NOYW1lKG9zKSxcbiAgICBmdWxsQnJvd3NlclZlcnNpb246IGdldEJyb3dzZXJGdWxsVmVyc2lvbihicm93c2VyKSxcbiAgICBicm93c2VyVmVyc2lvbjogZ2V0QnJvd3NlclZlcnNpb24oYnJvd3NlciksXG4gICAgYnJvd3Nlck5hbWU6IGdldEJyb3dzZXJOYW1lKGJyb3dzZXIpLFxuICAgIG1vYmlsZVZlbmRvcjogZ2V0TW9iaWxlVmVuZG9yKGRldmljZSksXG4gICAgbW9iaWxlTW9kZWw6IGdldE1vYmlsZU1vZGVsKGRldmljZSksXG4gICAgZW5naW5lTmFtZTogZ2V0RW5naW5lTmFtZShlbmdpbmUpLFxuICAgIGVuZ2luZVZlcnNpb246IGdldEVuZ2luZVZlcnNpb24oZW5naW5lKSxcbiAgICBnZXRVQTogZ2V0VXNlcmFnZW50KHVhKSxcbiAgICBpc0VkZ2U6IGlzRWRnZVR5cGUoYnJvd3NlcikgfHwgaXNFZGdlQ2hyb21pdW1UeXBlKHVhKSxcbiAgICBpc1lhbmRleDogaXNZYW5kZXhUeXBlKGJyb3dzZXIpLFxuICAgIGRldmljZVR5cGU6IGdldERldmljZVR5cGUoZGV2aWNlKSxcbiAgICBpc0lPUzEzOiBnZXRJT1MxMygpLFxuICAgIGlzSVBhZDEzOiBnZXRJUGFkMTMoKSxcbiAgICBpc0lQaG9uZTEzOiBnZXRJcGhvbmUxMygpLFxuICAgIGlzSVBvZDEzOiBnZXRJUG9kMTMoKSxcbiAgICBpc0VsZWN0cm9uOiBpc0VsZWN0cm9uVHlwZSgpLFxuICAgIGlzRWRnZUNocm9taXVtOiBpc0VkZ2VDaHJvbWl1bVR5cGUodWEpLFxuICAgIGlzTGVnYWN5RWRnZTogaXNFZGdlVHlwZShicm93c2VyKSAmJiAhaXNFZGdlQ2hyb21pdW1UeXBlKHVhKSxcbiAgICBpc1dpbmRvd3M6IGlzV2luZG93c1R5cGUob3MpLFxuICAgIGlzTWFjT3M6IGlzTWFjT3NUeXBlKG9zKSxcbiAgICBpc01JVUk6IGlzTUlVSVR5cGUoYnJvd3NlciksXG4gICAgaXNTYW1zdW5nQnJvd3NlcjogaXNTYW1zdW5nQnJvd3NlclR5cGUoYnJvd3NlcilcbiAgfTtcbn1cblxudmFyIGlzU21hcnRUViA9IGlzU21hcnRUVlR5cGUoZGV2aWNlKTtcbnZhciBpc0NvbnNvbGUgPSBpc0NvbnNvbGVUeXBlKGRldmljZSk7XG52YXIgaXNXZWFyYWJsZSA9IGlzV2VhcmFibGVUeXBlKGRldmljZSk7XG52YXIgaXNFbWJlZGRlZCA9IGlzRW1iZWRkZWRUeXBlKGRldmljZSk7XG52YXIgaXNNb2JpbGVTYWZhcmkgPSBpc01vYmlsZVNhZmFyaVR5cGUoYnJvd3NlcikgfHwgZ2V0SVBhZDEzKCk7XG52YXIgaXNDaHJvbWl1bSA9IGlzQ2hyb21pdW1UeXBlKGJyb3dzZXIpO1xudmFyIGlzTW9iaWxlID0gaXNNb2JpbGVBbmRUYWJsZXRUeXBlKGRldmljZSkgfHwgZ2V0SVBhZDEzKCk7XG52YXIgaXNNb2JpbGVPbmx5ID0gaXNNb2JpbGVUeXBlKGRldmljZSk7XG52YXIgaXNUYWJsZXQgPSBpc1RhYmxldFR5cGUoZGV2aWNlKSB8fCBnZXRJUGFkMTMoKTtcbnZhciBpc0Jyb3dzZXIgPSBpc0Jyb3dzZXJUeXBlKGRldmljZSk7XG52YXIgaXNEZXNrdG9wID0gaXNCcm93c2VyVHlwZShkZXZpY2UpO1xudmFyIGlzQW5kcm9pZCA9IGlzQW5kcm9pZFR5cGUob3MpO1xudmFyIGlzV2luUGhvbmUgPSBpc1dpblBob25lVHlwZShvcyk7XG52YXIgaXNJT1MgPSBpc0lPU1R5cGUob3MpIHx8IGdldElQYWQxMygpO1xudmFyIGlzQ2hyb21lID0gaXNDaHJvbWVUeXBlKGJyb3dzZXIpO1xudmFyIGlzRmlyZWZveCA9IGlzRmlyZWZveFR5cGUoYnJvd3Nlcik7XG52YXIgaXNTYWZhcmkgPSBpc1NhZmFyaVR5cGUoYnJvd3Nlcik7XG52YXIgaXNPcGVyYSA9IGlzT3BlcmFUeXBlKGJyb3dzZXIpO1xudmFyIGlzSUUgPSBpc0lFVHlwZShicm93c2VyKTtcbnZhciBvc1ZlcnNpb24gPSBnZXRPc1ZlcnNpb24ob3MpO1xudmFyIG9zTmFtZSA9IGdldE9zTmFtZShvcyk7XG52YXIgZnVsbEJyb3dzZXJWZXJzaW9uID0gZ2V0QnJvd3NlckZ1bGxWZXJzaW9uKGJyb3dzZXIpO1xudmFyIGJyb3dzZXJWZXJzaW9uID0gZ2V0QnJvd3NlclZlcnNpb24oYnJvd3Nlcik7XG52YXIgYnJvd3Nlck5hbWUgPSBnZXRCcm93c2VyTmFtZShicm93c2VyKTtcbnZhciBtb2JpbGVWZW5kb3IgPSBnZXRNb2JpbGVWZW5kb3IoZGV2aWNlKTtcbnZhciBtb2JpbGVNb2RlbCA9IGdldE1vYmlsZU1vZGVsKGRldmljZSk7XG52YXIgZW5naW5lTmFtZSA9IGdldEVuZ2luZU5hbWUoZW5naW5lKTtcbnZhciBlbmdpbmVWZXJzaW9uID0gZ2V0RW5naW5lVmVyc2lvbihlbmdpbmUpO1xudmFyIGdldFVBID0gZ2V0VXNlcmFnZW50KHVhKTtcbnZhciBpc0VkZ2UgPSBpc0VkZ2VUeXBlKGJyb3dzZXIpIHx8IGlzRWRnZUNocm9taXVtVHlwZSh1YSk7XG52YXIgaXNZYW5kZXggPSBpc1lhbmRleFR5cGUoYnJvd3Nlcik7XG52YXIgZGV2aWNlVHlwZSA9IGdldERldmljZVR5cGUoZGV2aWNlKTtcbnZhciBpc0lPUzEzID0gZ2V0SU9TMTMoKTtcbnZhciBpc0lQYWQxMyA9IGdldElQYWQxMygpO1xudmFyIGlzSVBob25lMTMgPSBnZXRJcGhvbmUxMygpO1xudmFyIGlzSVBvZDEzID0gZ2V0SVBvZDEzKCk7XG52YXIgaXNFbGVjdHJvbiA9IGlzRWxlY3Ryb25UeXBlKCk7XG52YXIgaXNFZGdlQ2hyb21pdW0gPSBpc0VkZ2VDaHJvbWl1bVR5cGUodWEpO1xudmFyIGlzTGVnYWN5RWRnZSA9IGlzRWRnZVR5cGUoYnJvd3NlcikgJiYgIWlzRWRnZUNocm9taXVtVHlwZSh1YSk7XG52YXIgaXNXaW5kb3dzID0gaXNXaW5kb3dzVHlwZShvcyk7XG52YXIgaXNNYWNPcyA9IGlzTWFjT3NUeXBlKG9zKTtcbnZhciBpc01JVUkgPSBpc01JVUlUeXBlKGJyb3dzZXIpO1xudmFyIGlzU2Ftc3VuZ0Jyb3dzZXIgPSBpc1NhbXN1bmdCcm93c2VyVHlwZShicm93c2VyKTtcbnZhciBnZXRTZWxlY3RvcnNCeVVzZXJBZ2VudCA9IGZ1bmN0aW9uIGdldFNlbGVjdG9yc0J5VXNlckFnZW50KHVzZXJBZ2VudCkge1xuICBpZiAoIXVzZXJBZ2VudCB8fCB0eXBlb2YgdXNlckFnZW50ICE9PSAnc3RyaW5nJykge1xuICAgIGNvbnNvbGUuZXJyb3IoJ05vIHZhbGlkIHVzZXIgYWdlbnQgc3RyaW5nIHdhcyBwcm92aWRlZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBfVUFIZWxwZXIkcGFyc2VVc2VyQWcgPSBwYXJzZVVzZXJBZ2VudCh1c2VyQWdlbnQpLFxuICAgICAgZGV2aWNlID0gX1VBSGVscGVyJHBhcnNlVXNlckFnLmRldmljZSxcbiAgICAgIGJyb3dzZXIgPSBfVUFIZWxwZXIkcGFyc2VVc2VyQWcuYnJvd3NlcixcbiAgICAgIG9zID0gX1VBSGVscGVyJHBhcnNlVXNlckFnLm9zLFxuICAgICAgZW5naW5lID0gX1VBSGVscGVyJHBhcnNlVXNlckFnLmVuZ2luZSxcbiAgICAgIHVhID0gX1VBSGVscGVyJHBhcnNlVXNlckFnLnVhO1xuXG4gIHJldHVybiBidWlsZFNlbGVjdG9yc09iamVjdCh7XG4gICAgZGV2aWNlOiBkZXZpY2UsXG4gICAgYnJvd3NlcjogYnJvd3NlcixcbiAgICBvczogb3MsXG4gICAgZW5naW5lOiBlbmdpbmUsXG4gICAgdWE6IHVhXG4gIH0pO1xufTtcblxudmFyIEFuZHJvaWRWaWV3ID0gZnVuY3Rpb24gQW5kcm9pZFZpZXcoX3JlZikge1xuICB2YXIgcmVuZGVyV2l0aEZyYWdtZW50ID0gX3JlZi5yZW5kZXJXaXRoRnJhZ21lbnQsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJyZW5kZXJXaXRoRnJhZ21lbnRcIiwgXCJjaGlsZHJlblwiXSk7XG5cbiAgcmV0dXJuIGlzQW5kcm9pZCA/IHJlbmRlcldpdGhGcmFnbWVudCA/IFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGNoaWxkcmVuKSA6IFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgcHJvcHMsIGNoaWxkcmVuKSA6IG51bGw7XG59O1xudmFyIEJyb3dzZXJWaWV3ID0gZnVuY3Rpb24gQnJvd3NlclZpZXcoX3JlZjIpIHtcbiAgdmFyIHJlbmRlcldpdGhGcmFnbWVudCA9IF9yZWYyLnJlbmRlcldpdGhGcmFnbWVudCxcbiAgICAgIGNoaWxkcmVuID0gX3JlZjIuY2hpbGRyZW4sXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmMiwgW1wicmVuZGVyV2l0aEZyYWdtZW50XCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gIHJldHVybiBpc0Jyb3dzZXIgPyByZW5kZXJXaXRoRnJhZ21lbnQgPyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBjaGlsZHJlbikgOiBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHByb3BzLCBjaGlsZHJlbikgOiBudWxsO1xufTtcbnZhciBJRVZpZXcgPSBmdW5jdGlvbiBJRVZpZXcoX3JlZjMpIHtcbiAgdmFyIHJlbmRlcldpdGhGcmFnbWVudCA9IF9yZWYzLnJlbmRlcldpdGhGcmFnbWVudCxcbiAgICAgIGNoaWxkcmVuID0gX3JlZjMuY2hpbGRyZW4sXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmMywgW1wicmVuZGVyV2l0aEZyYWdtZW50XCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gIHJldHVybiBpc0lFID8gcmVuZGVyV2l0aEZyYWdtZW50ID8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgY2hpbGRyZW4pIDogUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCBwcm9wcywgY2hpbGRyZW4pIDogbnVsbDtcbn07XG52YXIgSU9TVmlldyA9IGZ1bmN0aW9uIElPU1ZpZXcoX3JlZjQpIHtcbiAgdmFyIHJlbmRlcldpdGhGcmFnbWVudCA9IF9yZWY0LnJlbmRlcldpdGhGcmFnbWVudCxcbiAgICAgIGNoaWxkcmVuID0gX3JlZjQuY2hpbGRyZW4sXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmNCwgW1wicmVuZGVyV2l0aEZyYWdtZW50XCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gIHJldHVybiBpc0lPUyA/IHJlbmRlcldpdGhGcmFnbWVudCA/IFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGNoaWxkcmVuKSA6IFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgcHJvcHMsIGNoaWxkcmVuKSA6IG51bGw7XG59O1xudmFyIE1vYmlsZVZpZXcgPSBmdW5jdGlvbiBNb2JpbGVWaWV3KF9yZWY1KSB7XG4gIHZhciByZW5kZXJXaXRoRnJhZ21lbnQgPSBfcmVmNS5yZW5kZXJXaXRoRnJhZ21lbnQsXG4gICAgICBjaGlsZHJlbiA9IF9yZWY1LmNoaWxkcmVuLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjUsIFtcInJlbmRlcldpdGhGcmFnbWVudFwiLCBcImNoaWxkcmVuXCJdKTtcblxuICByZXR1cm4gaXNNb2JpbGUgPyByZW5kZXJXaXRoRnJhZ21lbnQgPyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBjaGlsZHJlbikgOiBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHByb3BzLCBjaGlsZHJlbikgOiBudWxsO1xufTtcbnZhciBUYWJsZXRWaWV3ID0gZnVuY3Rpb24gVGFibGV0VmlldyhfcmVmNikge1xuICB2YXIgcmVuZGVyV2l0aEZyYWdtZW50ID0gX3JlZjYucmVuZGVyV2l0aEZyYWdtZW50LFxuICAgICAgY2hpbGRyZW4gPSBfcmVmNi5jaGlsZHJlbixcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWY2LCBbXCJyZW5kZXJXaXRoRnJhZ21lbnRcIiwgXCJjaGlsZHJlblwiXSk7XG5cbiAgcmV0dXJuIGlzVGFibGV0ID8gcmVuZGVyV2l0aEZyYWdtZW50ID8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgY2hpbGRyZW4pIDogUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCBwcm9wcywgY2hpbGRyZW4pIDogbnVsbDtcbn07XG52YXIgV2luUGhvbmVWaWV3ID0gZnVuY3Rpb24gV2luUGhvbmVWaWV3KF9yZWY3KSB7XG4gIHZhciByZW5kZXJXaXRoRnJhZ21lbnQgPSBfcmVmNy5yZW5kZXJXaXRoRnJhZ21lbnQsXG4gICAgICBjaGlsZHJlbiA9IF9yZWY3LmNoaWxkcmVuLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjcsIFtcInJlbmRlcldpdGhGcmFnbWVudFwiLCBcImNoaWxkcmVuXCJdKTtcblxuICByZXR1cm4gaXNXaW5QaG9uZSA/IHJlbmRlcldpdGhGcmFnbWVudCA/IFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGNoaWxkcmVuKSA6IFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgcHJvcHMsIGNoaWxkcmVuKSA6IG51bGw7XG59O1xudmFyIE1vYmlsZU9ubHlWaWV3ID0gZnVuY3Rpb24gTW9iaWxlT25seVZpZXcoX3JlZjgpIHtcbiAgdmFyIHJlbmRlcldpdGhGcmFnbWVudCA9IF9yZWY4LnJlbmRlcldpdGhGcmFnbWVudCxcbiAgICAgIGNoaWxkcmVuID0gX3JlZjguY2hpbGRyZW4sXG4gICAgICB2aWV3Q2xhc3NOYW1lID0gX3JlZjgudmlld0NsYXNzTmFtZSxcbiAgICAgIHN0eWxlID0gX3JlZjguc3R5bGUsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmOCwgW1wicmVuZGVyV2l0aEZyYWdtZW50XCIsIFwiY2hpbGRyZW5cIiwgXCJ2aWV3Q2xhc3NOYW1lXCIsIFwic3R5bGVcIl0pO1xuXG4gIHJldHVybiBpc01vYmlsZU9ubHkgPyByZW5kZXJXaXRoRnJhZ21lbnQgPyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBjaGlsZHJlbikgOiBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHByb3BzLCBjaGlsZHJlbikgOiBudWxsO1xufTtcbnZhciBTbWFydFRWVmlldyA9IGZ1bmN0aW9uIFNtYXJ0VFZWaWV3KF9yZWY5KSB7XG4gIHZhciByZW5kZXJXaXRoRnJhZ21lbnQgPSBfcmVmOS5yZW5kZXJXaXRoRnJhZ21lbnQsXG4gICAgICBjaGlsZHJlbiA9IF9yZWY5LmNoaWxkcmVuLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjksIFtcInJlbmRlcldpdGhGcmFnbWVudFwiLCBcImNoaWxkcmVuXCJdKTtcblxuICByZXR1cm4gaXNTbWFydFRWID8gcmVuZGVyV2l0aEZyYWdtZW50ID8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgY2hpbGRyZW4pIDogUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCBwcm9wcywgY2hpbGRyZW4pIDogbnVsbDtcbn07XG52YXIgQ29uc29sZVZpZXcgPSBmdW5jdGlvbiBDb25zb2xlVmlldyhfcmVmMTApIHtcbiAgdmFyIHJlbmRlcldpdGhGcmFnbWVudCA9IF9yZWYxMC5yZW5kZXJXaXRoRnJhZ21lbnQsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYxMC5jaGlsZHJlbixcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYxMCwgW1wicmVuZGVyV2l0aEZyYWdtZW50XCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gIHJldHVybiBpc0NvbnNvbGUgPyByZW5kZXJXaXRoRnJhZ21lbnQgPyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBjaGlsZHJlbikgOiBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHByb3BzLCBjaGlsZHJlbikgOiBudWxsO1xufTtcbnZhciBXZWFyYWJsZVZpZXcgPSBmdW5jdGlvbiBXZWFyYWJsZVZpZXcoX3JlZjExKSB7XG4gIHZhciByZW5kZXJXaXRoRnJhZ21lbnQgPSBfcmVmMTEucmVuZGVyV2l0aEZyYWdtZW50LFxuICAgICAgY2hpbGRyZW4gPSBfcmVmMTEuY2hpbGRyZW4sXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmMTEsIFtcInJlbmRlcldpdGhGcmFnbWVudFwiLCBcImNoaWxkcmVuXCJdKTtcblxuICByZXR1cm4gaXNXZWFyYWJsZSA/IHJlbmRlcldpdGhGcmFnbWVudCA/IFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGNoaWxkcmVuKSA6IFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgcHJvcHMsIGNoaWxkcmVuKSA6IG51bGw7XG59O1xudmFyIEN1c3RvbVZpZXcgPSBmdW5jdGlvbiBDdXN0b21WaWV3KF9yZWYxMikge1xuICB2YXIgcmVuZGVyV2l0aEZyYWdtZW50ID0gX3JlZjEyLnJlbmRlcldpdGhGcmFnbWVudCxcbiAgICAgIGNoaWxkcmVuID0gX3JlZjEyLmNoaWxkcmVuLFxuICAgICAgdmlld0NsYXNzTmFtZSA9IF9yZWYxMi52aWV3Q2xhc3NOYW1lLFxuICAgICAgc3R5bGUgPSBfcmVmMTIuc3R5bGUsXG4gICAgICBjb25kaXRpb24gPSBfcmVmMTIuY29uZGl0aW9uLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjEyLCBbXCJyZW5kZXJXaXRoRnJhZ21lbnRcIiwgXCJjaGlsZHJlblwiLCBcInZpZXdDbGFzc05hbWVcIiwgXCJzdHlsZVwiLCBcImNvbmRpdGlvblwiXSk7XG5cbiAgcmV0dXJuIGNvbmRpdGlvbiA/IHJlbmRlcldpdGhGcmFnbWVudCA/IFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGNoaWxkcmVuKSA6IFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgcHJvcHMsIGNoaWxkcmVuKSA6IG51bGw7XG59O1xuXG5mdW5jdGlvbiB3aXRoT3JpZW50YXRpb25DaGFuZ2UoV3JhcHBlZENvbXBvbmVudCkge1xuICByZXR1cm4gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKF9jbGFzcywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBfY2xhc3MocHJvcHMpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9jbGFzcyk7XG5cbiAgICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKF9jbGFzcykuY2FsbCh0aGlzLCBwcm9wcykpO1xuICAgICAgX3RoaXMuaXNFdmVudExpc3RlbmVyQWRkZWQgPSBmYWxzZTtcbiAgICAgIF90aGlzLmhhbmRsZU9yaWVudGF0aW9uQ2hhbmdlID0gX3RoaXMuaGFuZGxlT3JpZW50YXRpb25DaGFuZ2UuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgICBfdGhpcy5vbk9yaWVudGF0aW9uQ2hhbmdlID0gX3RoaXMub25PcmllbnRhdGlvbkNoYW5nZS5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICAgIF90aGlzLm9uUGFnZUxvYWQgPSBfdGhpcy5vblBhZ2VMb2FkLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgIGlzTGFuZHNjYXBlOiBmYWxzZSxcbiAgICAgICAgaXNQb3J0cmFpdDogZmFsc2VcbiAgICAgIH07XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKF9jbGFzcywgW3tcbiAgICAgIGtleTogXCJoYW5kbGVPcmllbnRhdGlvbkNoYW5nZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZU9yaWVudGF0aW9uQ2hhbmdlKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNFdmVudExpc3RlbmVyQWRkZWQpIHtcbiAgICAgICAgICB0aGlzLmlzRXZlbnRMaXN0ZW5lckFkZGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcmllbnRhdGlvbiA9IHdpbmRvdy5pbm5lcldpZHRoID4gd2luZG93LmlubmVySGVpZ2h0ID8gOTAgOiAwO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBpc1BvcnRyYWl0OiBvcmllbnRhdGlvbiA9PT0gMCxcbiAgICAgICAgICBpc0xhbmRzY2FwZTogb3JpZW50YXRpb24gPT09IDkwXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJvbk9yaWVudGF0aW9uQ2hhbmdlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gb25PcmllbnRhdGlvbkNoYW5nZSgpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVPcmllbnRhdGlvbkNoYW5nZSgpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJvblBhZ2VMb2FkXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gb25QYWdlTG9hZCgpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVPcmllbnRhdGlvbkNoYW5nZSgpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBpZiAoKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih3aW5kb3cpKSAhPT0gdW5kZWZpbmVkICYmIGlzTW9iaWxlKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLmlzRXZlbnRMaXN0ZW5lckFkZGVkKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZU9yaWVudGF0aW9uQ2hhbmdlKCk7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgdGhpcy5vblBhZ2VMb2FkLCBmYWxzZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLCB0aGlzLm9uUGFnZUxvYWQsIGZhbHNlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLm9uT3JpZW50YXRpb25DaGFuZ2UsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLm9uT3JpZW50YXRpb25DaGFuZ2UsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywge1xuICAgICAgICAgIGlzTGFuZHNjYXBlOiB0aGlzLnN0YXRlLmlzTGFuZHNjYXBlLFxuICAgICAgICAgIGlzUG9ydHJhaXQ6IHRoaXMuc3RhdGUuaXNQb3J0cmFpdFxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIF9jbGFzcztcbiAgfShSZWFjdF9fZGVmYXVsdC5Db21wb25lbnQpO1xufVxuXG5mdW5jdGlvbiB1c2VNb2JpbGVPcmllbnRhdGlvbigpIHtcbiAgdmFyIF91c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3JpZW50YXRpb24gPSB3aW5kb3cuaW5uZXJXaWR0aCA+IHdpbmRvdy5pbm5lckhlaWdodCA/IDkwIDogMDtcbiAgICByZXR1cm4ge1xuICAgICAgaXNQb3J0cmFpdDogb3JpZW50YXRpb24gPT09IDAsXG4gICAgICBpc0xhbmRzY2FwZTogb3JpZW50YXRpb24gPT09IDkwLFxuICAgICAgb3JpZW50YXRpb246IG9yaWVudGF0aW9uID09PSAwID8gJ3BvcnRyYWl0JyA6ICdsYW5kc2NhcGUnXG4gICAgfTtcbiAgfSksXG4gICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSxcbiAgICAgIHN0YXRlID0gX3VzZVN0YXRlMlswXSxcbiAgICAgIHNldFN0YXRlID0gX3VzZVN0YXRlMlsxXTtcblxuICB2YXIgaGFuZGxlT3JpZW50YXRpb25DaGFuZ2UgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9yaWVudGF0aW9uID0gd2luZG93LmlubmVyV2lkdGggPiB3aW5kb3cuaW5uZXJIZWlnaHQgPyA5MCA6IDA7XG4gICAgdmFyIG5leHQgPSB7XG4gICAgICBpc1BvcnRyYWl0OiBvcmllbnRhdGlvbiA9PT0gMCxcbiAgICAgIGlzTGFuZHNjYXBlOiBvcmllbnRhdGlvbiA9PT0gOTAsXG4gICAgICBvcmllbnRhdGlvbjogb3JpZW50YXRpb24gPT09IDAgPyAncG9ydHJhaXQnIDogJ2xhbmRzY2FwZSdcbiAgICB9O1xuICAgIHN0YXRlLm9yaWVudGF0aW9uICE9PSBuZXh0Lm9yaWVudGF0aW9uICYmIHNldFN0YXRlKG5leHQpO1xuICB9LCBbc3RhdGUub3JpZW50YXRpb25dKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih3aW5kb3cpKSAhPT0gdW5kZWZpbmVkICYmIGlzTW9iaWxlKSB7XG4gICAgICBoYW5kbGVPcmllbnRhdGlvbkNoYW5nZSgpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGhhbmRsZU9yaWVudGF0aW9uQ2hhbmdlLCBmYWxzZSk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBoYW5kbGVPcmllbnRhdGlvbkNoYW5nZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBoYW5kbGVPcmllbnRhdGlvbkNoYW5nZSwgZmFsc2UpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGhhbmRsZU9yaWVudGF0aW9uQ2hhbmdlLCBmYWxzZSk7XG4gICAgfTtcbiAgfSwgW2hhbmRsZU9yaWVudGF0aW9uQ2hhbmdlXSk7XG4gIHJldHVybiBzdGF0ZTtcbn1cblxuZnVuY3Rpb24gdXNlRGV2aWNlRGF0YSh1c2VyQWdlbnQpIHtcbiAgdmFyIGhvb2tVc2VyQWdlbnQgPSB1c2VyQWdlbnQgPyB1c2VyQWdlbnQgOiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgcmV0dXJuIHBhcnNlVXNlckFnZW50KGhvb2tVc2VyQWdlbnQpO1xufVxuXG5mdW5jdGlvbiB1c2VEZXZpY2VTZWxlY3RvcnModXNlckFnZW50KSB7XG4gIHZhciBob29rVXNlckFnZW50ID0gdXNlckFnZW50ID8gdXNlckFnZW50IDogd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIHZhciBkZXZpY2VEYXRhID0gdXNlRGV2aWNlRGF0YShob29rVXNlckFnZW50KTtcbiAgdmFyIHNlbGVjdG9ycyA9IGJ1aWxkU2VsZWN0b3JzT2JqZWN0KGRldmljZURhdGEpO1xuICByZXR1cm4gW3NlbGVjdG9ycywgZGV2aWNlRGF0YV07XG59XG5cbmV4cG9ydHMuQW5kcm9pZFZpZXcgPSBBbmRyb2lkVmlldztcbmV4cG9ydHMuQnJvd3NlclR5cGVzID0gQnJvd3NlclR5cGVzO1xuZXhwb3J0cy5Ccm93c2VyVmlldyA9IEJyb3dzZXJWaWV3O1xuZXhwb3J0cy5Db25zb2xlVmlldyA9IENvbnNvbGVWaWV3O1xuZXhwb3J0cy5DdXN0b21WaWV3ID0gQ3VzdG9tVmlldztcbmV4cG9ydHMuSUVWaWV3ID0gSUVWaWV3O1xuZXhwb3J0cy5JT1NWaWV3ID0gSU9TVmlldztcbmV4cG9ydHMuTW9iaWxlT25seVZpZXcgPSBNb2JpbGVPbmx5VmlldztcbmV4cG9ydHMuTW9iaWxlVmlldyA9IE1vYmlsZVZpZXc7XG5leHBvcnRzLk9zVHlwZXMgPSBPc1R5cGVzO1xuZXhwb3J0cy5TbWFydFRWVmlldyA9IFNtYXJ0VFZWaWV3O1xuZXhwb3J0cy5UYWJsZXRWaWV3ID0gVGFibGV0VmlldztcbmV4cG9ydHMuV2VhcmFibGVWaWV3ID0gV2VhcmFibGVWaWV3O1xuZXhwb3J0cy5XaW5QaG9uZVZpZXcgPSBXaW5QaG9uZVZpZXc7XG5leHBvcnRzLmJyb3dzZXJOYW1lID0gYnJvd3Nlck5hbWU7XG5leHBvcnRzLmJyb3dzZXJWZXJzaW9uID0gYnJvd3NlclZlcnNpb247XG5leHBvcnRzLmRldmljZURldGVjdCA9IGRldmljZURldGVjdDtcbmV4cG9ydHMuZGV2aWNlVHlwZSA9IGRldmljZVR5cGU7XG5leHBvcnRzLmVuZ2luZU5hbWUgPSBlbmdpbmVOYW1lO1xuZXhwb3J0cy5lbmdpbmVWZXJzaW9uID0gZW5naW5lVmVyc2lvbjtcbmV4cG9ydHMuZnVsbEJyb3dzZXJWZXJzaW9uID0gZnVsbEJyb3dzZXJWZXJzaW9uO1xuZXhwb3J0cy5nZXRTZWxlY3RvcnNCeVVzZXJBZ2VudCA9IGdldFNlbGVjdG9yc0J5VXNlckFnZW50O1xuZXhwb3J0cy5nZXRVQSA9IGdldFVBO1xuZXhwb3J0cy5pc0FuZHJvaWQgPSBpc0FuZHJvaWQ7XG5leHBvcnRzLmlzQnJvd3NlciA9IGlzQnJvd3NlcjtcbmV4cG9ydHMuaXNDaHJvbWUgPSBpc0Nocm9tZTtcbmV4cG9ydHMuaXNDaHJvbWl1bSA9IGlzQ2hyb21pdW07XG5leHBvcnRzLmlzQ29uc29sZSA9IGlzQ29uc29sZTtcbmV4cG9ydHMuaXNEZXNrdG9wID0gaXNEZXNrdG9wO1xuZXhwb3J0cy5pc0VkZ2UgPSBpc0VkZ2U7XG5leHBvcnRzLmlzRWRnZUNocm9taXVtID0gaXNFZGdlQ2hyb21pdW07XG5leHBvcnRzLmlzRWxlY3Ryb24gPSBpc0VsZWN0cm9uO1xuZXhwb3J0cy5pc0VtYmVkZGVkID0gaXNFbWJlZGRlZDtcbmV4cG9ydHMuaXNGaXJlZm94ID0gaXNGaXJlZm94O1xuZXhwb3J0cy5pc0lFID0gaXNJRTtcbmV4cG9ydHMuaXNJT1MgPSBpc0lPUztcbmV4cG9ydHMuaXNJT1MxMyA9IGlzSU9TMTM7XG5leHBvcnRzLmlzSVBhZDEzID0gaXNJUGFkMTM7XG5leHBvcnRzLmlzSVBob25lMTMgPSBpc0lQaG9uZTEzO1xuZXhwb3J0cy5pc0lQb2QxMyA9IGlzSVBvZDEzO1xuZXhwb3J0cy5pc0xlZ2FjeUVkZ2UgPSBpc0xlZ2FjeUVkZ2U7XG5leHBvcnRzLmlzTUlVSSA9IGlzTUlVSTtcbmV4cG9ydHMuaXNNYWNPcyA9IGlzTWFjT3M7XG5leHBvcnRzLmlzTW9iaWxlID0gaXNNb2JpbGU7XG5leHBvcnRzLmlzTW9iaWxlT25seSA9IGlzTW9iaWxlT25seTtcbmV4cG9ydHMuaXNNb2JpbGVTYWZhcmkgPSBpc01vYmlsZVNhZmFyaTtcbmV4cG9ydHMuaXNPcGVyYSA9IGlzT3BlcmE7XG5leHBvcnRzLmlzU2FmYXJpID0gaXNTYWZhcmk7XG5leHBvcnRzLmlzU2Ftc3VuZ0Jyb3dzZXIgPSBpc1NhbXN1bmdCcm93c2VyO1xuZXhwb3J0cy5pc1NtYXJ0VFYgPSBpc1NtYXJ0VFY7XG5leHBvcnRzLmlzVGFibGV0ID0gaXNUYWJsZXQ7XG5leHBvcnRzLmlzV2VhcmFibGUgPSBpc1dlYXJhYmxlO1xuZXhwb3J0cy5pc1dpblBob25lID0gaXNXaW5QaG9uZTtcbmV4cG9ydHMuaXNXaW5kb3dzID0gaXNXaW5kb3dzO1xuZXhwb3J0cy5pc1lhbmRleCA9IGlzWWFuZGV4O1xuZXhwb3J0cy5tb2JpbGVNb2RlbCA9IG1vYmlsZU1vZGVsO1xuZXhwb3J0cy5tb2JpbGVWZW5kb3IgPSBtb2JpbGVWZW5kb3I7XG5leHBvcnRzLm9zTmFtZSA9IG9zTmFtZTtcbmV4cG9ydHMub3NWZXJzaW9uID0gb3NWZXJzaW9uO1xuZXhwb3J0cy5wYXJzZVVzZXJBZ2VudCA9IHBhcnNlVXNlckFnZW50O1xuZXhwb3J0cy5zZXRVc2VyQWdlbnQgPSBzZXRVc2VyQWdlbnQ7XG5leHBvcnRzLnVzZURldmljZURhdGEgPSB1c2VEZXZpY2VEYXRhO1xuZXhwb3J0cy51c2VEZXZpY2VTZWxlY3RvcnMgPSB1c2VEZXZpY2VTZWxlY3RvcnM7XG5leHBvcnRzLnVzZU1vYmlsZU9yaWVudGF0aW9uID0gdXNlTW9iaWxlT3JpZW50YXRpb247XG5leHBvcnRzLndpdGhPcmllbnRhdGlvbkNoYW5nZSA9IHdpdGhPcmllbnRhdGlvbkNoYW5nZTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9pbnRlcm9wRGVmYXVsdCIsImV4IiwiUmVhY3QiLCJyZXF1aXJlIiwiUmVhY3RfX2RlZmF1bHQiLCJVQVBhcnNlciIsIkNsaWVudFVBSW5zdGFuY2UiLCJicm93c2VyIiwiZ2V0QnJvd3NlciIsImNwdSIsImdldENQVSIsImRldmljZSIsImdldERldmljZSIsImVuZ2luZSIsImdldEVuZ2luZSIsIm9zIiwiZ2V0T1MiLCJ1YSIsImdldFVBIiwic2V0VWEiLCJ1c2VyQWdlbnRTdHJpbmciLCJzZXRVQSIsInBhcnNlVXNlckFnZW50IiwidXNlckFnZW50IiwiY29uc29sZSIsImVycm9yIiwiVXNlckFnZW50SW5zdGFuY2UiLCJVQSIsInNldFVzZXJBZ2VudCIsIlVBSGVscGVyIiwiZnJlZXplIiwib3duS2V5cyIsIm9iamVjdCIsImVudW1lcmFibGVPbmx5Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZDIiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiZm9yRWFjaCIsImtleSIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX3R5cGVvZiIsIm9iaiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9jcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9leHRlbmRzIiwiYXNzaWduIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiX3NldFByb3RvdHlwZU9mIiwiX2dldFByb3RvdHlwZU9mIiwibyIsInNldFByb3RvdHlwZU9mIiwiZ2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJwIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJpbmRleE9mIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwic291cmNlU3ltYm9sS2V5cyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX3NsaWNlZFRvQXJyYXkiLCJhcnIiLCJfYXJyYXlXaXRoSG9sZXMiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVSZXN0IiwiQXJyYXkiLCJpc0FycmF5IiwiX2kiLCJfYXJyIiwiX24iLCJfZCIsIl9zIiwiX2UiLCJuZXh0IiwiZG9uZSIsImVyciIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwibiIsInRvU3RyaW5nIiwic2xpY2UiLCJuYW1lIiwiZnJvbSIsInRlc3QiLCJsZW4iLCJhcnIyIiwiRGV2aWNlVHlwZXMiLCJNb2JpbGUiLCJUYWJsZXQiLCJTbWFydFR2IiwiQ29uc29sZSIsIldlYXJhYmxlIiwiRW1iZWRkZWQiLCJCcm93c2VyIiwidW5kZWZpbmVkIiwiQnJvd3NlclR5cGVzIiwiQ2hyb21lIiwiRmlyZWZveCIsIk9wZXJhIiwiWWFuZGV4IiwiU2FmYXJpIiwiSW50ZXJuZXRFeHBsb3JlciIsIkVkZ2UiLCJDaHJvbWl1bSIsIkllIiwiTW9iaWxlU2FmYXJpIiwiRWRnZUNocm9taXVtIiwiTUlVSSIsIlNhbXN1bmdCcm93c2VyIiwiT3NUeXBlcyIsIklPUyIsIkFuZHJvaWQiLCJXaW5kb3dzUGhvbmUiLCJXaW5kb3dzIiwiTUFDX09TIiwiSW5pdGlhbERldmljZVR5cGVzIiwiaXNNb2JpbGUiLCJpc1RhYmxldCIsImlzQnJvd3NlciIsImlzU21hcnRUViIsImlzQ29uc29sZSIsImlzV2VhcmFibGUiLCJjaGVja0RldmljZVR5cGUiLCJ0eXBlIiwiaXNFbWJlZGRlZCIsInNldERlZmF1bHRzIiwiZCIsImdldE5hdmlnYXRvckluc3RhbmNlIiwid2luZG93IiwibmF2aWdhdG9yIiwiaXNJT1MxM0NoZWNrIiwibmF2IiwicGxhdGZvcm0iLCJtYXhUb3VjaFBvaW50cyIsIk1TU3RyZWFtIiwiYnJvd3NlclBheWxvYWQiLCJicm93c2VyTWFqb3JWZXJzaW9uIiwibWFqb3IiLCJicm93c2VyRnVsbFZlcnNpb24iLCJ2ZXJzaW9uIiwiYnJvd3Nlck5hbWUiLCJlbmdpbmVOYW1lIiwiZW5naW5lVmVyc2lvbiIsIm9zTmFtZSIsIm9zVmVyc2lvbiIsIm1vYmlsZVBheWxvYWQiLCJ2ZW5kb3IiLCJtb2RlbCIsInNtYXJ0VHZQYXlsb2FkIiwiY29uc29sZVBheWxvYWQiLCJ3ZWFyYWJsZVBheWxvYWQiLCJlbWJlZGRlZFBheWxvYWQiLCJkZXZpY2VEZXRlY3QiLCJfcmVmIiwiaXNNb2JpbGVUeXBlIiwiaXNUYWJsZXRUeXBlIiwiX3JlZjIiLCJpc01vYmlsZUFuZFRhYmxldFR5cGUiLCJfcmVmMyIsImlzU21hcnRUVlR5cGUiLCJfcmVmNCIsImlzQnJvd3NlclR5cGUiLCJfcmVmNSIsImlzV2VhcmFibGVUeXBlIiwiX3JlZjYiLCJpc0NvbnNvbGVUeXBlIiwiX3JlZjciLCJpc0VtYmVkZGVkVHlwZSIsIl9yZWY4IiwiZ2V0TW9iaWxlVmVuZG9yIiwiX3JlZjkiLCJnZXRNb2JpbGVNb2RlbCIsIl9yZWYxMCIsImdldERldmljZVR5cGUiLCJfcmVmMTEiLCJpc0FuZHJvaWRUeXBlIiwiX3JlZjEyIiwiaXNXaW5kb3dzVHlwZSIsIl9yZWYxMyIsImlzTWFjT3NUeXBlIiwiX3JlZjE0IiwiaXNXaW5QaG9uZVR5cGUiLCJfcmVmMTUiLCJpc0lPU1R5cGUiLCJfcmVmMTYiLCJnZXRPc1ZlcnNpb24iLCJfcmVmMTciLCJnZXRPc05hbWUiLCJfcmVmMTgiLCJpc0Nocm9tZVR5cGUiLCJfcmVmMTkiLCJpc0ZpcmVmb3hUeXBlIiwiX3JlZjIwIiwiaXNDaHJvbWl1bVR5cGUiLCJfcmVmMjEiLCJpc0VkZ2VUeXBlIiwiX3JlZjIyIiwiaXNZYW5kZXhUeXBlIiwiX3JlZjIzIiwiaXNTYWZhcmlUeXBlIiwiX3JlZjI0IiwiaXNNb2JpbGVTYWZhcmlUeXBlIiwiX3JlZjI1IiwiaXNPcGVyYVR5cGUiLCJfcmVmMjYiLCJpc0lFVHlwZSIsIl9yZWYyNyIsImlzTUlVSVR5cGUiLCJfcmVmMjgiLCJpc1NhbXN1bmdCcm93c2VyVHlwZSIsIl9yZWYyOSIsImdldEJyb3dzZXJGdWxsVmVyc2lvbiIsIl9yZWYzMCIsImdldEJyb3dzZXJWZXJzaW9uIiwiX3JlZjMxIiwiZ2V0QnJvd3Nlck5hbWUiLCJfcmVmMzIiLCJnZXRFbmdpbmVOYW1lIiwiX3JlZjMzIiwiZ2V0RW5naW5lVmVyc2lvbiIsIl9yZWYzNCIsImlzRWxlY3Ryb25UeXBlIiwidG9Mb3dlckNhc2UiLCJpc0VkZ2VDaHJvbWl1bVR5cGUiLCJnZXRJT1MxMyIsImdldElQYWQxMyIsImdldElwaG9uZTEzIiwiZ2V0SVBvZDEzIiwiZ2V0VXNlcmFnZW50IiwidXNlckFnIiwiYnVpbGRTZWxlY3RvcnNPYmplY3QiLCJvcHRpb25zIiwiaXNNb2JpbGVTYWZhcmkiLCJpc0Nocm9taXVtIiwiaXNNb2JpbGVPbmx5IiwiaXNEZXNrdG9wIiwiaXNBbmRyb2lkIiwiaXNXaW5QaG9uZSIsImlzSU9TIiwiaXNDaHJvbWUiLCJpc0ZpcmVmb3giLCJpc1NhZmFyaSIsImlzT3BlcmEiLCJpc0lFIiwiZnVsbEJyb3dzZXJWZXJzaW9uIiwiYnJvd3NlclZlcnNpb24iLCJtb2JpbGVWZW5kb3IiLCJtb2JpbGVNb2RlbCIsImlzRWRnZSIsImlzWWFuZGV4IiwiZGV2aWNlVHlwZSIsImlzSU9TMTMiLCJpc0lQYWQxMyIsImlzSVBob25lMTMiLCJpc0lQb2QxMyIsImlzRWxlY3Ryb24iLCJpc0VkZ2VDaHJvbWl1bSIsImlzTGVnYWN5RWRnZSIsImlzV2luZG93cyIsImlzTWFjT3MiLCJpc01JVUkiLCJpc1NhbXN1bmdCcm93c2VyIiwiZ2V0U2VsZWN0b3JzQnlVc2VyQWdlbnQiLCJfVUFIZWxwZXIkcGFyc2VVc2VyQWciLCJBbmRyb2lkVmlldyIsInJlbmRlcldpdGhGcmFnbWVudCIsImNoaWxkcmVuIiwiY3JlYXRlRWxlbWVudCIsIkZyYWdtZW50IiwiQnJvd3NlclZpZXciLCJJRVZpZXciLCJJT1NWaWV3IiwiTW9iaWxlVmlldyIsIlRhYmxldFZpZXciLCJXaW5QaG9uZVZpZXciLCJNb2JpbGVPbmx5VmlldyIsInZpZXdDbGFzc05hbWUiLCJzdHlsZSIsIlNtYXJ0VFZWaWV3IiwiQ29uc29sZVZpZXciLCJXZWFyYWJsZVZpZXciLCJDdXN0b21WaWV3IiwiY29uZGl0aW9uIiwid2l0aE9yaWVudGF0aW9uQ2hhbmdlIiwiV3JhcHBlZENvbXBvbmVudCIsIl9SZWFjdCRDb21wb25lbnQiLCJfY2xhc3MiLCJfdGhpcyIsImlzRXZlbnRMaXN0ZW5lckFkZGVkIiwiaGFuZGxlT3JpZW50YXRpb25DaGFuZ2UiLCJiaW5kIiwib25PcmllbnRhdGlvbkNoYW5nZSIsIm9uUGFnZUxvYWQiLCJzdGF0ZSIsImlzTGFuZHNjYXBlIiwiaXNQb3J0cmFpdCIsIm9yaWVudGF0aW9uIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0Iiwic2V0U3RhdGUiLCJjb21wb25lbnREaWRNb3VudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZW5kZXIiLCJDb21wb25lbnQiLCJ1c2VNb2JpbGVPcmllbnRhdGlvbiIsIl91c2VTdGF0ZSIsInVzZVN0YXRlIiwiX3VzZVN0YXRlMiIsInVzZUNhbGxiYWNrIiwidXNlRWZmZWN0IiwidXNlRGV2aWNlRGF0YSIsImhvb2tVc2VyQWdlbnQiLCJ1c2VEZXZpY2VTZWxlY3RvcnMiLCJkZXZpY2VEYXRhIiwic2VsZWN0b3JzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-device-detect/dist/lib.js\n");

/***/ })

};
;