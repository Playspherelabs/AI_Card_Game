"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/node-fetch-native";
exports.ids = ["vendor-chunks/node-fetch-native"];
exports.modules = {

/***/ "(ssr)/./node_modules/node-fetch-native/dist/chunks/multipart-parser.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/node-fetch-native/dist/chunks/multipart-parser.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toFormData: () => (/* binding */ Z)\n/* harmony export */ });\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:fs */ \"node:fs\");\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:path */ \"node:path\");\n/* harmony import */ var _node_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../node.mjs */ \"(ssr)/./node_modules/node-fetch-native/dist/node.mjs\");\n/* harmony import */ var node_http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:http */ \"node:http\");\n/* harmony import */ var node_https__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! node:https */ \"node:https\");\n/* harmony import */ var node_zlib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! node:zlib */ \"node:zlib\");\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var node_buffer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! node:buffer */ \"node:buffer\");\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! node:util */ \"node:util\");\n/* harmony import */ var _shared_node_fetch_native_1a4a356d_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../shared/node-fetch-native.1a4a356d.mjs */ \"(ssr)/./node_modules/node-fetch-native/dist/shared/node-fetch-native.1a4a356d.mjs\");\n/* harmony import */ var node_url__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! node:url */ \"node:url\");\n/* harmony import */ var node_net__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! node:net */ \"node:net\");\nvar B = Object.defineProperty;\nvar E = (u, a)=>B(u, \"name\", {\n        value: a,\n        configurable: !0\n    });\n\n\n\n\n\n\n\n\n\n\n\n\nlet D = 0;\nconst t = {\n    START_BOUNDARY: D++,\n    HEADER_FIELD_START: D++,\n    HEADER_FIELD: D++,\n    HEADER_VALUE_START: D++,\n    HEADER_VALUE: D++,\n    HEADER_VALUE_ALMOST_DONE: D++,\n    HEADERS_ALMOST_DONE: D++,\n    PART_DATA_START: D++,\n    PART_DATA: D++,\n    END: D++\n};\nlet w = 1;\nconst R = {\n    PART_BOUNDARY: w,\n    LAST_BOUNDARY: w *= 2\n}, g = 10, N = 13, x = 32, P = 45, C = 58, I = 97, M = 122, $ = E((u)=>u | 32, \"lower\"), m = E(()=>{}, \"noop\"), F = class F {\n    constructor(a){\n        this.index = 0, this.flags = 0, this.onHeaderEnd = m, this.onHeaderField = m, this.onHeadersEnd = m, this.onHeaderValue = m, this.onPartBegin = m, this.onPartData = m, this.onPartEnd = m, this.boundaryChars = {}, a = `\\r\n--` + a;\n        const n = new Uint8Array(a.length);\n        for(let r = 0; r < a.length; r++)n[r] = a.charCodeAt(r), this.boundaryChars[n[r]] = !0;\n        this.boundary = n, this.lookbehind = new Uint8Array(this.boundary.length + 8), this.state = t.START_BOUNDARY;\n    }\n    write(a) {\n        let n = 0;\n        const r = a.length;\n        let d = this.index, { lookbehind: l, boundary: c, boundaryChars: p, index: e, state: i, flags: A } = this;\n        const H = this.boundary.length, O = H - 1, y = a.length;\n        let o, L;\n        const f = E((h)=>{\n            this[h + \"Mark\"] = n;\n        }, \"mark\"), s = E((h)=>{\n            delete this[h + \"Mark\"];\n        }, \"clear\"), T = E((h, S, _, U)=>{\n            (S === void 0 || S !== _) && this[h](U && U.subarray(S, _));\n        }, \"callback\"), b = E((h, S)=>{\n            const _ = h + \"Mark\";\n            _ in this && (S ? (T(h, this[_], n, a), delete this[_]) : (T(h, this[_], a.length, a), this[_] = 0));\n        }, \"dataCallback\");\n        for(n = 0; n < r; n++)switch(o = a[n], i){\n            case t.START_BOUNDARY:\n                if (e === c.length - 2) {\n                    if (o === P) A |= R.LAST_BOUNDARY;\n                    else if (o !== N) return;\n                    e++;\n                    break;\n                } else if (e - 1 === c.length - 2) {\n                    if (A & R.LAST_BOUNDARY && o === P) i = t.END, A = 0;\n                    else if (!(A & R.LAST_BOUNDARY) && o === g) e = 0, T(\"onPartBegin\"), i = t.HEADER_FIELD_START;\n                    else return;\n                    break;\n                }\n                o !== c[e + 2] && (e = -2), o === c[e + 2] && e++;\n                break;\n            case t.HEADER_FIELD_START:\n                i = t.HEADER_FIELD, f(\"onHeaderField\"), e = 0;\n            case t.HEADER_FIELD:\n                if (o === N) {\n                    s(\"onHeaderField\"), i = t.HEADERS_ALMOST_DONE;\n                    break;\n                }\n                if (e++, o === P) break;\n                if (o === C) {\n                    if (e === 1) return;\n                    b(\"onHeaderField\", !0), i = t.HEADER_VALUE_START;\n                    break;\n                }\n                if (L = $(o), L < I || L > M) return;\n                break;\n            case t.HEADER_VALUE_START:\n                if (o === x) break;\n                f(\"onHeaderValue\"), i = t.HEADER_VALUE;\n            case t.HEADER_VALUE:\n                o === N && (b(\"onHeaderValue\", !0), T(\"onHeaderEnd\"), i = t.HEADER_VALUE_ALMOST_DONE);\n                break;\n            case t.HEADER_VALUE_ALMOST_DONE:\n                if (o !== g) return;\n                i = t.HEADER_FIELD_START;\n                break;\n            case t.HEADERS_ALMOST_DONE:\n                if (o !== g) return;\n                T(\"onHeadersEnd\"), i = t.PART_DATA_START;\n                break;\n            case t.PART_DATA_START:\n                i = t.PART_DATA, f(\"onPartData\");\n            case t.PART_DATA:\n                if (d = e, e === 0) {\n                    for(n += O; n < y && !(a[n] in p);)n += H;\n                    n -= O, o = a[n];\n                }\n                if (e < c.length) c[e] === o ? (e === 0 && b(\"onPartData\", !0), e++) : e = 0;\n                else if (e === c.length) e++, o === N ? A |= R.PART_BOUNDARY : o === P ? A |= R.LAST_BOUNDARY : e = 0;\n                else if (e - 1 === c.length) if (A & R.PART_BOUNDARY) {\n                    if (e = 0, o === g) {\n                        A &= ~R.PART_BOUNDARY, T(\"onPartEnd\"), T(\"onPartBegin\"), i = t.HEADER_FIELD_START;\n                        break;\n                    }\n                } else A & R.LAST_BOUNDARY && o === P ? (T(\"onPartEnd\"), i = t.END, A = 0) : e = 0;\n                if (e > 0) l[e - 1] = o;\n                else if (d > 0) {\n                    const h = new Uint8Array(l.buffer, l.byteOffset, l.byteLength);\n                    T(\"onPartData\", 0, d, h), d = 0, f(\"onPartData\"), n--;\n                }\n                break;\n            case t.END:\n                break;\n            default:\n                throw new Error(`Unexpected state entered: ${i}`);\n        }\n        b(\"onHeaderField\"), b(\"onHeaderValue\"), b(\"onPartData\"), this.index = e, this.state = i, this.flags = A;\n    }\n    end() {\n        if (this.state === t.HEADER_FIELD_START && this.index === 0 || this.state === t.PART_DATA && this.index === this.boundary.length) this.onPartEnd();\n        else if (this.state !== t.END) throw new Error(\"MultipartParser.end(): stream ended unexpectedly\");\n    }\n};\nE(F, \"MultipartParser\");\nlet k = F;\nfunction v(u) {\n    const a = u.match(/\\bfilename=(\"(.*?)\"|([^()<>@,;:\\\\\"/[\\]?={}\\s\\t]+))($|;\\s)/i);\n    if (!a) return;\n    const n = a[2] || a[3] || \"\";\n    let r = n.slice(n.lastIndexOf(\"\\\\\") + 1);\n    return r = r.replace(/%22/g, '\"'), r = r.replace(/&#(\\d{4});/g, (d, l)=>String.fromCharCode(l)), r;\n}\nE(v, \"_fileName\");\nasync function Z(u, a) {\n    if (!/multipart/i.test(a)) throw new TypeError(\"Failed to fetch\");\n    const n = a.match(/boundary=(?:\"([^\"]+)\"|([^;]+))/i);\n    if (!n) throw new TypeError(\"no or bad content-type header, no multipart boundary\");\n    const r = new k(n[1] || n[2]);\n    let d, l, c, p, e, i;\n    const A = [], H = new _node_mjs__WEBPACK_IMPORTED_MODULE_2__.FormData, O = E((s)=>{\n        c += f.decode(s, {\n            stream: !0\n        });\n    }, \"onPartData\"), y = E((s)=>{\n        A.push(s);\n    }, \"appendToFile\"), o = E(()=>{\n        const s = new _node_mjs__WEBPACK_IMPORTED_MODULE_2__.File(A, i, {\n            type: e\n        });\n        H.append(p, s);\n    }, \"appendFileToFormData\"), L = E(()=>{\n        H.append(p, c);\n    }, \"appendEntryToFormData\"), f = new TextDecoder(\"utf-8\");\n    f.decode(), r.onPartBegin = function() {\n        r.onPartData = O, r.onPartEnd = L, d = \"\", l = \"\", c = \"\", p = \"\", e = \"\", i = null, A.length = 0;\n    }, r.onHeaderField = function(s) {\n        d += f.decode(s, {\n            stream: !0\n        });\n    }, r.onHeaderValue = function(s) {\n        l += f.decode(s, {\n            stream: !0\n        });\n    }, r.onHeaderEnd = function() {\n        if (l += f.decode(), d = d.toLowerCase(), d === \"content-disposition\") {\n            const s = l.match(/\\bname=(\"([^\"]*)\"|([^()<>@,;:\\\\\"/[\\]?={}\\s\\t]+))/i);\n            s && (p = s[2] || s[3] || \"\"), i = v(l), i && (r.onPartData = y, r.onPartEnd = o);\n        } else d === \"content-type\" && (e = l);\n        l = \"\", d = \"\";\n    };\n    for await (const s of u)r.write(s);\n    return r.end(), H;\n}\nE(Z, \"toFormData\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-fetch-native/dist/chunks/multipart-parser.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-fetch-native/dist/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/node-fetch-native/dist/index.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortController: () => (/* binding */ A),\n/* harmony export */   AbortError: () => (/* reexport safe */ _node_mjs__WEBPACK_IMPORTED_MODULE_0__.AbortError),\n/* harmony export */   Blob: () => (/* binding */ T),\n/* harmony export */   FetchError: () => (/* reexport safe */ _node_mjs__WEBPACK_IMPORTED_MODULE_0__.FetchError),\n/* harmony export */   File: () => (/* binding */ R),\n/* harmony export */   FormData: () => (/* binding */ u),\n/* harmony export */   Headers: () => (/* binding */ d),\n/* harmony export */   Request: () => (/* binding */ $),\n/* harmony export */   Response: () => (/* binding */ C),\n/* harmony export */   blobFrom: () => (/* reexport safe */ _node_mjs__WEBPACK_IMPORTED_MODULE_0__.blobFrom),\n/* harmony export */   blobFromSync: () => (/* reexport safe */ _node_mjs__WEBPACK_IMPORTED_MODULE_0__.blobFromSync),\n/* harmony export */   \"default\": () => (/* binding */ s),\n/* harmony export */   fetch: () => (/* binding */ s),\n/* harmony export */   fileFrom: () => (/* reexport safe */ _node_mjs__WEBPACK_IMPORTED_MODULE_0__.fileFrom),\n/* harmony export */   fileFromSync: () => (/* reexport safe */ _node_mjs__WEBPACK_IMPORTED_MODULE_0__.fileFromSync),\n/* harmony export */   isRedirect: () => (/* reexport safe */ _node_mjs__WEBPACK_IMPORTED_MODULE_0__.isRedirect)\n/* harmony export */ });\n/* harmony import */ var _node_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node.mjs */ \"(ssr)/./node_modules/node-fetch-native/dist/node.mjs\");\n/* harmony import */ var node_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:http */ \"node:http\");\n/* harmony import */ var node_https__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:https */ \"node:https\");\n/* harmony import */ var node_zlib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:zlib */ \"node:zlib\");\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var node_buffer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! node:buffer */ \"node:buffer\");\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! node:util */ \"node:util\");\n/* harmony import */ var _shared_node_fetch_native_1a4a356d_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./shared/node-fetch-native.1a4a356d.mjs */ \"(ssr)/./node_modules/node-fetch-native/dist/shared/node-fetch-native.1a4a356d.mjs\");\n/* harmony import */ var node_url__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! node:url */ \"node:url\");\n/* harmony import */ var node_net__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! node:net */ \"node:net\");\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! node:fs */ \"node:fs\");\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! node:path */ \"node:path\");\nvar a = Object.defineProperty;\nvar t = (e, r)=>a(e, \"name\", {\n        value: r,\n        configurable: !0\n    });\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar f = Object.defineProperty, g = t((e, r)=>f(e, \"name\", {\n        value: r,\n        configurable: !0\n    }), \"e\");\nconst o = !!globalThis.process?.env?.FORCE_NODE_FETCH;\nfunction l() {\n    return !o && globalThis.fetch ? globalThis.fetch : _node_mjs__WEBPACK_IMPORTED_MODULE_0__.fetch;\n}\nt(l, \"p\"), g(l, \"_getFetch\");\nconst s = l(), T = !o && globalThis.Blob || _node_mjs__WEBPACK_IMPORTED_MODULE_0__.Blob, R = !o && globalThis.File || _node_mjs__WEBPACK_IMPORTED_MODULE_0__.File, u = !o && globalThis.FormData || _node_mjs__WEBPACK_IMPORTED_MODULE_0__.FormData, d = !o && globalThis.Headers || _node_mjs__WEBPACK_IMPORTED_MODULE_0__.Headers, $ = !o && globalThis.Request || _node_mjs__WEBPACK_IMPORTED_MODULE_0__.Request, C = !o && globalThis.Response || _node_mjs__WEBPACK_IMPORTED_MODULE_0__.Response, A = !o && globalThis.AbortController || _node_mjs__WEBPACK_IMPORTED_MODULE_0__.AbortController;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC1uYXRpdmUvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLElBQUVDLE9BQU9DLGNBQWM7QUFBQyxJQUFJQyxJQUFFLENBQUNDLEdBQUVDLElBQUlMLEVBQUVJLEdBQUUsUUFBTztRQUFDRSxPQUFNRDtRQUFFRSxjQUFhLENBQUM7SUFBQztBQUFxSTtBQUFxRztBQUFrQjtBQUFtQjtBQUFrQjtBQUFvQjtBQUFvQjtBQUFrQjtBQUFnRDtBQUFpQjtBQUFpQjtBQUFnQjtBQUFrQjtBQUFBLElBQUl3QixJQUFFOUIsT0FBT0MsY0FBYyxFQUFDOEIsSUFBRTdCLEVBQUUsQ0FBQ0MsR0FBRUMsSUFBSTBCLEVBQUUzQixHQUFFLFFBQU87UUFBQ0UsT0FBTUQ7UUFBRUUsY0FBYSxDQUFDO0lBQUMsSUFBRztBQUFLLE1BQU0wQixJQUFFLENBQUMsQ0FBQ0MsV0FBV0MsT0FBTyxFQUFFQyxLQUFLQztBQUFpQixTQUFTQztJQUFJLE9BQU0sQ0FBQ0wsS0FBR0MsV0FBV1osS0FBSyxHQUFDWSxXQUFXWixLQUFLLEdBQUNDLDRDQUFDQTtBQUFBO0FBQUNwQixFQUFFbUMsR0FBRSxNQUFLTixFQUFFTSxHQUFFO0FBQWEsTUFBTUMsSUFBRUQsS0FBSUUsSUFBRSxDQUFDUCxLQUFHQyxXQUFXMUIsSUFBSSxJQUFFQywyQ0FBQ0EsRUFBQ2dDLElBQUUsQ0FBQ1IsS0FBR0MsV0FBV3hCLElBQUksSUFBRUMsMkNBQUNBLEVBQUMrQixJQUFFLENBQUNULEtBQUdDLFdBQVd0QixRQUFRLElBQUVDLCtDQUFDQSxFQUFDOEIsSUFBRSxDQUFDVixLQUFHQyxXQUFXcEIsT0FBTyxJQUFFQyw4Q0FBQ0EsRUFBQzZCLElBQUUsQ0FBQ1gsS0FBR0MsV0FBV2xCLE9BQU8sSUFBRUMsOENBQUNBLEVBQUM0QixJQUFFLENBQUNaLEtBQUdDLFdBQVdoQixRQUFRLElBQUVDLCtDQUFDQSxFQUFDMkIsSUFBRSxDQUFDYixLQUFHQyxXQUFXZCxlQUFlLElBQUVDLHNEQUFDQTtBQUFnSSIsInNvdXJjZXMiOlsid2VicGFjazovL0Bwcml2eS1pby93YWdtaS1kZW1vLy4vbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gtbmF0aXZlL2Rpc3QvaW5kZXgubWpzPzA5OTYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGE9T2JqZWN0LmRlZmluZVByb3BlcnR5O3ZhciB0PShlLHIpPT5hKGUsXCJuYW1lXCIse3ZhbHVlOnIsY29uZmlndXJhYmxlOiEwfSk7aW1wb3J0e0Jsb2IgYXMgaSxGaWxlIGFzIGIsRm9ybURhdGEgYXMgbSxIZWFkZXJzIGFzIHAsUmVxdWVzdCBhcyBuLFJlc3BvbnNlIGFzIGMsQWJvcnRDb250cm9sbGVyIGFzIGgsZmV0Y2ggYXMgRn1mcm9tXCIuL25vZGUubWpzXCI7ZXhwb3J0e0Fib3J0RXJyb3IsRmV0Y2hFcnJvcixibG9iRnJvbSxibG9iRnJvbVN5bmMsZmlsZUZyb20sZmlsZUZyb21TeW5jLGlzUmVkaXJlY3R9ZnJvbVwiLi9ub2RlLm1qc1wiO2ltcG9ydFwibm9kZTpodHRwXCI7aW1wb3J0XCJub2RlOmh0dHBzXCI7aW1wb3J0XCJub2RlOnpsaWJcIjtpbXBvcnRcIm5vZGU6c3RyZWFtXCI7aW1wb3J0XCJub2RlOmJ1ZmZlclwiO2ltcG9ydFwibm9kZTp1dGlsXCI7aW1wb3J0XCIuL3NoYXJlZC9ub2RlLWZldGNoLW5hdGl2ZS4xYTRhMzU2ZC5tanNcIjtpbXBvcnRcIm5vZGU6dXJsXCI7aW1wb3J0XCJub2RlOm5ldFwiO2ltcG9ydFwibm9kZTpmc1wiO2ltcG9ydFwibm9kZTpwYXRoXCI7dmFyIGY9T2JqZWN0LmRlZmluZVByb3BlcnR5LGc9dCgoZSxyKT0+ZihlLFwibmFtZVwiLHt2YWx1ZTpyLGNvbmZpZ3VyYWJsZTohMH0pLFwiZVwiKTtjb25zdCBvPSEhZ2xvYmFsVGhpcy5wcm9jZXNzPy5lbnY/LkZPUkNFX05PREVfRkVUQ0g7ZnVuY3Rpb24gbCgpe3JldHVybiFvJiZnbG9iYWxUaGlzLmZldGNoP2dsb2JhbFRoaXMuZmV0Y2g6Rn10KGwsXCJwXCIpLGcobCxcIl9nZXRGZXRjaFwiKTtjb25zdCBzPWwoKSxUPSFvJiZnbG9iYWxUaGlzLkJsb2J8fGksUj0hbyYmZ2xvYmFsVGhpcy5GaWxlfHxiLHU9IW8mJmdsb2JhbFRoaXMuRm9ybURhdGF8fG0sZD0hbyYmZ2xvYmFsVGhpcy5IZWFkZXJzfHxwLCQ9IW8mJmdsb2JhbFRoaXMuUmVxdWVzdHx8bixDPSFvJiZnbG9iYWxUaGlzLlJlc3BvbnNlfHxjLEE9IW8mJmdsb2JhbFRoaXMuQWJvcnRDb250cm9sbGVyfHxoO2V4cG9ydHtBIGFzIEFib3J0Q29udHJvbGxlcixUIGFzIEJsb2IsUiBhcyBGaWxlLHUgYXMgRm9ybURhdGEsZCBhcyBIZWFkZXJzLCQgYXMgUmVxdWVzdCxDIGFzIFJlc3BvbnNlLHMgYXMgZGVmYXVsdCxzIGFzIGZldGNofTtcbiJdLCJuYW1lcyI6WyJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ0IiwiZSIsInIiLCJ2YWx1ZSIsImNvbmZpZ3VyYWJsZSIsIkJsb2IiLCJpIiwiRmlsZSIsImIiLCJGb3JtRGF0YSIsIm0iLCJIZWFkZXJzIiwicCIsIlJlcXVlc3QiLCJuIiwiUmVzcG9uc2UiLCJjIiwiQWJvcnRDb250cm9sbGVyIiwiaCIsImZldGNoIiwiRiIsIkFib3J0RXJyb3IiLCJGZXRjaEVycm9yIiwiYmxvYkZyb20iLCJibG9iRnJvbVN5bmMiLCJmaWxlRnJvbSIsImZpbGVGcm9tU3luYyIsImlzUmVkaXJlY3QiLCJmIiwiZyIsIm8iLCJnbG9iYWxUaGlzIiwicHJvY2VzcyIsImVudiIsIkZPUkNFX05PREVfRkVUQ0giLCJsIiwicyIsIlQiLCJSIiwidSIsImQiLCIkIiwiQyIsIkEiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-fetch-native/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-fetch-native/dist/node.mjs":
/*!******************************************************!*\
  !*** ./node_modules/node-fetch-native/dist/node.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortController: () => (/* binding */ Mn),\n/* harmony export */   AbortError: () => (/* binding */ _r),\n/* harmony export */   Blob: () => (/* binding */ ut),\n/* harmony export */   FetchError: () => (/* binding */ G),\n/* harmony export */   File: () => (/* binding */ On),\n/* harmony export */   FormData: () => (/* binding */ br),\n/* harmony export */   Headers: () => (/* binding */ ye),\n/* harmony export */   Request: () => (/* binding */ dt),\n/* harmony export */   Response: () => (/* binding */ le),\n/* harmony export */   blobFrom: () => (/* binding */ hl),\n/* harmony export */   blobFromSync: () => (/* binding */ dl),\n/* harmony export */   \"default\": () => (/* binding */ Fi),\n/* harmony export */   fetch: () => (/* binding */ Fi),\n/* harmony export */   fileFrom: () => (/* binding */ pl),\n/* harmony export */   fileFromSync: () => (/* binding */ bl),\n/* harmony export */   isRedirect: () => (/* binding */ Ln)\n/* harmony export */ });\n/* harmony import */ var node_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:http */ \"node:http\");\n/* harmony import */ var node_https__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:https */ \"node:https\");\n/* harmony import */ var node_zlib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:zlib */ \"node:zlib\");\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var node_buffer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! node:buffer */ \"node:buffer\");\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! node:util */ \"node:util\");\n/* harmony import */ var _shared_node_fetch_native_1a4a356d_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./shared/node-fetch-native.1a4a356d.mjs */ \"(ssr)/./node_modules/node-fetch-native/dist/shared/node-fetch-native.1a4a356d.mjs\");\n/* harmony import */ var node_url__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! node:url */ \"node:url\");\n/* harmony import */ var node_net__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! node:net */ \"node:net\");\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! node:fs */ \"node:fs\");\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! node:path */ \"node:path\");\nvar As = Object.defineProperty;\nvar n = (i1, o)=>As(i1, \"name\", {\n        value: o,\n        configurable: !0\n    });\nvar fi = (i1, o, a)=>{\n    if (!o.has(i1)) throw TypeError(\"Cannot \" + a);\n};\nvar O = (i1, o, a)=>(fi(i1, o, \"read from private field\"), a ? a.call(i1) : o.get(i1)), be = (i1, o, a)=>{\n    if (o.has(i1)) throw TypeError(\"Cannot add the same private member more than once\");\n    o instanceof WeakSet ? o.add(i1) : o.set(i1, a);\n}, X = (i1, o, a, u)=>(fi(i1, o, \"write to private field\"), u ? u.call(i1, a) : o.set(i1, a), a);\nvar ve, kt, bt, Cr, Ve, Wt, qt, Ot, ee, zt, Ne, He, It;\n\n\n\n\n\n\n\n\n\n\n\nfunction js(i1) {\n    if (!/^data:/i.test(i1)) throw new TypeError('`uri` does not appear to be a Data URI (must begin with \"data:\")');\n    i1 = i1.replace(/\\r?\\n/g, \"\");\n    const o = i1.indexOf(\",\");\n    if (o === -1 || o <= 4) throw new TypeError(\"malformed data: URI\");\n    const a = i1.substring(5, o).split(\";\");\n    let u = \"\", l = !1;\n    const p = a[0] || \"text/plain\";\n    let h = p;\n    for(let E = 1; E < a.length; E++)a[E] === \"base64\" ? l = !0 : a[E] && (h += `;${a[E]}`, a[E].indexOf(\"charset=\") === 0 && (u = a[E].substring(8)));\n    !a[0] && !u.length && (h += \";charset=US-ASCII\", u = \"US-ASCII\");\n    const g = l ? \"base64\" : \"ascii\", A = unescape(i1.substring(o + 1)), w = Buffer.from(A, g);\n    return w.type = p, w.typeFull = h, w.charset = u, w;\n}\nn(js, \"dataUriToBuffer\");\nvar pr = {\n    exports: {}\n}; /**\n * @license\n * web-streams-polyfill v3.3.3\n * Copyright 2024 Mattias Buelens, Diwank Singh Tomer and other contributors.\n * This code is released under the MIT license.\n * SPDX-License-Identifier: MIT\n */ \nvar di;\nfunction Ls() {\n    return di || (di = 1, function(i1, o) {\n        (function(a, u) {\n            u(o);\n        })(_shared_node_fetch_native_1a4a356d_mjs__WEBPACK_IMPORTED_MODULE_6__.c, function(a) {\n            function u() {}\n            n(u, \"noop\");\n            function l(e) {\n                return typeof e == \"object\" && e !== null || typeof e == \"function\";\n            }\n            n(l, \"typeIsObject\");\n            const p = u;\n            function h(e, t) {\n                try {\n                    Object.defineProperty(e, \"name\", {\n                        value: t,\n                        configurable: !0\n                    });\n                } catch  {}\n            }\n            n(h, \"setFunctionName\");\n            const g = Promise, A = Promise.prototype.then, w = Promise.reject.bind(g);\n            function E(e) {\n                return new g(e);\n            }\n            n(E, \"newPromise\");\n            function T(e) {\n                return E((t)=>t(e));\n            }\n            n(T, \"promiseResolvedWith\");\n            function b(e) {\n                return w(e);\n            }\n            n(b, \"promiseRejectedWith\");\n            function q(e, t, r) {\n                return A.call(e, t, r);\n            }\n            n(q, \"PerformPromiseThen\");\n            function _(e, t, r) {\n                q(q(e, t, r), void 0, p);\n            }\n            n(_, \"uponPromise\");\n            function V(e, t) {\n                _(e, t);\n            }\n            n(V, \"uponFulfillment\");\n            function I(e, t) {\n                _(e, void 0, t);\n            }\n            n(I, \"uponRejection\");\n            function F(e, t, r) {\n                return q(e, t, r);\n            }\n            n(F, \"transformPromiseWith\");\n            function Q(e) {\n                q(e, void 0, p);\n            }\n            n(Q, \"setPromiseIsHandledToTrue\");\n            let ge = n((e)=>{\n                if (typeof queueMicrotask == \"function\") ge = queueMicrotask;\n                else {\n                    const t = T(void 0);\n                    ge = n((r)=>q(t, r), \"_queueMicrotask\");\n                }\n                return ge(e);\n            }, \"_queueMicrotask\");\n            function z(e, t, r) {\n                if (typeof e != \"function\") throw new TypeError(\"Argument is not a function\");\n                return Function.prototype.apply.call(e, t, r);\n            }\n            n(z, \"reflectCall\");\n            function j(e, t, r) {\n                try {\n                    return T(z(e, t, r));\n                } catch (s) {\n                    return b(s);\n                }\n            }\n            n(j, \"promiseCall\");\n            const U = 16384, bn = class bn {\n                constructor(){\n                    this._cursor = 0, this._size = 0, this._front = {\n                        _elements: [],\n                        _next: void 0\n                    }, this._back = this._front, this._cursor = 0, this._size = 0;\n                }\n                get length() {\n                    return this._size;\n                }\n                push(t) {\n                    const r = this._back;\n                    let s = r;\n                    r._elements.length === U - 1 && (s = {\n                        _elements: [],\n                        _next: void 0\n                    }), r._elements.push(t), s !== r && (this._back = s, r._next = s), ++this._size;\n                }\n                shift() {\n                    const t = this._front;\n                    let r = t;\n                    const s = this._cursor;\n                    let f = s + 1;\n                    const c = t._elements, d = c[s];\n                    return f === U && (r = t._next, f = 0), --this._size, this._cursor = f, t !== r && (this._front = r), c[s] = void 0, d;\n                }\n                forEach(t) {\n                    let r = this._cursor, s = this._front, f = s._elements;\n                    for(; (r !== f.length || s._next !== void 0) && !(r === f.length && (s = s._next, f = s._elements, r = 0, f.length === 0));)t(f[r]), ++r;\n                }\n                peek() {\n                    const t = this._front, r = this._cursor;\n                    return t._elements[r];\n                }\n            };\n            n(bn, \"SimpleQueue\");\n            let D = bn;\n            const Ft = Symbol(\"[[AbortSteps]]\"), Qn = Symbol(\"[[ErrorSteps]]\"), Ar = Symbol(\"[[CancelSteps]]\"), Br = Symbol(\"[[PullSteps]]\"), kr = Symbol(\"[[ReleaseSteps]]\");\n            function Yn(e, t) {\n                e._ownerReadableStream = t, t._reader = e, t._state === \"readable\" ? qr(e) : t._state === \"closed\" ? Li(e) : Gn(e, t._storedError);\n            }\n            n(Yn, \"ReadableStreamReaderGenericInitialize\");\n            function Wr(e, t) {\n                const r = e._ownerReadableStream;\n                return ie(r, t);\n            }\n            n(Wr, \"ReadableStreamReaderGenericCancel\");\n            function _e(e) {\n                const t = e._ownerReadableStream;\n                t._state === \"readable\" ? Or(e, new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\")) : $i(e, new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\")), t._readableStreamController[kr](), t._reader = void 0, e._ownerReadableStream = void 0;\n            }\n            n(_e, \"ReadableStreamReaderGenericRelease\");\n            function jt(e) {\n                return new TypeError(\"Cannot \" + e + \" a stream using a released reader\");\n            }\n            n(jt, \"readerLockException\");\n            function qr(e) {\n                e._closedPromise = E((t, r)=>{\n                    e._closedPromise_resolve = t, e._closedPromise_reject = r;\n                });\n            }\n            n(qr, \"defaultReaderClosedPromiseInitialize\");\n            function Gn(e, t) {\n                qr(e), Or(e, t);\n            }\n            n(Gn, \"defaultReaderClosedPromiseInitializeAsRejected\");\n            function Li(e) {\n                qr(e), Zn(e);\n            }\n            n(Li, \"defaultReaderClosedPromiseInitializeAsResolved\");\n            function Or(e, t) {\n                e._closedPromise_reject !== void 0 && (Q(e._closedPromise), e._closedPromise_reject(t), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0);\n            }\n            n(Or, \"defaultReaderClosedPromiseReject\");\n            function $i(e, t) {\n                Gn(e, t);\n            }\n            n($i, \"defaultReaderClosedPromiseResetToRejected\");\n            function Zn(e) {\n                e._closedPromise_resolve !== void 0 && (e._closedPromise_resolve(void 0), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0);\n            }\n            n(Zn, \"defaultReaderClosedPromiseResolve\");\n            const Kn = Number.isFinite || function(e) {\n                return typeof e == \"number\" && isFinite(e);\n            }, Di = Math.trunc || function(e) {\n                return e < 0 ? Math.ceil(e) : Math.floor(e);\n            };\n            function Mi(e) {\n                return typeof e == \"object\" || typeof e == \"function\";\n            }\n            n(Mi, \"isDictionary\");\n            function ue(e, t) {\n                if (e !== void 0 && !Mi(e)) throw new TypeError(`${t} is not an object.`);\n            }\n            n(ue, \"assertDictionary\");\n            function Z(e, t) {\n                if (typeof e != \"function\") throw new TypeError(`${t} is not a function.`);\n            }\n            n(Z, \"assertFunction\");\n            function Ui(e) {\n                return typeof e == \"object\" && e !== null || typeof e == \"function\";\n            }\n            n(Ui, \"isObject\");\n            function Jn(e, t) {\n                if (!Ui(e)) throw new TypeError(`${t} is not an object.`);\n            }\n            n(Jn, \"assertObject\");\n            function Se(e, t, r) {\n                if (e === void 0) throw new TypeError(`Parameter ${t} is required in '${r}'.`);\n            }\n            n(Se, \"assertRequiredArgument\");\n            function zr(e, t, r) {\n                if (e === void 0) throw new TypeError(`${t} is required in '${r}'.`);\n            }\n            n(zr, \"assertRequiredField\");\n            function Ir(e) {\n                return Number(e);\n            }\n            n(Ir, \"convertUnrestrictedDouble\");\n            function Xn(e) {\n                return e === 0 ? 0 : e;\n            }\n            n(Xn, \"censorNegativeZero\");\n            function xi(e) {\n                return Xn(Di(e));\n            }\n            n(xi, \"integerPart\");\n            function Fr(e, t) {\n                const s = Number.MAX_SAFE_INTEGER;\n                let f = Number(e);\n                if (f = Xn(f), !Kn(f)) throw new TypeError(`${t} is not a finite number`);\n                if (f = xi(f), f < 0 || f > s) throw new TypeError(`${t} is outside the accepted range of 0 to ${s}, inclusive`);\n                return !Kn(f) || f === 0 ? 0 : f;\n            }\n            n(Fr, \"convertUnsignedLongLongWithEnforceRange\");\n            function jr(e, t) {\n                if (!We(e)) throw new TypeError(`${t} is not a ReadableStream.`);\n            }\n            n(jr, \"assertReadableStream\");\n            function Qe(e) {\n                return new fe(e);\n            }\n            n(Qe, \"AcquireReadableStreamDefaultReader\");\n            function eo(e, t) {\n                e._reader._readRequests.push(t);\n            }\n            n(eo, \"ReadableStreamAddReadRequest\");\n            function Lr(e, t, r) {\n                const f = e._reader._readRequests.shift();\n                r ? f._closeSteps() : f._chunkSteps(t);\n            }\n            n(Lr, \"ReadableStreamFulfillReadRequest\");\n            function Lt(e) {\n                return e._reader._readRequests.length;\n            }\n            n(Lt, \"ReadableStreamGetNumReadRequests\");\n            function to(e) {\n                const t = e._reader;\n                return !(t === void 0 || !Ee(t));\n            }\n            n(to, \"ReadableStreamHasDefaultReader\");\n            const mn = class mn {\n                constructor(t){\n                    if (Se(t, 1, \"ReadableStreamDefaultReader\"), jr(t, \"First parameter\"), qe(t)) throw new TypeError(\"This stream has already been locked for exclusive reading by another reader\");\n                    Yn(this, t), this._readRequests = new D;\n                }\n                get closed() {\n                    return Ee(this) ? this._closedPromise : b($t(\"closed\"));\n                }\n                cancel(t = void 0) {\n                    return Ee(this) ? this._ownerReadableStream === void 0 ? b(jt(\"cancel\")) : Wr(this, t) : b($t(\"cancel\"));\n                }\n                read() {\n                    if (!Ee(this)) return b($t(\"read\"));\n                    if (this._ownerReadableStream === void 0) return b(jt(\"read from\"));\n                    let t, r;\n                    const s = E((c, d)=>{\n                        t = c, r = d;\n                    });\n                    return mt(this, {\n                        _chunkSteps: (c)=>t({\n                                value: c,\n                                done: !1\n                            }),\n                        _closeSteps: ()=>t({\n                                value: void 0,\n                                done: !0\n                            }),\n                        _errorSteps: (c)=>r(c)\n                    }), s;\n                }\n                releaseLock() {\n                    if (!Ee(this)) throw $t(\"releaseLock\");\n                    this._ownerReadableStream !== void 0 && Ni(this);\n                }\n            };\n            n(mn, \"ReadableStreamDefaultReader\");\n            let fe = mn;\n            Object.defineProperties(fe.prototype, {\n                cancel: {\n                    enumerable: !0\n                },\n                read: {\n                    enumerable: !0\n                },\n                releaseLock: {\n                    enumerable: !0\n                },\n                closed: {\n                    enumerable: !0\n                }\n            }), h(fe.prototype.cancel, \"cancel\"), h(fe.prototype.read, \"read\"), h(fe.prototype.releaseLock, \"releaseLock\"), typeof Symbol.toStringTag == \"symbol\" && Object.defineProperty(fe.prototype, Symbol.toStringTag, {\n                value: \"ReadableStreamDefaultReader\",\n                configurable: !0\n            });\n            function Ee(e) {\n                return !l(e) || !Object.prototype.hasOwnProperty.call(e, \"_readRequests\") ? !1 : e instanceof fe;\n            }\n            n(Ee, \"IsReadableStreamDefaultReader\");\n            function mt(e, t) {\n                const r = e._ownerReadableStream;\n                r._disturbed = !0, r._state === \"closed\" ? t._closeSteps() : r._state === \"errored\" ? t._errorSteps(r._storedError) : r._readableStreamController[Br](t);\n            }\n            n(mt, \"ReadableStreamDefaultReaderRead\");\n            function Ni(e) {\n                _e(e);\n                const t = new TypeError(\"Reader was released\");\n                ro(e, t);\n            }\n            n(Ni, \"ReadableStreamDefaultReaderRelease\");\n            function ro(e, t) {\n                const r = e._readRequests;\n                e._readRequests = new D, r.forEach((s)=>{\n                    s._errorSteps(t);\n                });\n            }\n            n(ro, \"ReadableStreamDefaultReaderErrorReadRequests\");\n            function $t(e) {\n                return new TypeError(`ReadableStreamDefaultReader.prototype.${e} can only be used on a ReadableStreamDefaultReader`);\n            }\n            n($t, \"defaultReaderBrandCheckException\");\n            const Hi = Object.getPrototypeOf(Object.getPrototypeOf(async function*() {}).prototype), yn = class yn {\n                constructor(t, r){\n                    this._ongoingPromise = void 0, this._isFinished = !1, this._reader = t, this._preventCancel = r;\n                }\n                next() {\n                    const t = n(()=>this._nextSteps(), \"nextSteps\");\n                    return this._ongoingPromise = this._ongoingPromise ? F(this._ongoingPromise, t, t) : t(), this._ongoingPromise;\n                }\n                return(t) {\n                    const r = n(()=>this._returnSteps(t), \"returnSteps\");\n                    return this._ongoingPromise ? F(this._ongoingPromise, r, r) : r();\n                }\n                _nextSteps() {\n                    if (this._isFinished) return Promise.resolve({\n                        value: void 0,\n                        done: !0\n                    });\n                    const t = this._reader;\n                    let r, s;\n                    const f = E((d, m)=>{\n                        r = d, s = m;\n                    });\n                    return mt(t, {\n                        _chunkSteps: (d)=>{\n                            this._ongoingPromise = void 0, ge(()=>r({\n                                    value: d,\n                                    done: !1\n                                }));\n                        },\n                        _closeSteps: ()=>{\n                            this._ongoingPromise = void 0, this._isFinished = !0, _e(t), r({\n                                value: void 0,\n                                done: !0\n                            });\n                        },\n                        _errorSteps: (d)=>{\n                            this._ongoingPromise = void 0, this._isFinished = !0, _e(t), s(d);\n                        }\n                    }), f;\n                }\n                _returnSteps(t) {\n                    if (this._isFinished) return Promise.resolve({\n                        value: t,\n                        done: !0\n                    });\n                    this._isFinished = !0;\n                    const r = this._reader;\n                    if (!this._preventCancel) {\n                        const s = Wr(r, t);\n                        return _e(r), F(s, ()=>({\n                                value: t,\n                                done: !0\n                            }));\n                    }\n                    return _e(r), T({\n                        value: t,\n                        done: !0\n                    });\n                }\n            };\n            n(yn, \"ReadableStreamAsyncIteratorImpl\");\n            let Dt = yn;\n            const no = {\n                next () {\n                    return oo(this) ? this._asyncIteratorImpl.next() : b(io(\"next\"));\n                },\n                return (e) {\n                    return oo(this) ? this._asyncIteratorImpl.return(e) : b(io(\"return\"));\n                }\n            };\n            Object.setPrototypeOf(no, Hi);\n            function Vi(e, t) {\n                const r = Qe(e), s = new Dt(r, t), f = Object.create(no);\n                return f._asyncIteratorImpl = s, f;\n            }\n            n(Vi, \"AcquireReadableStreamAsyncIterator\");\n            function oo(e) {\n                if (!l(e) || !Object.prototype.hasOwnProperty.call(e, \"_asyncIteratorImpl\")) return !1;\n                try {\n                    return e._asyncIteratorImpl instanceof Dt;\n                } catch  {\n                    return !1;\n                }\n            }\n            n(oo, \"IsReadableStreamAsyncIterator\");\n            function io(e) {\n                return new TypeError(`ReadableStreamAsyncIterator.${e} can only be used on a ReadableSteamAsyncIterator`);\n            }\n            n(io, \"streamAsyncIteratorBrandCheckException\");\n            const ao = Number.isNaN || function(e) {\n                return e !== e;\n            };\n            var $r, Dr, Mr;\n            function yt(e) {\n                return e.slice();\n            }\n            n(yt, \"CreateArrayFromList\");\n            function so(e, t, r, s, f) {\n                new Uint8Array(e).set(new Uint8Array(r, s, f), t);\n            }\n            n(so, \"CopyDataBlockBytes\");\n            let we = n((e)=>(typeof e.transfer == \"function\" ? we = n((t)=>t.transfer(), \"TransferArrayBuffer\") : typeof structuredClone == \"function\" ? we = n((t)=>structuredClone(t, {\n                        transfer: [\n                            t\n                        ]\n                    }), \"TransferArrayBuffer\") : we = n((t)=>t, \"TransferArrayBuffer\"), we(e)), \"TransferArrayBuffer\"), Ae = n((e)=>(typeof e.detached == \"boolean\" ? Ae = n((t)=>t.detached, \"IsDetachedBuffer\") : Ae = n((t)=>t.byteLength === 0, \"IsDetachedBuffer\"), Ae(e)), \"IsDetachedBuffer\");\n            function lo(e, t, r) {\n                if (e.slice) return e.slice(t, r);\n                const s = r - t, f = new ArrayBuffer(s);\n                return so(f, 0, e, t, s), f;\n            }\n            n(lo, \"ArrayBufferSlice\");\n            function Mt(e, t) {\n                const r = e[t];\n                if (r != null) {\n                    if (typeof r != \"function\") throw new TypeError(`${String(t)} is not a function`);\n                    return r;\n                }\n            }\n            n(Mt, \"GetMethod\");\n            function Qi(e) {\n                const t = {\n                    [Symbol.iterator]: ()=>e.iterator\n                }, r = async function*() {\n                    return yield* t;\n                }(), s = r.next;\n                return {\n                    iterator: r,\n                    nextMethod: s,\n                    done: !1\n                };\n            }\n            n(Qi, \"CreateAsyncFromSyncIterator\");\n            const Ur = (Mr = ($r = Symbol.asyncIterator) !== null && $r !== void 0 ? $r : (Dr = Symbol.for) === null || Dr === void 0 ? void 0 : Dr.call(Symbol, \"Symbol.asyncIterator\")) !== null && Mr !== void 0 ? Mr : \"@@asyncIterator\";\n            function uo(e, t = \"sync\", r) {\n                if (r === void 0) if (t === \"async\") {\n                    if (r = Mt(e, Ur), r === void 0) {\n                        const c = Mt(e, Symbol.iterator), d = uo(e, \"sync\", c);\n                        return Qi(d);\n                    }\n                } else r = Mt(e, Symbol.iterator);\n                if (r === void 0) throw new TypeError(\"The object is not iterable\");\n                const s = z(r, e, []);\n                if (!l(s)) throw new TypeError(\"The iterator method must return an object\");\n                const f = s.next;\n                return {\n                    iterator: s,\n                    nextMethod: f,\n                    done: !1\n                };\n            }\n            n(uo, \"GetIterator\");\n            function Yi(e) {\n                const t = z(e.nextMethod, e.iterator, []);\n                if (!l(t)) throw new TypeError(\"The iterator.next() method must return an object\");\n                return t;\n            }\n            n(Yi, \"IteratorNext\");\n            function Gi(e) {\n                return !!e.done;\n            }\n            n(Gi, \"IteratorComplete\");\n            function Zi(e) {\n                return e.value;\n            }\n            n(Zi, \"IteratorValue\");\n            function Ki(e) {\n                return !(typeof e != \"number\" || ao(e) || e < 0);\n            }\n            n(Ki, \"IsNonNegativeNumber\");\n            function fo(e) {\n                const t = lo(e.buffer, e.byteOffset, e.byteOffset + e.byteLength);\n                return new Uint8Array(t);\n            }\n            n(fo, \"CloneAsUint8Array\");\n            function xr(e) {\n                const t = e._queue.shift();\n                return e._queueTotalSize -= t.size, e._queueTotalSize < 0 && (e._queueTotalSize = 0), t.value;\n            }\n            n(xr, \"DequeueValue\");\n            function Nr(e, t, r) {\n                if (!Ki(r) || r === 1 / 0) throw new RangeError(\"Size must be a finite, non-NaN, non-negative number.\");\n                e._queue.push({\n                    value: t,\n                    size: r\n                }), e._queueTotalSize += r;\n            }\n            n(Nr, \"EnqueueValueWithSize\");\n            function Ji(e) {\n                return e._queue.peek().value;\n            }\n            n(Ji, \"PeekQueueValue\");\n            function Be(e) {\n                e._queue = new D, e._queueTotalSize = 0;\n            }\n            n(Be, \"ResetQueue\");\n            function co(e) {\n                return e === DataView;\n            }\n            n(co, \"isDataViewConstructor\");\n            function Xi(e) {\n                return co(e.constructor);\n            }\n            n(Xi, \"isDataView\");\n            function ea(e) {\n                return co(e) ? 1 : e.BYTES_PER_ELEMENT;\n            }\n            n(ea, \"arrayBufferViewElementSize\");\n            const gn = class gn {\n                constructor(){\n                    throw new TypeError(\"Illegal constructor\");\n                }\n                get view() {\n                    if (!Hr(this)) throw Zr(\"view\");\n                    return this._view;\n                }\n                respond(t) {\n                    if (!Hr(this)) throw Zr(\"respond\");\n                    if (Se(t, 1, \"respond\"), t = Fr(t, \"First parameter\"), this._associatedReadableByteStreamController === void 0) throw new TypeError(\"This BYOB request has been invalidated\");\n                    if (Ae(this._view.buffer)) throw new TypeError(\"The BYOB request's buffer has been detached and so cannot be used as a response\");\n                    Ht(this._associatedReadableByteStreamController, t);\n                }\n                respondWithNewView(t) {\n                    if (!Hr(this)) throw Zr(\"respondWithNewView\");\n                    if (Se(t, 1, \"respondWithNewView\"), !ArrayBuffer.isView(t)) throw new TypeError(\"You can only respond with array buffer views\");\n                    if (this._associatedReadableByteStreamController === void 0) throw new TypeError(\"This BYOB request has been invalidated\");\n                    if (Ae(t.buffer)) throw new TypeError(\"The given view's buffer has been detached and so cannot be used as a response\");\n                    Vt(this._associatedReadableByteStreamController, t);\n                }\n            };\n            n(gn, \"ReadableStreamBYOBRequest\");\n            let Re = gn;\n            Object.defineProperties(Re.prototype, {\n                respond: {\n                    enumerable: !0\n                },\n                respondWithNewView: {\n                    enumerable: !0\n                },\n                view: {\n                    enumerable: !0\n                }\n            }), h(Re.prototype.respond, \"respond\"), h(Re.prototype.respondWithNewView, \"respondWithNewView\"), typeof Symbol.toStringTag == \"symbol\" && Object.defineProperty(Re.prototype, Symbol.toStringTag, {\n                value: \"ReadableStreamBYOBRequest\",\n                configurable: !0\n            });\n            const _n = class _n {\n                constructor(){\n                    throw new TypeError(\"Illegal constructor\");\n                }\n                get byobRequest() {\n                    if (!ze(this)) throw _t(\"byobRequest\");\n                    return Gr(this);\n                }\n                get desiredSize() {\n                    if (!ze(this)) throw _t(\"desiredSize\");\n                    return Ro(this);\n                }\n                close() {\n                    if (!ze(this)) throw _t(\"close\");\n                    if (this._closeRequested) throw new TypeError(\"The stream has already been closed; do not close it again!\");\n                    const t = this._controlledReadableByteStream._state;\n                    if (t !== \"readable\") throw new TypeError(`The stream (in ${t} state) is not in the readable state and cannot be closed`);\n                    gt(this);\n                }\n                enqueue(t) {\n                    if (!ze(this)) throw _t(\"enqueue\");\n                    if (Se(t, 1, \"enqueue\"), !ArrayBuffer.isView(t)) throw new TypeError(\"chunk must be an array buffer view\");\n                    if (t.byteLength === 0) throw new TypeError(\"chunk must have non-zero byteLength\");\n                    if (t.buffer.byteLength === 0) throw new TypeError(\"chunk's buffer must have non-zero byteLength\");\n                    if (this._closeRequested) throw new TypeError(\"stream is closed or draining\");\n                    const r = this._controlledReadableByteStream._state;\n                    if (r !== \"readable\") throw new TypeError(`The stream (in ${r} state) is not in the readable state and cannot be enqueued to`);\n                    Nt(this, t);\n                }\n                error(t = void 0) {\n                    if (!ze(this)) throw _t(\"error\");\n                    K(this, t);\n                }\n                [Ar](t) {\n                    ho(this), Be(this);\n                    const r = this._cancelAlgorithm(t);\n                    return xt(this), r;\n                }\n                [Br](t) {\n                    const r = this._controlledReadableByteStream;\n                    if (this._queueTotalSize > 0) {\n                        wo(this, t);\n                        return;\n                    }\n                    const s = this._autoAllocateChunkSize;\n                    if (s !== void 0) {\n                        let f;\n                        try {\n                            f = new ArrayBuffer(s);\n                        } catch (d) {\n                            t._errorSteps(d);\n                            return;\n                        }\n                        const c = {\n                            buffer: f,\n                            bufferByteLength: s,\n                            byteOffset: 0,\n                            byteLength: s,\n                            bytesFilled: 0,\n                            minimumFill: 1,\n                            elementSize: 1,\n                            viewConstructor: Uint8Array,\n                            readerType: \"default\"\n                        };\n                        this._pendingPullIntos.push(c);\n                    }\n                    eo(r, t), Ie(this);\n                }\n                [kr]() {\n                    if (this._pendingPullIntos.length > 0) {\n                        const t = this._pendingPullIntos.peek();\n                        t.readerType = \"none\", this._pendingPullIntos = new D, this._pendingPullIntos.push(t);\n                    }\n                }\n            };\n            n(_n, \"ReadableByteStreamController\");\n            let te = _n;\n            Object.defineProperties(te.prototype, {\n                close: {\n                    enumerable: !0\n                },\n                enqueue: {\n                    enumerable: !0\n                },\n                error: {\n                    enumerable: !0\n                },\n                byobRequest: {\n                    enumerable: !0\n                },\n                desiredSize: {\n                    enumerable: !0\n                }\n            }), h(te.prototype.close, \"close\"), h(te.prototype.enqueue, \"enqueue\"), h(te.prototype.error, \"error\"), typeof Symbol.toStringTag == \"symbol\" && Object.defineProperty(te.prototype, Symbol.toStringTag, {\n                value: \"ReadableByteStreamController\",\n                configurable: !0\n            });\n            function ze(e) {\n                return !l(e) || !Object.prototype.hasOwnProperty.call(e, \"_controlledReadableByteStream\") ? !1 : e instanceof te;\n            }\n            n(ze, \"IsReadableByteStreamController\");\n            function Hr(e) {\n                return !l(e) || !Object.prototype.hasOwnProperty.call(e, \"_associatedReadableByteStreamController\") ? !1 : e instanceof Re;\n            }\n            n(Hr, \"IsReadableStreamBYOBRequest\");\n            function Ie(e) {\n                if (!ia(e)) return;\n                if (e._pulling) {\n                    e._pullAgain = !0;\n                    return;\n                }\n                e._pulling = !0;\n                const r = e._pullAlgorithm();\n                _(r, ()=>(e._pulling = !1, e._pullAgain && (e._pullAgain = !1, Ie(e)), null), (s)=>(K(e, s), null));\n            }\n            n(Ie, \"ReadableByteStreamControllerCallPullIfNeeded\");\n            function ho(e) {\n                Qr(e), e._pendingPullIntos = new D;\n            }\n            n(ho, \"ReadableByteStreamControllerClearPendingPullIntos\");\n            function Vr(e, t) {\n                let r = !1;\n                e._state === \"closed\" && (r = !0);\n                const s = po(t);\n                t.readerType === \"default\" ? Lr(e, s, r) : ca(e, s, r);\n            }\n            n(Vr, \"ReadableByteStreamControllerCommitPullIntoDescriptor\");\n            function po(e) {\n                const t = e.bytesFilled, r = e.elementSize;\n                return new e.viewConstructor(e.buffer, e.byteOffset, t / r);\n            }\n            n(po, \"ReadableByteStreamControllerConvertPullIntoDescriptor\");\n            function Ut(e, t, r, s) {\n                e._queue.push({\n                    buffer: t,\n                    byteOffset: r,\n                    byteLength: s\n                }), e._queueTotalSize += s;\n            }\n            n(Ut, \"ReadableByteStreamControllerEnqueueChunkToQueue\");\n            function bo(e, t, r, s) {\n                let f;\n                try {\n                    f = lo(t, r, r + s);\n                } catch (c) {\n                    throw K(e, c), c;\n                }\n                Ut(e, f, 0, s);\n            }\n            n(bo, \"ReadableByteStreamControllerEnqueueClonedChunkToQueue\");\n            function mo(e, t) {\n                t.bytesFilled > 0 && bo(e, t.buffer, t.byteOffset, t.bytesFilled), Ye(e);\n            }\n            n(mo, \"ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue\");\n            function yo(e, t) {\n                const r = Math.min(e._queueTotalSize, t.byteLength - t.bytesFilled), s = t.bytesFilled + r;\n                let f = r, c = !1;\n                const d = s % t.elementSize, m = s - d;\n                m >= t.minimumFill && (f = m - t.bytesFilled, c = !0);\n                const R = e._queue;\n                for(; f > 0;){\n                    const y = R.peek(), C = Math.min(f, y.byteLength), P = t.byteOffset + t.bytesFilled;\n                    so(t.buffer, P, y.buffer, y.byteOffset, C), y.byteLength === C ? R.shift() : (y.byteOffset += C, y.byteLength -= C), e._queueTotalSize -= C, go(e, C, t), f -= C;\n                }\n                return c;\n            }\n            n(yo, \"ReadableByteStreamControllerFillPullIntoDescriptorFromQueue\");\n            function go(e, t, r) {\n                r.bytesFilled += t;\n            }\n            n(go, \"ReadableByteStreamControllerFillHeadPullIntoDescriptor\");\n            function _o(e) {\n                e._queueTotalSize === 0 && e._closeRequested ? (xt(e), Pt(e._controlledReadableByteStream)) : Ie(e);\n            }\n            n(_o, \"ReadableByteStreamControllerHandleQueueDrain\");\n            function Qr(e) {\n                e._byobRequest !== null && (e._byobRequest._associatedReadableByteStreamController = void 0, e._byobRequest._view = null, e._byobRequest = null);\n            }\n            n(Qr, \"ReadableByteStreamControllerInvalidateBYOBRequest\");\n            function Yr(e) {\n                for(; e._pendingPullIntos.length > 0;){\n                    if (e._queueTotalSize === 0) return;\n                    const t = e._pendingPullIntos.peek();\n                    yo(e, t) && (Ye(e), Vr(e._controlledReadableByteStream, t));\n                }\n            }\n            n(Yr, \"ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue\");\n            function ta(e) {\n                const t = e._controlledReadableByteStream._reader;\n                for(; t._readRequests.length > 0;){\n                    if (e._queueTotalSize === 0) return;\n                    const r = t._readRequests.shift();\n                    wo(e, r);\n                }\n            }\n            n(ta, \"ReadableByteStreamControllerProcessReadRequestsUsingQueue\");\n            function ra(e, t, r, s) {\n                const f = e._controlledReadableByteStream, c = t.constructor, d = ea(c), { byteOffset: m, byteLength: R } = t, y = r * d;\n                let C;\n                try {\n                    C = we(t.buffer);\n                } catch (B) {\n                    s._errorSteps(B);\n                    return;\n                }\n                const P = {\n                    buffer: C,\n                    bufferByteLength: C.byteLength,\n                    byteOffset: m,\n                    byteLength: R,\n                    bytesFilled: 0,\n                    minimumFill: y,\n                    elementSize: d,\n                    viewConstructor: c,\n                    readerType: \"byob\"\n                };\n                if (e._pendingPullIntos.length > 0) {\n                    e._pendingPullIntos.push(P), Po(f, s);\n                    return;\n                }\n                if (f._state === \"closed\") {\n                    const B = new c(P.buffer, P.byteOffset, 0);\n                    s._closeSteps(B);\n                    return;\n                }\n                if (e._queueTotalSize > 0) {\n                    if (yo(e, P)) {\n                        const B = po(P);\n                        _o(e), s._chunkSteps(B);\n                        return;\n                    }\n                    if (e._closeRequested) {\n                        const B = new TypeError(\"Insufficient bytes to fill elements in the given buffer\");\n                        K(e, B), s._errorSteps(B);\n                        return;\n                    }\n                }\n                e._pendingPullIntos.push(P), Po(f, s), Ie(e);\n            }\n            n(ra, \"ReadableByteStreamControllerPullInto\");\n            function na(e, t) {\n                t.readerType === \"none\" && Ye(e);\n                const r = e._controlledReadableByteStream;\n                if (Kr(r)) for(; vo(r) > 0;){\n                    const s = Ye(e);\n                    Vr(r, s);\n                }\n            }\n            n(na, \"ReadableByteStreamControllerRespondInClosedState\");\n            function oa(e, t, r) {\n                if (go(e, t, r), r.readerType === \"none\") {\n                    mo(e, r), Yr(e);\n                    return;\n                }\n                if (r.bytesFilled < r.minimumFill) return;\n                Ye(e);\n                const s = r.bytesFilled % r.elementSize;\n                if (s > 0) {\n                    const f = r.byteOffset + r.bytesFilled;\n                    bo(e, r.buffer, f - s, s);\n                }\n                r.bytesFilled -= s, Vr(e._controlledReadableByteStream, r), Yr(e);\n            }\n            n(oa, \"ReadableByteStreamControllerRespondInReadableState\");\n            function So(e, t) {\n                const r = e._pendingPullIntos.peek();\n                Qr(e), e._controlledReadableByteStream._state === \"closed\" ? na(e, r) : oa(e, t, r), Ie(e);\n            }\n            n(So, \"ReadableByteStreamControllerRespondInternal\");\n            function Ye(e) {\n                return e._pendingPullIntos.shift();\n            }\n            n(Ye, \"ReadableByteStreamControllerShiftPendingPullInto\");\n            function ia(e) {\n                const t = e._controlledReadableByteStream;\n                return t._state !== \"readable\" || e._closeRequested || !e._started ? !1 : !!(to(t) && Lt(t) > 0 || Kr(t) && vo(t) > 0 || Ro(e) > 0);\n            }\n            n(ia, \"ReadableByteStreamControllerShouldCallPull\");\n            function xt(e) {\n                e._pullAlgorithm = void 0, e._cancelAlgorithm = void 0;\n            }\n            n(xt, \"ReadableByteStreamControllerClearAlgorithms\");\n            function gt(e) {\n                const t = e._controlledReadableByteStream;\n                if (!(e._closeRequested || t._state !== \"readable\")) {\n                    if (e._queueTotalSize > 0) {\n                        e._closeRequested = !0;\n                        return;\n                    }\n                    if (e._pendingPullIntos.length > 0) {\n                        const r = e._pendingPullIntos.peek();\n                        if (r.bytesFilled % r.elementSize !== 0) {\n                            const s = new TypeError(\"Insufficient bytes to fill elements in the given buffer\");\n                            throw K(e, s), s;\n                        }\n                    }\n                    xt(e), Pt(t);\n                }\n            }\n            n(gt, \"ReadableByteStreamControllerClose\");\n            function Nt(e, t) {\n                const r = e._controlledReadableByteStream;\n                if (e._closeRequested || r._state !== \"readable\") return;\n                const { buffer: s, byteOffset: f, byteLength: c } = t;\n                if (Ae(s)) throw new TypeError(\"chunk's buffer is detached and so cannot be enqueued\");\n                const d = we(s);\n                if (e._pendingPullIntos.length > 0) {\n                    const m = e._pendingPullIntos.peek();\n                    if (Ae(m.buffer)) throw new TypeError(\"The BYOB request's buffer has been detached and so cannot be filled with an enqueued chunk\");\n                    Qr(e), m.buffer = we(m.buffer), m.readerType === \"none\" && mo(e, m);\n                }\n                if (to(r)) if (ta(e), Lt(r) === 0) Ut(e, d, f, c);\n                else {\n                    e._pendingPullIntos.length > 0 && Ye(e);\n                    const m = new Uint8Array(d, f, c);\n                    Lr(r, m, !1);\n                }\n                else Kr(r) ? (Ut(e, d, f, c), Yr(e)) : Ut(e, d, f, c);\n                Ie(e);\n            }\n            n(Nt, \"ReadableByteStreamControllerEnqueue\");\n            function K(e, t) {\n                const r = e._controlledReadableByteStream;\n                r._state === \"readable\" && (ho(e), Be(e), xt(e), Zo(r, t));\n            }\n            n(K, \"ReadableByteStreamControllerError\");\n            function wo(e, t) {\n                const r = e._queue.shift();\n                e._queueTotalSize -= r.byteLength, _o(e);\n                const s = new Uint8Array(r.buffer, r.byteOffset, r.byteLength);\n                t._chunkSteps(s);\n            }\n            n(wo, \"ReadableByteStreamControllerFillReadRequestFromQueue\");\n            function Gr(e) {\n                if (e._byobRequest === null && e._pendingPullIntos.length > 0) {\n                    const t = e._pendingPullIntos.peek(), r = new Uint8Array(t.buffer, t.byteOffset + t.bytesFilled, t.byteLength - t.bytesFilled), s = Object.create(Re.prototype);\n                    sa(s, e, r), e._byobRequest = s;\n                }\n                return e._byobRequest;\n            }\n            n(Gr, \"ReadableByteStreamControllerGetBYOBRequest\");\n            function Ro(e) {\n                const t = e._controlledReadableByteStream._state;\n                return t === \"errored\" ? null : t === \"closed\" ? 0 : e._strategyHWM - e._queueTotalSize;\n            }\n            n(Ro, \"ReadableByteStreamControllerGetDesiredSize\");\n            function Ht(e, t) {\n                const r = e._pendingPullIntos.peek();\n                if (e._controlledReadableByteStream._state === \"closed\") {\n                    if (t !== 0) throw new TypeError(\"bytesWritten must be 0 when calling respond() on a closed stream\");\n                } else {\n                    if (t === 0) throw new TypeError(\"bytesWritten must be greater than 0 when calling respond() on a readable stream\");\n                    if (r.bytesFilled + t > r.byteLength) throw new RangeError(\"bytesWritten out of range\");\n                }\n                r.buffer = we(r.buffer), So(e, t);\n            }\n            n(Ht, \"ReadableByteStreamControllerRespond\");\n            function Vt(e, t) {\n                const r = e._pendingPullIntos.peek();\n                if (e._controlledReadableByteStream._state === \"closed\") {\n                    if (t.byteLength !== 0) throw new TypeError(\"The view's length must be 0 when calling respondWithNewView() on a closed stream\");\n                } else if (t.byteLength === 0) throw new TypeError(\"The view's length must be greater than 0 when calling respondWithNewView() on a readable stream\");\n                if (r.byteOffset + r.bytesFilled !== t.byteOffset) throw new RangeError(\"The region specified by view does not match byobRequest\");\n                if (r.bufferByteLength !== t.buffer.byteLength) throw new RangeError(\"The buffer of view has different capacity than byobRequest\");\n                if (r.bytesFilled + t.byteLength > r.byteLength) throw new RangeError(\"The region specified by view is larger than byobRequest\");\n                const f = t.byteLength;\n                r.buffer = we(t.buffer), So(e, f);\n            }\n            n(Vt, \"ReadableByteStreamControllerRespondWithNewView\");\n            function To(e, t, r, s, f, c, d) {\n                t._controlledReadableByteStream = e, t._pullAgain = !1, t._pulling = !1, t._byobRequest = null, t._queue = t._queueTotalSize = void 0, Be(t), t._closeRequested = !1, t._started = !1, t._strategyHWM = c, t._pullAlgorithm = s, t._cancelAlgorithm = f, t._autoAllocateChunkSize = d, t._pendingPullIntos = new D, e._readableStreamController = t;\n                const m = r();\n                _(T(m), ()=>(t._started = !0, Ie(t), null), (R)=>(K(t, R), null));\n            }\n            n(To, \"SetUpReadableByteStreamController\");\n            function aa(e, t, r) {\n                const s = Object.create(te.prototype);\n                let f, c, d;\n                t.start !== void 0 ? f = n(()=>t.start(s), \"startAlgorithm\") : f = n(()=>{}, \"startAlgorithm\"), t.pull !== void 0 ? c = n(()=>t.pull(s), \"pullAlgorithm\") : c = n(()=>T(void 0), \"pullAlgorithm\"), t.cancel !== void 0 ? d = n((R)=>t.cancel(R), \"cancelAlgorithm\") : d = n(()=>T(void 0), \"cancelAlgorithm\");\n                const m = t.autoAllocateChunkSize;\n                if (m === 0) throw new TypeError(\"autoAllocateChunkSize must be greater than 0\");\n                To(e, s, f, c, d, r, m);\n            }\n            n(aa, \"SetUpReadableByteStreamControllerFromUnderlyingSource\");\n            function sa(e, t, r) {\n                e._associatedReadableByteStreamController = t, e._view = r;\n            }\n            n(sa, \"SetUpReadableStreamBYOBRequest\");\n            function Zr(e) {\n                return new TypeError(`ReadableStreamBYOBRequest.prototype.${e} can only be used on a ReadableStreamBYOBRequest`);\n            }\n            n(Zr, \"byobRequestBrandCheckException\");\n            function _t(e) {\n                return new TypeError(`ReadableByteStreamController.prototype.${e} can only be used on a ReadableByteStreamController`);\n            }\n            n(_t, \"byteStreamControllerBrandCheckException\");\n            function la(e, t) {\n                ue(e, t);\n                const r = e?.mode;\n                return {\n                    mode: r === void 0 ? void 0 : ua(r, `${t} has member 'mode' that`)\n                };\n            }\n            n(la, \"convertReaderOptions\");\n            function ua(e, t) {\n                if (e = `${e}`, e !== \"byob\") throw new TypeError(`${t} '${e}' is not a valid enumeration value for ReadableStreamReaderMode`);\n                return e;\n            }\n            n(ua, \"convertReadableStreamReaderMode\");\n            function fa(e, t) {\n                var r;\n                ue(e, t);\n                const s = (r = e?.min) !== null && r !== void 0 ? r : 1;\n                return {\n                    min: Fr(s, `${t} has member 'min' that`)\n                };\n            }\n            n(fa, \"convertByobReadOptions\");\n            function Co(e) {\n                return new ce(e);\n            }\n            n(Co, \"AcquireReadableStreamBYOBReader\");\n            function Po(e, t) {\n                e._reader._readIntoRequests.push(t);\n            }\n            n(Po, \"ReadableStreamAddReadIntoRequest\");\n            function ca(e, t, r) {\n                const f = e._reader._readIntoRequests.shift();\n                r ? f._closeSteps(t) : f._chunkSteps(t);\n            }\n            n(ca, \"ReadableStreamFulfillReadIntoRequest\");\n            function vo(e) {\n                return e._reader._readIntoRequests.length;\n            }\n            n(vo, \"ReadableStreamGetNumReadIntoRequests\");\n            function Kr(e) {\n                const t = e._reader;\n                return !(t === void 0 || !Fe(t));\n            }\n            n(Kr, \"ReadableStreamHasBYOBReader\");\n            const Sn = class Sn {\n                constructor(t){\n                    if (Se(t, 1, \"ReadableStreamBYOBReader\"), jr(t, \"First parameter\"), qe(t)) throw new TypeError(\"This stream has already been locked for exclusive reading by another reader\");\n                    if (!ze(t._readableStreamController)) throw new TypeError(\"Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source\");\n                    Yn(this, t), this._readIntoRequests = new D;\n                }\n                get closed() {\n                    return Fe(this) ? this._closedPromise : b(Qt(\"closed\"));\n                }\n                cancel(t = void 0) {\n                    return Fe(this) ? this._ownerReadableStream === void 0 ? b(jt(\"cancel\")) : Wr(this, t) : b(Qt(\"cancel\"));\n                }\n                read(t, r = {}) {\n                    if (!Fe(this)) return b(Qt(\"read\"));\n                    if (!ArrayBuffer.isView(t)) return b(new TypeError(\"view must be an array buffer view\"));\n                    if (t.byteLength === 0) return b(new TypeError(\"view must have non-zero byteLength\"));\n                    if (t.buffer.byteLength === 0) return b(new TypeError(\"view's buffer must have non-zero byteLength\"));\n                    if (Ae(t.buffer)) return b(new TypeError(\"view's buffer has been detached\"));\n                    let s;\n                    try {\n                        s = fa(r, \"options\");\n                    } catch (y) {\n                        return b(y);\n                    }\n                    const f = s.min;\n                    if (f === 0) return b(new TypeError(\"options.min must be greater than 0\"));\n                    if (Xi(t)) {\n                        if (f > t.byteLength) return b(new RangeError(\"options.min must be less than or equal to view's byteLength\"));\n                    } else if (f > t.length) return b(new RangeError(\"options.min must be less than or equal to view's length\"));\n                    if (this._ownerReadableStream === void 0) return b(jt(\"read from\"));\n                    let c, d;\n                    const m = E((y, C)=>{\n                        c = y, d = C;\n                    });\n                    return Eo(this, t, f, {\n                        _chunkSteps: (y)=>c({\n                                value: y,\n                                done: !1\n                            }),\n                        _closeSteps: (y)=>c({\n                                value: y,\n                                done: !0\n                            }),\n                        _errorSteps: (y)=>d(y)\n                    }), m;\n                }\n                releaseLock() {\n                    if (!Fe(this)) throw Qt(\"releaseLock\");\n                    this._ownerReadableStream !== void 0 && da(this);\n                }\n            };\n            n(Sn, \"ReadableStreamBYOBReader\");\n            let ce = Sn;\n            Object.defineProperties(ce.prototype, {\n                cancel: {\n                    enumerable: !0\n                },\n                read: {\n                    enumerable: !0\n                },\n                releaseLock: {\n                    enumerable: !0\n                },\n                closed: {\n                    enumerable: !0\n                }\n            }), h(ce.prototype.cancel, \"cancel\"), h(ce.prototype.read, \"read\"), h(ce.prototype.releaseLock, \"releaseLock\"), typeof Symbol.toStringTag == \"symbol\" && Object.defineProperty(ce.prototype, Symbol.toStringTag, {\n                value: \"ReadableStreamBYOBReader\",\n                configurable: !0\n            });\n            function Fe(e) {\n                return !l(e) || !Object.prototype.hasOwnProperty.call(e, \"_readIntoRequests\") ? !1 : e instanceof ce;\n            }\n            n(Fe, \"IsReadableStreamBYOBReader\");\n            function Eo(e, t, r, s) {\n                const f = e._ownerReadableStream;\n                f._disturbed = !0, f._state === \"errored\" ? s._errorSteps(f._storedError) : ra(f._readableStreamController, t, r, s);\n            }\n            n(Eo, \"ReadableStreamBYOBReaderRead\");\n            function da(e) {\n                _e(e);\n                const t = new TypeError(\"Reader was released\");\n                Ao(e, t);\n            }\n            n(da, \"ReadableStreamBYOBReaderRelease\");\n            function Ao(e, t) {\n                const r = e._readIntoRequests;\n                e._readIntoRequests = new D, r.forEach((s)=>{\n                    s._errorSteps(t);\n                });\n            }\n            n(Ao, \"ReadableStreamBYOBReaderErrorReadIntoRequests\");\n            function Qt(e) {\n                return new TypeError(`ReadableStreamBYOBReader.prototype.${e} can only be used on a ReadableStreamBYOBReader`);\n            }\n            n(Qt, \"byobReaderBrandCheckException\");\n            function St(e, t) {\n                const { highWaterMark: r } = e;\n                if (r === void 0) return t;\n                if (ao(r) || r < 0) throw new RangeError(\"Invalid highWaterMark\");\n                return r;\n            }\n            n(St, \"ExtractHighWaterMark\");\n            function Yt(e) {\n                const { size: t } = e;\n                return t || (()=>1);\n            }\n            n(Yt, \"ExtractSizeAlgorithm\");\n            function Gt(e, t) {\n                ue(e, t);\n                const r = e?.highWaterMark, s = e?.size;\n                return {\n                    highWaterMark: r === void 0 ? void 0 : Ir(r),\n                    size: s === void 0 ? void 0 : ha(s, `${t} has member 'size' that`)\n                };\n            }\n            n(Gt, \"convertQueuingStrategy\");\n            function ha(e, t) {\n                return Z(e, t), (r)=>Ir(e(r));\n            }\n            n(ha, \"convertQueuingStrategySize\");\n            function pa(e, t) {\n                ue(e, t);\n                const r = e?.abort, s = e?.close, f = e?.start, c = e?.type, d = e?.write;\n                return {\n                    abort: r === void 0 ? void 0 : ba(r, e, `${t} has member 'abort' that`),\n                    close: s === void 0 ? void 0 : ma(s, e, `${t} has member 'close' that`),\n                    start: f === void 0 ? void 0 : ya(f, e, `${t} has member 'start' that`),\n                    write: d === void 0 ? void 0 : ga(d, e, `${t} has member 'write' that`),\n                    type: c\n                };\n            }\n            n(pa, \"convertUnderlyingSink\");\n            function ba(e, t, r) {\n                return Z(e, r), (s)=>j(e, t, [\n                        s\n                    ]);\n            }\n            n(ba, \"convertUnderlyingSinkAbortCallback\");\n            function ma(e, t, r) {\n                return Z(e, r), ()=>j(e, t, []);\n            }\n            n(ma, \"convertUnderlyingSinkCloseCallback\");\n            function ya(e, t, r) {\n                return Z(e, r), (s)=>z(e, t, [\n                        s\n                    ]);\n            }\n            n(ya, \"convertUnderlyingSinkStartCallback\");\n            function ga(e, t, r) {\n                return Z(e, r), (s, f)=>j(e, t, [\n                        s,\n                        f\n                    ]);\n            }\n            n(ga, \"convertUnderlyingSinkWriteCallback\");\n            function Bo(e, t) {\n                if (!Ge(e)) throw new TypeError(`${t} is not a WritableStream.`);\n            }\n            n(Bo, \"assertWritableStream\");\n            function _a(e) {\n                if (typeof e != \"object\" || e === null) return !1;\n                try {\n                    return typeof e.aborted == \"boolean\";\n                } catch  {\n                    return !1;\n                }\n            }\n            n(_a, \"isAbortSignal\");\n            const Sa = typeof AbortController == \"function\";\n            function wa() {\n                if (Sa) return new AbortController;\n            }\n            n(wa, \"createAbortController\");\n            const wn = class wn {\n                constructor(t = {}, r = {}){\n                    t === void 0 ? t = null : Jn(t, \"First parameter\");\n                    const s = Gt(r, \"Second parameter\"), f = pa(t, \"First parameter\");\n                    if (Wo(this), f.type !== void 0) throw new RangeError(\"Invalid type is specified\");\n                    const d = Yt(s), m = St(s, 1);\n                    Ia(this, f, m, d);\n                }\n                get locked() {\n                    if (!Ge(this)) throw er(\"locked\");\n                    return Ze(this);\n                }\n                abort(t = void 0) {\n                    return Ge(this) ? Ze(this) ? b(new TypeError(\"Cannot abort a stream that already has a writer\")) : Zt(this, t) : b(er(\"abort\"));\n                }\n                close() {\n                    return Ge(this) ? Ze(this) ? b(new TypeError(\"Cannot close a stream that already has a writer\")) : he(this) ? b(new TypeError(\"Cannot close an already-closing stream\")) : qo(this) : b(er(\"close\"));\n                }\n                getWriter() {\n                    if (!Ge(this)) throw er(\"getWriter\");\n                    return ko(this);\n                }\n            };\n            n(wn, \"WritableStream\");\n            let de = wn;\n            Object.defineProperties(de.prototype, {\n                abort: {\n                    enumerable: !0\n                },\n                close: {\n                    enumerable: !0\n                },\n                getWriter: {\n                    enumerable: !0\n                },\n                locked: {\n                    enumerable: !0\n                }\n            }), h(de.prototype.abort, \"abort\"), h(de.prototype.close, \"close\"), h(de.prototype.getWriter, \"getWriter\"), typeof Symbol.toStringTag == \"symbol\" && Object.defineProperty(de.prototype, Symbol.toStringTag, {\n                value: \"WritableStream\",\n                configurable: !0\n            });\n            function ko(e) {\n                return new re(e);\n            }\n            n(ko, \"AcquireWritableStreamDefaultWriter\");\n            function Ra(e, t, r, s, f = 1, c = ()=>1) {\n                const d = Object.create(de.prototype);\n                Wo(d);\n                const m = Object.create(ke.prototype);\n                return Lo(d, m, e, t, r, s, f, c), d;\n            }\n            n(Ra, \"CreateWritableStream\");\n            function Wo(e) {\n                e._state = \"writable\", e._storedError = void 0, e._writer = void 0, e._writableStreamController = void 0, e._writeRequests = new D, e._inFlightWriteRequest = void 0, e._closeRequest = void 0, e._inFlightCloseRequest = void 0, e._pendingAbortRequest = void 0, e._backpressure = !1;\n            }\n            n(Wo, \"InitializeWritableStream\");\n            function Ge(e) {\n                return !l(e) || !Object.prototype.hasOwnProperty.call(e, \"_writableStreamController\") ? !1 : e instanceof de;\n            }\n            n(Ge, \"IsWritableStream\");\n            function Ze(e) {\n                return e._writer !== void 0;\n            }\n            n(Ze, \"IsWritableStreamLocked\");\n            function Zt(e, t) {\n                var r;\n                if (e._state === \"closed\" || e._state === \"errored\") return T(void 0);\n                e._writableStreamController._abortReason = t, (r = e._writableStreamController._abortController) === null || r === void 0 || r.abort(t);\n                const s = e._state;\n                if (s === \"closed\" || s === \"errored\") return T(void 0);\n                if (e._pendingAbortRequest !== void 0) return e._pendingAbortRequest._promise;\n                let f = !1;\n                s === \"erroring\" && (f = !0, t = void 0);\n                const c = E((d, m)=>{\n                    e._pendingAbortRequest = {\n                        _promise: void 0,\n                        _resolve: d,\n                        _reject: m,\n                        _reason: t,\n                        _wasAlreadyErroring: f\n                    };\n                });\n                return e._pendingAbortRequest._promise = c, f || Xr(e, t), c;\n            }\n            n(Zt, \"WritableStreamAbort\");\n            function qo(e) {\n                const t = e._state;\n                if (t === \"closed\" || t === \"errored\") return b(new TypeError(`The stream (in ${t} state) is not in the writable state and cannot be closed`));\n                const r = E((f, c)=>{\n                    const d = {\n                        _resolve: f,\n                        _reject: c\n                    };\n                    e._closeRequest = d;\n                }), s = e._writer;\n                return s !== void 0 && e._backpressure && t === \"writable\" && ln(s), Fa(e._writableStreamController), r;\n            }\n            n(qo, \"WritableStreamClose\");\n            function Ta(e) {\n                return E((r, s)=>{\n                    const f = {\n                        _resolve: r,\n                        _reject: s\n                    };\n                    e._writeRequests.push(f);\n                });\n            }\n            n(Ta, \"WritableStreamAddWriteRequest\");\n            function Jr(e, t) {\n                if (e._state === \"writable\") {\n                    Xr(e, t);\n                    return;\n                }\n                en(e);\n            }\n            n(Jr, \"WritableStreamDealWithRejection\");\n            function Xr(e, t) {\n                const r = e._writableStreamController;\n                e._state = \"erroring\", e._storedError = t;\n                const s = e._writer;\n                s !== void 0 && zo(s, t), !Aa(e) && r._started && en(e);\n            }\n            n(Xr, \"WritableStreamStartErroring\");\n            function en(e) {\n                e._state = \"errored\", e._writableStreamController[Qn]();\n                const t = e._storedError;\n                if (e._writeRequests.forEach((f)=>{\n                    f._reject(t);\n                }), e._writeRequests = new D, e._pendingAbortRequest === void 0) {\n                    Kt(e);\n                    return;\n                }\n                const r = e._pendingAbortRequest;\n                if (e._pendingAbortRequest = void 0, r._wasAlreadyErroring) {\n                    r._reject(t), Kt(e);\n                    return;\n                }\n                const s = e._writableStreamController[Ft](r._reason);\n                _(s, ()=>(r._resolve(), Kt(e), null), (f)=>(r._reject(f), Kt(e), null));\n            }\n            n(en, \"WritableStreamFinishErroring\");\n            function Ca(e) {\n                e._inFlightWriteRequest._resolve(void 0), e._inFlightWriteRequest = void 0;\n            }\n            n(Ca, \"WritableStreamFinishInFlightWrite\");\n            function Pa(e, t) {\n                e._inFlightWriteRequest._reject(t), e._inFlightWriteRequest = void 0, Jr(e, t);\n            }\n            n(Pa, \"WritableStreamFinishInFlightWriteWithError\");\n            function va(e) {\n                e._inFlightCloseRequest._resolve(void 0), e._inFlightCloseRequest = void 0, e._state === \"erroring\" && (e._storedError = void 0, e._pendingAbortRequest !== void 0 && (e._pendingAbortRequest._resolve(), e._pendingAbortRequest = void 0)), e._state = \"closed\";\n                const r = e._writer;\n                r !== void 0 && Uo(r);\n            }\n            n(va, \"WritableStreamFinishInFlightClose\");\n            function Ea(e, t) {\n                e._inFlightCloseRequest._reject(t), e._inFlightCloseRequest = void 0, e._pendingAbortRequest !== void 0 && (e._pendingAbortRequest._reject(t), e._pendingAbortRequest = void 0), Jr(e, t);\n            }\n            n(Ea, \"WritableStreamFinishInFlightCloseWithError\");\n            function he(e) {\n                return !(e._closeRequest === void 0 && e._inFlightCloseRequest === void 0);\n            }\n            n(he, \"WritableStreamCloseQueuedOrInFlight\");\n            function Aa(e) {\n                return !(e._inFlightWriteRequest === void 0 && e._inFlightCloseRequest === void 0);\n            }\n            n(Aa, \"WritableStreamHasOperationMarkedInFlight\");\n            function Ba(e) {\n                e._inFlightCloseRequest = e._closeRequest, e._closeRequest = void 0;\n            }\n            n(Ba, \"WritableStreamMarkCloseRequestInFlight\");\n            function ka(e) {\n                e._inFlightWriteRequest = e._writeRequests.shift();\n            }\n            n(ka, \"WritableStreamMarkFirstWriteRequestInFlight\");\n            function Kt(e) {\n                e._closeRequest !== void 0 && (e._closeRequest._reject(e._storedError), e._closeRequest = void 0);\n                const t = e._writer;\n                t !== void 0 && an(t, e._storedError);\n            }\n            n(Kt, \"WritableStreamRejectCloseAndClosedPromiseIfNeeded\");\n            function tn(e, t) {\n                const r = e._writer;\n                r !== void 0 && t !== e._backpressure && (t ? xa(r) : ln(r)), e._backpressure = t;\n            }\n            n(tn, \"WritableStreamUpdateBackpressure\");\n            const Rn = class Rn {\n                constructor(t){\n                    if (Se(t, 1, \"WritableStreamDefaultWriter\"), Bo(t, \"First parameter\"), Ze(t)) throw new TypeError(\"This stream has already been locked for exclusive writing by another writer\");\n                    this._ownerWritableStream = t, t._writer = this;\n                    const r = t._state;\n                    if (r === \"writable\") !he(t) && t._backpressure ? rr(this) : xo(this), tr(this);\n                    else if (r === \"erroring\") sn(this, t._storedError), tr(this);\n                    else if (r === \"closed\") xo(this), Ma(this);\n                    else {\n                        const s = t._storedError;\n                        sn(this, s), Mo(this, s);\n                    }\n                }\n                get closed() {\n                    return je(this) ? this._closedPromise : b(Le(\"closed\"));\n                }\n                get desiredSize() {\n                    if (!je(this)) throw Le(\"desiredSize\");\n                    if (this._ownerWritableStream === void 0) throw Rt(\"desiredSize\");\n                    return za(this);\n                }\n                get ready() {\n                    return je(this) ? this._readyPromise : b(Le(\"ready\"));\n                }\n                abort(t = void 0) {\n                    return je(this) ? this._ownerWritableStream === void 0 ? b(Rt(\"abort\")) : Wa(this, t) : b(Le(\"abort\"));\n                }\n                close() {\n                    if (!je(this)) return b(Le(\"close\"));\n                    const t = this._ownerWritableStream;\n                    return t === void 0 ? b(Rt(\"close\")) : he(t) ? b(new TypeError(\"Cannot close an already-closing stream\")) : Oo(this);\n                }\n                releaseLock() {\n                    if (!je(this)) throw Le(\"releaseLock\");\n                    this._ownerWritableStream !== void 0 && Io(this);\n                }\n                write(t = void 0) {\n                    return je(this) ? this._ownerWritableStream === void 0 ? b(Rt(\"write to\")) : Fo(this, t) : b(Le(\"write\"));\n                }\n            };\n            n(Rn, \"WritableStreamDefaultWriter\");\n            let re = Rn;\n            Object.defineProperties(re.prototype, {\n                abort: {\n                    enumerable: !0\n                },\n                close: {\n                    enumerable: !0\n                },\n                releaseLock: {\n                    enumerable: !0\n                },\n                write: {\n                    enumerable: !0\n                },\n                closed: {\n                    enumerable: !0\n                },\n                desiredSize: {\n                    enumerable: !0\n                },\n                ready: {\n                    enumerable: !0\n                }\n            }), h(re.prototype.abort, \"abort\"), h(re.prototype.close, \"close\"), h(re.prototype.releaseLock, \"releaseLock\"), h(re.prototype.write, \"write\"), typeof Symbol.toStringTag == \"symbol\" && Object.defineProperty(re.prototype, Symbol.toStringTag, {\n                value: \"WritableStreamDefaultWriter\",\n                configurable: !0\n            });\n            function je(e) {\n                return !l(e) || !Object.prototype.hasOwnProperty.call(e, \"_ownerWritableStream\") ? !1 : e instanceof re;\n            }\n            n(je, \"IsWritableStreamDefaultWriter\");\n            function Wa(e, t) {\n                const r = e._ownerWritableStream;\n                return Zt(r, t);\n            }\n            n(Wa, \"WritableStreamDefaultWriterAbort\");\n            function Oo(e) {\n                const t = e._ownerWritableStream;\n                return qo(t);\n            }\n            n(Oo, \"WritableStreamDefaultWriterClose\");\n            function qa(e) {\n                const t = e._ownerWritableStream, r = t._state;\n                return he(t) || r === \"closed\" ? T(void 0) : r === \"errored\" ? b(t._storedError) : Oo(e);\n            }\n            n(qa, \"WritableStreamDefaultWriterCloseWithErrorPropagation\");\n            function Oa(e, t) {\n                e._closedPromiseState === \"pending\" ? an(e, t) : Ua(e, t);\n            }\n            n(Oa, \"WritableStreamDefaultWriterEnsureClosedPromiseRejected\");\n            function zo(e, t) {\n                e._readyPromiseState === \"pending\" ? No(e, t) : Na(e, t);\n            }\n            n(zo, \"WritableStreamDefaultWriterEnsureReadyPromiseRejected\");\n            function za(e) {\n                const t = e._ownerWritableStream, r = t._state;\n                return r === \"errored\" || r === \"erroring\" ? null : r === \"closed\" ? 0 : $o(t._writableStreamController);\n            }\n            n(za, \"WritableStreamDefaultWriterGetDesiredSize\");\n            function Io(e) {\n                const t = e._ownerWritableStream, r = new TypeError(\"Writer was released and can no longer be used to monitor the stream's closedness\");\n                zo(e, r), Oa(e, r), t._writer = void 0, e._ownerWritableStream = void 0;\n            }\n            n(Io, \"WritableStreamDefaultWriterRelease\");\n            function Fo(e, t) {\n                const r = e._ownerWritableStream, s = r._writableStreamController, f = ja(s, t);\n                if (r !== e._ownerWritableStream) return b(Rt(\"write to\"));\n                const c = r._state;\n                if (c === \"errored\") return b(r._storedError);\n                if (he(r) || c === \"closed\") return b(new TypeError(\"The stream is closing or closed and cannot be written to\"));\n                if (c === \"erroring\") return b(r._storedError);\n                const d = Ta(r);\n                return La(s, t, f), d;\n            }\n            n(Fo, \"WritableStreamDefaultWriterWrite\");\n            const jo = {}, Tn = class Tn {\n                constructor(){\n                    throw new TypeError(\"Illegal constructor\");\n                }\n                get abortReason() {\n                    if (!rn(this)) throw on(\"abortReason\");\n                    return this._abortReason;\n                }\n                get signal() {\n                    if (!rn(this)) throw on(\"signal\");\n                    if (this._abortController === void 0) throw new TypeError(\"WritableStreamDefaultController.prototype.signal is not supported\");\n                    return this._abortController.signal;\n                }\n                error(t = void 0) {\n                    if (!rn(this)) throw on(\"error\");\n                    this._controlledWritableStream._state === \"writable\" && Do(this, t);\n                }\n                [Ft](t) {\n                    const r = this._abortAlgorithm(t);\n                    return Jt(this), r;\n                }\n                [Qn]() {\n                    Be(this);\n                }\n            };\n            n(Tn, \"WritableStreamDefaultController\");\n            let ke = Tn;\n            Object.defineProperties(ke.prototype, {\n                abortReason: {\n                    enumerable: !0\n                },\n                signal: {\n                    enumerable: !0\n                },\n                error: {\n                    enumerable: !0\n                }\n            }), typeof Symbol.toStringTag == \"symbol\" && Object.defineProperty(ke.prototype, Symbol.toStringTag, {\n                value: \"WritableStreamDefaultController\",\n                configurable: !0\n            });\n            function rn(e) {\n                return !l(e) || !Object.prototype.hasOwnProperty.call(e, \"_controlledWritableStream\") ? !1 : e instanceof ke;\n            }\n            n(rn, \"IsWritableStreamDefaultController\");\n            function Lo(e, t, r, s, f, c, d, m) {\n                t._controlledWritableStream = e, e._writableStreamController = t, t._queue = void 0, t._queueTotalSize = void 0, Be(t), t._abortReason = void 0, t._abortController = wa(), t._started = !1, t._strategySizeAlgorithm = m, t._strategyHWM = d, t._writeAlgorithm = s, t._closeAlgorithm = f, t._abortAlgorithm = c;\n                const R = nn(t);\n                tn(e, R);\n                const y = r(), C = T(y);\n                _(C, ()=>(t._started = !0, Xt(t), null), (P)=>(t._started = !0, Jr(e, P), null));\n            }\n            n(Lo, \"SetUpWritableStreamDefaultController\");\n            function Ia(e, t, r, s) {\n                const f = Object.create(ke.prototype);\n                let c, d, m, R;\n                t.start !== void 0 ? c = n(()=>t.start(f), \"startAlgorithm\") : c = n(()=>{}, \"startAlgorithm\"), t.write !== void 0 ? d = n((y)=>t.write(y, f), \"writeAlgorithm\") : d = n(()=>T(void 0), \"writeAlgorithm\"), t.close !== void 0 ? m = n(()=>t.close(), \"closeAlgorithm\") : m = n(()=>T(void 0), \"closeAlgorithm\"), t.abort !== void 0 ? R = n((y)=>t.abort(y), \"abortAlgorithm\") : R = n(()=>T(void 0), \"abortAlgorithm\"), Lo(e, f, c, d, m, R, r, s);\n            }\n            n(Ia, \"SetUpWritableStreamDefaultControllerFromUnderlyingSink\");\n            function Jt(e) {\n                e._writeAlgorithm = void 0, e._closeAlgorithm = void 0, e._abortAlgorithm = void 0, e._strategySizeAlgorithm = void 0;\n            }\n            n(Jt, \"WritableStreamDefaultControllerClearAlgorithms\");\n            function Fa(e) {\n                Nr(e, jo, 0), Xt(e);\n            }\n            n(Fa, \"WritableStreamDefaultControllerClose\");\n            function ja(e, t) {\n                try {\n                    return e._strategySizeAlgorithm(t);\n                } catch (r) {\n                    return wt(e, r), 1;\n                }\n            }\n            n(ja, \"WritableStreamDefaultControllerGetChunkSize\");\n            function $o(e) {\n                return e._strategyHWM - e._queueTotalSize;\n            }\n            n($o, \"WritableStreamDefaultControllerGetDesiredSize\");\n            function La(e, t, r) {\n                try {\n                    Nr(e, t, r);\n                } catch (f) {\n                    wt(e, f);\n                    return;\n                }\n                const s = e._controlledWritableStream;\n                if (!he(s) && s._state === \"writable\") {\n                    const f = nn(e);\n                    tn(s, f);\n                }\n                Xt(e);\n            }\n            n(La, \"WritableStreamDefaultControllerWrite\");\n            function Xt(e) {\n                const t = e._controlledWritableStream;\n                if (!e._started || t._inFlightWriteRequest !== void 0) return;\n                if (t._state === \"erroring\") {\n                    en(t);\n                    return;\n                }\n                if (e._queue.length === 0) return;\n                const s = Ji(e);\n                s === jo ? $a(e) : Da(e, s);\n            }\n            n(Xt, \"WritableStreamDefaultControllerAdvanceQueueIfNeeded\");\n            function wt(e, t) {\n                e._controlledWritableStream._state === \"writable\" && Do(e, t);\n            }\n            n(wt, \"WritableStreamDefaultControllerErrorIfNeeded\");\n            function $a(e) {\n                const t = e._controlledWritableStream;\n                Ba(t), xr(e);\n                const r = e._closeAlgorithm();\n                Jt(e), _(r, ()=>(va(t), null), (s)=>(Ea(t, s), null));\n            }\n            n($a, \"WritableStreamDefaultControllerProcessClose\");\n            function Da(e, t) {\n                const r = e._controlledWritableStream;\n                ka(r);\n                const s = e._writeAlgorithm(t);\n                _(s, ()=>{\n                    Ca(r);\n                    const f = r._state;\n                    if (xr(e), !he(r) && f === \"writable\") {\n                        const c = nn(e);\n                        tn(r, c);\n                    }\n                    return Xt(e), null;\n                }, (f)=>(r._state === \"writable\" && Jt(e), Pa(r, f), null));\n            }\n            n(Da, \"WritableStreamDefaultControllerProcessWrite\");\n            function nn(e) {\n                return $o(e) <= 0;\n            }\n            n(nn, \"WritableStreamDefaultControllerGetBackpressure\");\n            function Do(e, t) {\n                const r = e._controlledWritableStream;\n                Jt(e), Xr(r, t);\n            }\n            n(Do, \"WritableStreamDefaultControllerError\");\n            function er(e) {\n                return new TypeError(`WritableStream.prototype.${e} can only be used on a WritableStream`);\n            }\n            n(er, \"streamBrandCheckException$2\");\n            function on(e) {\n                return new TypeError(`WritableStreamDefaultController.prototype.${e} can only be used on a WritableStreamDefaultController`);\n            }\n            n(on, \"defaultControllerBrandCheckException$2\");\n            function Le(e) {\n                return new TypeError(`WritableStreamDefaultWriter.prototype.${e} can only be used on a WritableStreamDefaultWriter`);\n            }\n            n(Le, \"defaultWriterBrandCheckException\");\n            function Rt(e) {\n                return new TypeError(\"Cannot \" + e + \" a stream using a released writer\");\n            }\n            n(Rt, \"defaultWriterLockException\");\n            function tr(e) {\n                e._closedPromise = E((t, r)=>{\n                    e._closedPromise_resolve = t, e._closedPromise_reject = r, e._closedPromiseState = \"pending\";\n                });\n            }\n            n(tr, \"defaultWriterClosedPromiseInitialize\");\n            function Mo(e, t) {\n                tr(e), an(e, t);\n            }\n            n(Mo, \"defaultWriterClosedPromiseInitializeAsRejected\");\n            function Ma(e) {\n                tr(e), Uo(e);\n            }\n            n(Ma, \"defaultWriterClosedPromiseInitializeAsResolved\");\n            function an(e, t) {\n                e._closedPromise_reject !== void 0 && (Q(e._closedPromise), e._closedPromise_reject(t), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0, e._closedPromiseState = \"rejected\");\n            }\n            n(an, \"defaultWriterClosedPromiseReject\");\n            function Ua(e, t) {\n                Mo(e, t);\n            }\n            n(Ua, \"defaultWriterClosedPromiseResetToRejected\");\n            function Uo(e) {\n                e._closedPromise_resolve !== void 0 && (e._closedPromise_resolve(void 0), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0, e._closedPromiseState = \"resolved\");\n            }\n            n(Uo, \"defaultWriterClosedPromiseResolve\");\n            function rr(e) {\n                e._readyPromise = E((t, r)=>{\n                    e._readyPromise_resolve = t, e._readyPromise_reject = r;\n                }), e._readyPromiseState = \"pending\";\n            }\n            n(rr, \"defaultWriterReadyPromiseInitialize\");\n            function sn(e, t) {\n                rr(e), No(e, t);\n            }\n            n(sn, \"defaultWriterReadyPromiseInitializeAsRejected\");\n            function xo(e) {\n                rr(e), ln(e);\n            }\n            n(xo, \"defaultWriterReadyPromiseInitializeAsResolved\");\n            function No(e, t) {\n                e._readyPromise_reject !== void 0 && (Q(e._readyPromise), e._readyPromise_reject(t), e._readyPromise_resolve = void 0, e._readyPromise_reject = void 0, e._readyPromiseState = \"rejected\");\n            }\n            n(No, \"defaultWriterReadyPromiseReject\");\n            function xa(e) {\n                rr(e);\n            }\n            n(xa, \"defaultWriterReadyPromiseReset\");\n            function Na(e, t) {\n                sn(e, t);\n            }\n            n(Na, \"defaultWriterReadyPromiseResetToRejected\");\n            function ln(e) {\n                e._readyPromise_resolve !== void 0 && (e._readyPromise_resolve(void 0), e._readyPromise_resolve = void 0, e._readyPromise_reject = void 0, e._readyPromiseState = \"fulfilled\");\n            }\n            n(ln, \"defaultWriterReadyPromiseResolve\");\n            function Ha() {\n                if (typeof globalThis < \"u\") return globalThis;\n                if (typeof self < \"u\") return self;\n                if (typeof _shared_node_fetch_native_1a4a356d_mjs__WEBPACK_IMPORTED_MODULE_6__.c < \"u\") return _shared_node_fetch_native_1a4a356d_mjs__WEBPACK_IMPORTED_MODULE_6__.c;\n            }\n            n(Ha, \"getGlobals\");\n            const un = Ha();\n            function Va(e) {\n                if (!(typeof e == \"function\" || typeof e == \"object\") || e.name !== \"DOMException\") return !1;\n                try {\n                    return new e, !0;\n                } catch  {\n                    return !1;\n                }\n            }\n            n(Va, \"isDOMExceptionConstructor\");\n            function Qa() {\n                const e = un?.DOMException;\n                return Va(e) ? e : void 0;\n            }\n            n(Qa, \"getFromGlobal\");\n            function Ya() {\n                const e = n(function(r, s) {\n                    this.message = r || \"\", this.name = s || \"Error\", Error.captureStackTrace && Error.captureStackTrace(this, this.constructor);\n                }, \"DOMException\");\n                return h(e, \"DOMException\"), e.prototype = Object.create(Error.prototype), Object.defineProperty(e.prototype, \"constructor\", {\n                    value: e,\n                    writable: !0,\n                    configurable: !0\n                }), e;\n            }\n            n(Ya, \"createPolyfill\");\n            const Ga = Qa() || Ya();\n            function Ho(e, t, r, s, f, c) {\n                const d = Qe(e), m = ko(t);\n                e._disturbed = !0;\n                let R = !1, y = T(void 0);\n                return E((C, P)=>{\n                    let B;\n                    if (c !== void 0) {\n                        if (B = n(()=>{\n                            const S = c.reason !== void 0 ? c.reason : new Ga(\"Aborted\", \"AbortError\"), v = [];\n                            s || v.push(()=>t._state === \"writable\" ? Zt(t, S) : T(void 0)), f || v.push(()=>e._state === \"readable\" ? ie(e, S) : T(void 0)), N(()=>Promise.all(v.map((k)=>k())), !0, S);\n                        }, \"abortAlgorithm\"), c.aborted) {\n                            B();\n                            return;\n                        }\n                        c.addEventListener(\"abort\", B);\n                    }\n                    function ae() {\n                        return E((S, v)=>{\n                            function k(Y) {\n                                Y ? S() : q(nt(), k, v);\n                            }\n                            n(k, \"next\"), k(!1);\n                        });\n                    }\n                    n(ae, \"pipeLoop\");\n                    function nt() {\n                        return R ? T(!0) : q(m._readyPromise, ()=>E((S, v)=>{\n                                mt(d, {\n                                    _chunkSteps: (k)=>{\n                                        y = q(Fo(m, k), void 0, u), S(!1);\n                                    },\n                                    _closeSteps: ()=>S(!0),\n                                    _errorSteps: v\n                                });\n                            }));\n                    }\n                    if (n(nt, \"pipeStep\"), Te(e, d._closedPromise, (S)=>(s ? J(!0, S) : N(()=>Zt(t, S), !0, S), null)), Te(t, m._closedPromise, (S)=>(f ? J(!0, S) : N(()=>ie(e, S), !0, S), null)), x(e, d._closedPromise, ()=>(r ? J() : N(()=>qa(m)), null)), he(t) || t._state === \"closed\") {\n                        const S = new TypeError(\"the destination writable stream closed before all data could be piped to it\");\n                        f ? J(!0, S) : N(()=>ie(e, S), !0, S);\n                    }\n                    Q(ae());\n                    function Oe() {\n                        const S = y;\n                        return q(y, ()=>S !== y ? Oe() : void 0);\n                    }\n                    n(Oe, \"waitForWritesToFinish\");\n                    function Te(S, v, k) {\n                        S._state === \"errored\" ? k(S._storedError) : I(v, k);\n                    }\n                    n(Te, \"isOrBecomesErrored\");\n                    function x(S, v, k) {\n                        S._state === \"closed\" ? k() : V(v, k);\n                    }\n                    n(x, \"isOrBecomesClosed\");\n                    function N(S, v, k) {\n                        if (R) return;\n                        R = !0, t._state === \"writable\" && !he(t) ? V(Oe(), Y) : Y();\n                        function Y() {\n                            return _(S(), ()=>Ce(v, k), (ot)=>Ce(!0, ot)), null;\n                        }\n                        n(Y, \"doTheRest\");\n                    }\n                    n(N, \"shutdownWithAction\");\n                    function J(S, v) {\n                        R || (R = !0, t._state === \"writable\" && !he(t) ? V(Oe(), ()=>Ce(S, v)) : Ce(S, v));\n                    }\n                    n(J, \"shutdown\");\n                    function Ce(S, v) {\n                        return Io(m), _e(d), c !== void 0 && c.removeEventListener(\"abort\", B), S ? P(v) : C(void 0), null;\n                    }\n                    n(Ce, \"finalize\");\n                });\n            }\n            n(Ho, \"ReadableStreamPipeTo\");\n            const Cn = class Cn {\n                constructor(){\n                    throw new TypeError(\"Illegal constructor\");\n                }\n                get desiredSize() {\n                    if (!nr(this)) throw ir(\"desiredSize\");\n                    return fn(this);\n                }\n                close() {\n                    if (!nr(this)) throw ir(\"close\");\n                    if (!Je(this)) throw new TypeError(\"The stream is not in a state that permits close\");\n                    $e(this);\n                }\n                enqueue(t = void 0) {\n                    if (!nr(this)) throw ir(\"enqueue\");\n                    if (!Je(this)) throw new TypeError(\"The stream is not in a state that permits enqueue\");\n                    return Ke(this, t);\n                }\n                error(t = void 0) {\n                    if (!nr(this)) throw ir(\"error\");\n                    oe(this, t);\n                }\n                [Ar](t) {\n                    Be(this);\n                    const r = this._cancelAlgorithm(t);\n                    return or(this), r;\n                }\n                [Br](t) {\n                    const r = this._controlledReadableStream;\n                    if (this._queue.length > 0) {\n                        const s = xr(this);\n                        this._closeRequested && this._queue.length === 0 ? (or(this), Pt(r)) : Tt(this), t._chunkSteps(s);\n                    } else eo(r, t), Tt(this);\n                }\n                [kr]() {}\n            };\n            n(Cn, \"ReadableStreamDefaultController\");\n            let ne = Cn;\n            Object.defineProperties(ne.prototype, {\n                close: {\n                    enumerable: !0\n                },\n                enqueue: {\n                    enumerable: !0\n                },\n                error: {\n                    enumerable: !0\n                },\n                desiredSize: {\n                    enumerable: !0\n                }\n            }), h(ne.prototype.close, \"close\"), h(ne.prototype.enqueue, \"enqueue\"), h(ne.prototype.error, \"error\"), typeof Symbol.toStringTag == \"symbol\" && Object.defineProperty(ne.prototype, Symbol.toStringTag, {\n                value: \"ReadableStreamDefaultController\",\n                configurable: !0\n            });\n            function nr(e) {\n                return !l(e) || !Object.prototype.hasOwnProperty.call(e, \"_controlledReadableStream\") ? !1 : e instanceof ne;\n            }\n            n(nr, \"IsReadableStreamDefaultController\");\n            function Tt(e) {\n                if (!Vo(e)) return;\n                if (e._pulling) {\n                    e._pullAgain = !0;\n                    return;\n                }\n                e._pulling = !0;\n                const r = e._pullAlgorithm();\n                _(r, ()=>(e._pulling = !1, e._pullAgain && (e._pullAgain = !1, Tt(e)), null), (s)=>(oe(e, s), null));\n            }\n            n(Tt, \"ReadableStreamDefaultControllerCallPullIfNeeded\");\n            function Vo(e) {\n                const t = e._controlledReadableStream;\n                return !Je(e) || !e._started ? !1 : !!(qe(t) && Lt(t) > 0 || fn(e) > 0);\n            }\n            n(Vo, \"ReadableStreamDefaultControllerShouldCallPull\");\n            function or(e) {\n                e._pullAlgorithm = void 0, e._cancelAlgorithm = void 0, e._strategySizeAlgorithm = void 0;\n            }\n            n(or, \"ReadableStreamDefaultControllerClearAlgorithms\");\n            function $e(e) {\n                if (!Je(e)) return;\n                const t = e._controlledReadableStream;\n                e._closeRequested = !0, e._queue.length === 0 && (or(e), Pt(t));\n            }\n            n($e, \"ReadableStreamDefaultControllerClose\");\n            function Ke(e, t) {\n                if (!Je(e)) return;\n                const r = e._controlledReadableStream;\n                if (qe(r) && Lt(r) > 0) Lr(r, t, !1);\n                else {\n                    let s;\n                    try {\n                        s = e._strategySizeAlgorithm(t);\n                    } catch (f) {\n                        throw oe(e, f), f;\n                    }\n                    try {\n                        Nr(e, t, s);\n                    } catch (f) {\n                        throw oe(e, f), f;\n                    }\n                }\n                Tt(e);\n            }\n            n(Ke, \"ReadableStreamDefaultControllerEnqueue\");\n            function oe(e, t) {\n                const r = e._controlledReadableStream;\n                r._state === \"readable\" && (Be(e), or(e), Zo(r, t));\n            }\n            n(oe, \"ReadableStreamDefaultControllerError\");\n            function fn(e) {\n                const t = e._controlledReadableStream._state;\n                return t === \"errored\" ? null : t === \"closed\" ? 0 : e._strategyHWM - e._queueTotalSize;\n            }\n            n(fn, \"ReadableStreamDefaultControllerGetDesiredSize\");\n            function Za(e) {\n                return !Vo(e);\n            }\n            n(Za, \"ReadableStreamDefaultControllerHasBackpressure\");\n            function Je(e) {\n                const t = e._controlledReadableStream._state;\n                return !e._closeRequested && t === \"readable\";\n            }\n            n(Je, \"ReadableStreamDefaultControllerCanCloseOrEnqueue\");\n            function Qo(e, t, r, s, f, c, d) {\n                t._controlledReadableStream = e, t._queue = void 0, t._queueTotalSize = void 0, Be(t), t._started = !1, t._closeRequested = !1, t._pullAgain = !1, t._pulling = !1, t._strategySizeAlgorithm = d, t._strategyHWM = c, t._pullAlgorithm = s, t._cancelAlgorithm = f, e._readableStreamController = t;\n                const m = r();\n                _(T(m), ()=>(t._started = !0, Tt(t), null), (R)=>(oe(t, R), null));\n            }\n            n(Qo, \"SetUpReadableStreamDefaultController\");\n            function Ka(e, t, r, s) {\n                const f = Object.create(ne.prototype);\n                let c, d, m;\n                t.start !== void 0 ? c = n(()=>t.start(f), \"startAlgorithm\") : c = n(()=>{}, \"startAlgorithm\"), t.pull !== void 0 ? d = n(()=>t.pull(f), \"pullAlgorithm\") : d = n(()=>T(void 0), \"pullAlgorithm\"), t.cancel !== void 0 ? m = n((R)=>t.cancel(R), \"cancelAlgorithm\") : m = n(()=>T(void 0), \"cancelAlgorithm\"), Qo(e, f, c, d, m, r, s);\n            }\n            n(Ka, \"SetUpReadableStreamDefaultControllerFromUnderlyingSource\");\n            function ir(e) {\n                return new TypeError(`ReadableStreamDefaultController.prototype.${e} can only be used on a ReadableStreamDefaultController`);\n            }\n            n(ir, \"defaultControllerBrandCheckException$1\");\n            function Ja(e, t) {\n                return ze(e._readableStreamController) ? es(e) : Xa(e);\n            }\n            n(Ja, \"ReadableStreamTee\");\n            function Xa(e, t) {\n                const r = Qe(e);\n                let s = !1, f = !1, c = !1, d = !1, m, R, y, C, P;\n                const B = E((x)=>{\n                    P = x;\n                });\n                function ae() {\n                    return s ? (f = !0, T(void 0)) : (s = !0, mt(r, {\n                        _chunkSteps: (N)=>{\n                            ge(()=>{\n                                f = !1;\n                                const J = N, Ce = N;\n                                c || Ke(y._readableStreamController, J), d || Ke(C._readableStreamController, Ce), s = !1, f && ae();\n                            });\n                        },\n                        _closeSteps: ()=>{\n                            s = !1, c || $e(y._readableStreamController), d || $e(C._readableStreamController), (!c || !d) && P(void 0);\n                        },\n                        _errorSteps: ()=>{\n                            s = !1;\n                        }\n                    }), T(void 0));\n                }\n                n(ae, \"pullAlgorithm\");\n                function nt(x) {\n                    if (c = !0, m = x, d) {\n                        const N = yt([\n                            m,\n                            R\n                        ]), J = ie(e, N);\n                        P(J);\n                    }\n                    return B;\n                }\n                n(nt, \"cancel1Algorithm\");\n                function Oe(x) {\n                    if (d = !0, R = x, c) {\n                        const N = yt([\n                            m,\n                            R\n                        ]), J = ie(e, N);\n                        P(J);\n                    }\n                    return B;\n                }\n                n(Oe, \"cancel2Algorithm\");\n                function Te() {}\n                return n(Te, \"startAlgorithm\"), y = Ct(Te, ae, nt), C = Ct(Te, ae, Oe), I(r._closedPromise, (x)=>(oe(y._readableStreamController, x), oe(C._readableStreamController, x), (!c || !d) && P(void 0), null)), [\n                    y,\n                    C\n                ];\n            }\n            n(Xa, \"ReadableStreamDefaultTee\");\n            function es(e) {\n                let t = Qe(e), r = !1, s = !1, f = !1, c = !1, d = !1, m, R, y, C, P;\n                const B = E((S)=>{\n                    P = S;\n                });\n                function ae(S) {\n                    I(S._closedPromise, (v)=>(S !== t || (K(y._readableStreamController, v), K(C._readableStreamController, v), (!c || !d) && P(void 0)), null));\n                }\n                n(ae, \"forwardReaderError\");\n                function nt() {\n                    Fe(t) && (_e(t), t = Qe(e), ae(t)), mt(t, {\n                        _chunkSteps: (v)=>{\n                            ge(()=>{\n                                s = !1, f = !1;\n                                const k = v;\n                                let Y = v;\n                                if (!c && !d) try {\n                                    Y = fo(v);\n                                } catch (ot) {\n                                    K(y._readableStreamController, ot), K(C._readableStreamController, ot), P(ie(e, ot));\n                                    return;\n                                }\n                                c || Nt(y._readableStreamController, k), d || Nt(C._readableStreamController, Y), r = !1, s ? Te() : f && x();\n                            });\n                        },\n                        _closeSteps: ()=>{\n                            r = !1, c || gt(y._readableStreamController), d || gt(C._readableStreamController), y._readableStreamController._pendingPullIntos.length > 0 && Ht(y._readableStreamController, 0), C._readableStreamController._pendingPullIntos.length > 0 && Ht(C._readableStreamController, 0), (!c || !d) && P(void 0);\n                        },\n                        _errorSteps: ()=>{\n                            r = !1;\n                        }\n                    });\n                }\n                n(nt, \"pullWithDefaultReader\");\n                function Oe(S, v) {\n                    Ee(t) && (_e(t), t = Co(e), ae(t));\n                    const k = v ? C : y, Y = v ? y : C;\n                    Eo(t, S, 1, {\n                        _chunkSteps: (it)=>{\n                            ge(()=>{\n                                s = !1, f = !1;\n                                const at = v ? d : c;\n                                if (v ? c : d) at || Vt(k._readableStreamController, it);\n                                else {\n                                    let ui;\n                                    try {\n                                        ui = fo(it);\n                                    } catch (kn) {\n                                        K(k._readableStreamController, kn), K(Y._readableStreamController, kn), P(ie(e, kn));\n                                        return;\n                                    }\n                                    at || Vt(k._readableStreamController, it), Nt(Y._readableStreamController, ui);\n                                }\n                                r = !1, s ? Te() : f && x();\n                            });\n                        },\n                        _closeSteps: (it)=>{\n                            r = !1;\n                            const at = v ? d : c, fr = v ? c : d;\n                            at || gt(k._readableStreamController), fr || gt(Y._readableStreamController), it !== void 0 && (at || Vt(k._readableStreamController, it), !fr && Y._readableStreamController._pendingPullIntos.length > 0 && Ht(Y._readableStreamController, 0)), (!at || !fr) && P(void 0);\n                        },\n                        _errorSteps: ()=>{\n                            r = !1;\n                        }\n                    });\n                }\n                n(Oe, \"pullWithBYOBReader\");\n                function Te() {\n                    if (r) return s = !0, T(void 0);\n                    r = !0;\n                    const S = Gr(y._readableStreamController);\n                    return S === null ? nt() : Oe(S._view, !1), T(void 0);\n                }\n                n(Te, \"pull1Algorithm\");\n                function x() {\n                    if (r) return f = !0, T(void 0);\n                    r = !0;\n                    const S = Gr(C._readableStreamController);\n                    return S === null ? nt() : Oe(S._view, !0), T(void 0);\n                }\n                n(x, \"pull2Algorithm\");\n                function N(S) {\n                    if (c = !0, m = S, d) {\n                        const v = yt([\n                            m,\n                            R\n                        ]), k = ie(e, v);\n                        P(k);\n                    }\n                    return B;\n                }\n                n(N, \"cancel1Algorithm\");\n                function J(S) {\n                    if (d = !0, R = S, c) {\n                        const v = yt([\n                            m,\n                            R\n                        ]), k = ie(e, v);\n                        P(k);\n                    }\n                    return B;\n                }\n                n(J, \"cancel2Algorithm\");\n                function Ce() {}\n                return n(Ce, \"startAlgorithm\"), y = Go(Ce, Te, N), C = Go(Ce, x, J), ae(t), [\n                    y,\n                    C\n                ];\n            }\n            n(es, \"ReadableByteStreamTee\");\n            function ts(e) {\n                return l(e) && typeof e.getReader < \"u\";\n            }\n            n(ts, \"isReadableStreamLike\");\n            function rs(e) {\n                return ts(e) ? os(e.getReader()) : ns(e);\n            }\n            n(rs, \"ReadableStreamFrom\");\n            function ns(e) {\n                let t;\n                const r = uo(e, \"async\"), s = u;\n                function f() {\n                    let d;\n                    try {\n                        d = Yi(r);\n                    } catch (R) {\n                        return b(R);\n                    }\n                    const m = T(d);\n                    return F(m, (R)=>{\n                        if (!l(R)) throw new TypeError(\"The promise returned by the iterator.next() method must fulfill with an object\");\n                        if (Gi(R)) $e(t._readableStreamController);\n                        else {\n                            const C = Zi(R);\n                            Ke(t._readableStreamController, C);\n                        }\n                    });\n                }\n                n(f, \"pullAlgorithm\");\n                function c(d) {\n                    const m = r.iterator;\n                    let R;\n                    try {\n                        R = Mt(m, \"return\");\n                    } catch (P) {\n                        return b(P);\n                    }\n                    if (R === void 0) return T(void 0);\n                    let y;\n                    try {\n                        y = z(R, m, [\n                            d\n                        ]);\n                    } catch (P) {\n                        return b(P);\n                    }\n                    const C = T(y);\n                    return F(C, (P)=>{\n                        if (!l(P)) throw new TypeError(\"The promise returned by the iterator.return() method must fulfill with an object\");\n                    });\n                }\n                return n(c, \"cancelAlgorithm\"), t = Ct(s, f, c, 0), t;\n            }\n            n(ns, \"ReadableStreamFromIterable\");\n            function os(e) {\n                let t;\n                const r = u;\n                function s() {\n                    let c;\n                    try {\n                        c = e.read();\n                    } catch (d) {\n                        return b(d);\n                    }\n                    return F(c, (d)=>{\n                        if (!l(d)) throw new TypeError(\"The promise returned by the reader.read() method must fulfill with an object\");\n                        if (d.done) $e(t._readableStreamController);\n                        else {\n                            const m = d.value;\n                            Ke(t._readableStreamController, m);\n                        }\n                    });\n                }\n                n(s, \"pullAlgorithm\");\n                function f(c) {\n                    try {\n                        return T(e.cancel(c));\n                    } catch (d) {\n                        return b(d);\n                    }\n                }\n                return n(f, \"cancelAlgorithm\"), t = Ct(r, s, f, 0), t;\n            }\n            n(os, \"ReadableStreamFromDefaultReader\");\n            function is(e, t) {\n                ue(e, t);\n                const r = e, s = r?.autoAllocateChunkSize, f = r?.cancel, c = r?.pull, d = r?.start, m = r?.type;\n                return {\n                    autoAllocateChunkSize: s === void 0 ? void 0 : Fr(s, `${t} has member 'autoAllocateChunkSize' that`),\n                    cancel: f === void 0 ? void 0 : as(f, r, `${t} has member 'cancel' that`),\n                    pull: c === void 0 ? void 0 : ss(c, r, `${t} has member 'pull' that`),\n                    start: d === void 0 ? void 0 : ls(d, r, `${t} has member 'start' that`),\n                    type: m === void 0 ? void 0 : us(m, `${t} has member 'type' that`)\n                };\n            }\n            n(is, \"convertUnderlyingDefaultOrByteSource\");\n            function as(e, t, r) {\n                return Z(e, r), (s)=>j(e, t, [\n                        s\n                    ]);\n            }\n            n(as, \"convertUnderlyingSourceCancelCallback\");\n            function ss(e, t, r) {\n                return Z(e, r), (s)=>j(e, t, [\n                        s\n                    ]);\n            }\n            n(ss, \"convertUnderlyingSourcePullCallback\");\n            function ls(e, t, r) {\n                return Z(e, r), (s)=>z(e, t, [\n                        s\n                    ]);\n            }\n            n(ls, \"convertUnderlyingSourceStartCallback\");\n            function us(e, t) {\n                if (e = `${e}`, e !== \"bytes\") throw new TypeError(`${t} '${e}' is not a valid enumeration value for ReadableStreamType`);\n                return e;\n            }\n            n(us, \"convertReadableStreamType\");\n            function fs(e, t) {\n                return ue(e, t), {\n                    preventCancel: !!e?.preventCancel\n                };\n            }\n            n(fs, \"convertIteratorOptions\");\n            function Yo(e, t) {\n                ue(e, t);\n                const r = e?.preventAbort, s = e?.preventCancel, f = e?.preventClose, c = e?.signal;\n                return c !== void 0 && cs(c, `${t} has member 'signal' that`), {\n                    preventAbort: !!r,\n                    preventCancel: !!s,\n                    preventClose: !!f,\n                    signal: c\n                };\n            }\n            n(Yo, \"convertPipeOptions\");\n            function cs(e, t) {\n                if (!_a(e)) throw new TypeError(`${t} is not an AbortSignal.`);\n            }\n            n(cs, \"assertAbortSignal\");\n            function ds(e, t) {\n                ue(e, t);\n                const r = e?.readable;\n                zr(r, \"readable\", \"ReadableWritablePair\"), jr(r, `${t} has member 'readable' that`);\n                const s = e?.writable;\n                return zr(s, \"writable\", \"ReadableWritablePair\"), Bo(s, `${t} has member 'writable' that`), {\n                    readable: r,\n                    writable: s\n                };\n            }\n            n(ds, \"convertReadableWritablePair\");\n            const Pn = class Pn {\n                constructor(t = {}, r = {}){\n                    t === void 0 ? t = null : Jn(t, \"First parameter\");\n                    const s = Gt(r, \"Second parameter\"), f = is(t, \"First parameter\");\n                    if (cn(this), f.type === \"bytes\") {\n                        if (s.size !== void 0) throw new RangeError(\"The strategy for a byte stream cannot have a size function\");\n                        const c = St(s, 0);\n                        aa(this, f, c);\n                    } else {\n                        const c = Yt(s), d = St(s, 1);\n                        Ka(this, f, d, c);\n                    }\n                }\n                get locked() {\n                    if (!We(this)) throw De(\"locked\");\n                    return qe(this);\n                }\n                cancel(t = void 0) {\n                    return We(this) ? qe(this) ? b(new TypeError(\"Cannot cancel a stream that already has a reader\")) : ie(this, t) : b(De(\"cancel\"));\n                }\n                getReader(t = void 0) {\n                    if (!We(this)) throw De(\"getReader\");\n                    return la(t, \"First parameter\").mode === void 0 ? Qe(this) : Co(this);\n                }\n                pipeThrough(t, r = {}) {\n                    if (!We(this)) throw De(\"pipeThrough\");\n                    Se(t, 1, \"pipeThrough\");\n                    const s = ds(t, \"First parameter\"), f = Yo(r, \"Second parameter\");\n                    if (qe(this)) throw new TypeError(\"ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream\");\n                    if (Ze(s.writable)) throw new TypeError(\"ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream\");\n                    const c = Ho(this, s.writable, f.preventClose, f.preventAbort, f.preventCancel, f.signal);\n                    return Q(c), s.readable;\n                }\n                pipeTo(t, r = {}) {\n                    if (!We(this)) return b(De(\"pipeTo\"));\n                    if (t === void 0) return b(\"Parameter 1 is required in 'pipeTo'.\");\n                    if (!Ge(t)) return b(new TypeError(\"ReadableStream.prototype.pipeTo's first argument must be a WritableStream\"));\n                    let s;\n                    try {\n                        s = Yo(r, \"Second parameter\");\n                    } catch (f) {\n                        return b(f);\n                    }\n                    return qe(this) ? b(new TypeError(\"ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream\")) : Ze(t) ? b(new TypeError(\"ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream\")) : Ho(this, t, s.preventClose, s.preventAbort, s.preventCancel, s.signal);\n                }\n                tee() {\n                    if (!We(this)) throw De(\"tee\");\n                    const t = Ja(this);\n                    return yt(t);\n                }\n                values(t = void 0) {\n                    if (!We(this)) throw De(\"values\");\n                    const r = fs(t, \"First parameter\");\n                    return Vi(this, r.preventCancel);\n                }\n                [Ur](t) {\n                    return this.values(t);\n                }\n                static from(t) {\n                    return rs(t);\n                }\n            };\n            n(Pn, \"ReadableStream\");\n            let L = Pn;\n            Object.defineProperties(L, {\n                from: {\n                    enumerable: !0\n                }\n            }), Object.defineProperties(L.prototype, {\n                cancel: {\n                    enumerable: !0\n                },\n                getReader: {\n                    enumerable: !0\n                },\n                pipeThrough: {\n                    enumerable: !0\n                },\n                pipeTo: {\n                    enumerable: !0\n                },\n                tee: {\n                    enumerable: !0\n                },\n                values: {\n                    enumerable: !0\n                },\n                locked: {\n                    enumerable: !0\n                }\n            }), h(L.from, \"from\"), h(L.prototype.cancel, \"cancel\"), h(L.prototype.getReader, \"getReader\"), h(L.prototype.pipeThrough, \"pipeThrough\"), h(L.prototype.pipeTo, \"pipeTo\"), h(L.prototype.tee, \"tee\"), h(L.prototype.values, \"values\"), typeof Symbol.toStringTag == \"symbol\" && Object.defineProperty(L.prototype, Symbol.toStringTag, {\n                value: \"ReadableStream\",\n                configurable: !0\n            }), Object.defineProperty(L.prototype, Ur, {\n                value: L.prototype.values,\n                writable: !0,\n                configurable: !0\n            });\n            function Ct(e, t, r, s = 1, f = ()=>1) {\n                const c = Object.create(L.prototype);\n                cn(c);\n                const d = Object.create(ne.prototype);\n                return Qo(c, d, e, t, r, s, f), c;\n            }\n            n(Ct, \"CreateReadableStream\");\n            function Go(e, t, r) {\n                const s = Object.create(L.prototype);\n                cn(s);\n                const f = Object.create(te.prototype);\n                return To(s, f, e, t, r, 0, void 0), s;\n            }\n            n(Go, \"CreateReadableByteStream\");\n            function cn(e) {\n                e._state = \"readable\", e._reader = void 0, e._storedError = void 0, e._disturbed = !1;\n            }\n            n(cn, \"InitializeReadableStream\");\n            function We(e) {\n                return !l(e) || !Object.prototype.hasOwnProperty.call(e, \"_readableStreamController\") ? !1 : e instanceof L;\n            }\n            n(We, \"IsReadableStream\");\n            function qe(e) {\n                return e._reader !== void 0;\n            }\n            n(qe, \"IsReadableStreamLocked\");\n            function ie(e, t) {\n                if (e._disturbed = !0, e._state === \"closed\") return T(void 0);\n                if (e._state === \"errored\") return b(e._storedError);\n                Pt(e);\n                const r = e._reader;\n                if (r !== void 0 && Fe(r)) {\n                    const f = r._readIntoRequests;\n                    r._readIntoRequests = new D, f.forEach((c)=>{\n                        c._closeSteps(void 0);\n                    });\n                }\n                const s = e._readableStreamController[Ar](t);\n                return F(s, u);\n            }\n            n(ie, \"ReadableStreamCancel\");\n            function Pt(e) {\n                e._state = \"closed\";\n                const t = e._reader;\n                if (t !== void 0 && (Zn(t), Ee(t))) {\n                    const r = t._readRequests;\n                    t._readRequests = new D, r.forEach((s)=>{\n                        s._closeSteps();\n                    });\n                }\n            }\n            n(Pt, \"ReadableStreamClose\");\n            function Zo(e, t) {\n                e._state = \"errored\", e._storedError = t;\n                const r = e._reader;\n                r !== void 0 && (Or(r, t), Ee(r) ? ro(r, t) : Ao(r, t));\n            }\n            n(Zo, \"ReadableStreamError\");\n            function De(e) {\n                return new TypeError(`ReadableStream.prototype.${e} can only be used on a ReadableStream`);\n            }\n            n(De, \"streamBrandCheckException$1\");\n            function Ko(e, t) {\n                ue(e, t);\n                const r = e?.highWaterMark;\n                return zr(r, \"highWaterMark\", \"QueuingStrategyInit\"), {\n                    highWaterMark: Ir(r)\n                };\n            }\n            n(Ko, \"convertQueuingStrategyInit\");\n            const Jo = n((e)=>e.byteLength, \"byteLengthSizeFunction\");\n            h(Jo, \"size\");\n            const vn = class vn {\n                constructor(t){\n                    Se(t, 1, \"ByteLengthQueuingStrategy\"), t = Ko(t, \"First parameter\"), this._byteLengthQueuingStrategyHighWaterMark = t.highWaterMark;\n                }\n                get highWaterMark() {\n                    if (!ei(this)) throw Xo(\"highWaterMark\");\n                    return this._byteLengthQueuingStrategyHighWaterMark;\n                }\n                get size() {\n                    if (!ei(this)) throw Xo(\"size\");\n                    return Jo;\n                }\n            };\n            n(vn, \"ByteLengthQueuingStrategy\");\n            let Xe = vn;\n            Object.defineProperties(Xe.prototype, {\n                highWaterMark: {\n                    enumerable: !0\n                },\n                size: {\n                    enumerable: !0\n                }\n            }), typeof Symbol.toStringTag == \"symbol\" && Object.defineProperty(Xe.prototype, Symbol.toStringTag, {\n                value: \"ByteLengthQueuingStrategy\",\n                configurable: !0\n            });\n            function Xo(e) {\n                return new TypeError(`ByteLengthQueuingStrategy.prototype.${e} can only be used on a ByteLengthQueuingStrategy`);\n            }\n            n(Xo, \"byteLengthBrandCheckException\");\n            function ei(e) {\n                return !l(e) || !Object.prototype.hasOwnProperty.call(e, \"_byteLengthQueuingStrategyHighWaterMark\") ? !1 : e instanceof Xe;\n            }\n            n(ei, \"IsByteLengthQueuingStrategy\");\n            const ti = n(()=>1, \"countSizeFunction\");\n            h(ti, \"size\");\n            const En = class En {\n                constructor(t){\n                    Se(t, 1, \"CountQueuingStrategy\"), t = Ko(t, \"First parameter\"), this._countQueuingStrategyHighWaterMark = t.highWaterMark;\n                }\n                get highWaterMark() {\n                    if (!ni(this)) throw ri(\"highWaterMark\");\n                    return this._countQueuingStrategyHighWaterMark;\n                }\n                get size() {\n                    if (!ni(this)) throw ri(\"size\");\n                    return ti;\n                }\n            };\n            n(En, \"CountQueuingStrategy\");\n            let et = En;\n            Object.defineProperties(et.prototype, {\n                highWaterMark: {\n                    enumerable: !0\n                },\n                size: {\n                    enumerable: !0\n                }\n            }), typeof Symbol.toStringTag == \"symbol\" && Object.defineProperty(et.prototype, Symbol.toStringTag, {\n                value: \"CountQueuingStrategy\",\n                configurable: !0\n            });\n            function ri(e) {\n                return new TypeError(`CountQueuingStrategy.prototype.${e} can only be used on a CountQueuingStrategy`);\n            }\n            n(ri, \"countBrandCheckException\");\n            function ni(e) {\n                return !l(e) || !Object.prototype.hasOwnProperty.call(e, \"_countQueuingStrategyHighWaterMark\") ? !1 : e instanceof et;\n            }\n            n(ni, \"IsCountQueuingStrategy\");\n            function hs(e, t) {\n                ue(e, t);\n                const r = e?.cancel, s = e?.flush, f = e?.readableType, c = e?.start, d = e?.transform, m = e?.writableType;\n                return {\n                    cancel: r === void 0 ? void 0 : ys(r, e, `${t} has member 'cancel' that`),\n                    flush: s === void 0 ? void 0 : ps(s, e, `${t} has member 'flush' that`),\n                    readableType: f,\n                    start: c === void 0 ? void 0 : bs(c, e, `${t} has member 'start' that`),\n                    transform: d === void 0 ? void 0 : ms(d, e, `${t} has member 'transform' that`),\n                    writableType: m\n                };\n            }\n            n(hs, \"convertTransformer\");\n            function ps(e, t, r) {\n                return Z(e, r), (s)=>j(e, t, [\n                        s\n                    ]);\n            }\n            n(ps, \"convertTransformerFlushCallback\");\n            function bs(e, t, r) {\n                return Z(e, r), (s)=>z(e, t, [\n                        s\n                    ]);\n            }\n            n(bs, \"convertTransformerStartCallback\");\n            function ms(e, t, r) {\n                return Z(e, r), (s, f)=>j(e, t, [\n                        s,\n                        f\n                    ]);\n            }\n            n(ms, \"convertTransformerTransformCallback\");\n            function ys(e, t, r) {\n                return Z(e, r), (s)=>j(e, t, [\n                        s\n                    ]);\n            }\n            n(ys, \"convertTransformerCancelCallback\");\n            const An = class An {\n                constructor(t = {}, r = {}, s = {}){\n                    t === void 0 && (t = null);\n                    const f = Gt(r, \"Second parameter\"), c = Gt(s, \"Third parameter\"), d = hs(t, \"First parameter\");\n                    if (d.readableType !== void 0) throw new RangeError(\"Invalid readableType specified\");\n                    if (d.writableType !== void 0) throw new RangeError(\"Invalid writableType specified\");\n                    const m = St(c, 0), R = Yt(c), y = St(f, 1), C = Yt(f);\n                    let P;\n                    const B = E((ae)=>{\n                        P = ae;\n                    });\n                    gs(this, B, y, C, m, R), Ss(this, d), d.start !== void 0 ? P(d.start(this._transformStreamController)) : P(void 0);\n                }\n                get readable() {\n                    if (!oi(this)) throw li(\"readable\");\n                    return this._readable;\n                }\n                get writable() {\n                    if (!oi(this)) throw li(\"writable\");\n                    return this._writable;\n                }\n            };\n            n(An, \"TransformStream\");\n            let tt = An;\n            Object.defineProperties(tt.prototype, {\n                readable: {\n                    enumerable: !0\n                },\n                writable: {\n                    enumerable: !0\n                }\n            }), typeof Symbol.toStringTag == \"symbol\" && Object.defineProperty(tt.prototype, Symbol.toStringTag, {\n                value: \"TransformStream\",\n                configurable: !0\n            });\n            function gs(e, t, r, s, f, c) {\n                function d() {\n                    return t;\n                }\n                n(d, \"startAlgorithm\");\n                function m(B) {\n                    return Ts(e, B);\n                }\n                n(m, \"writeAlgorithm\");\n                function R(B) {\n                    return Cs(e, B);\n                }\n                n(R, \"abortAlgorithm\");\n                function y() {\n                    return Ps(e);\n                }\n                n(y, \"closeAlgorithm\"), e._writable = Ra(d, m, y, R, r, s);\n                function C() {\n                    return vs(e);\n                }\n                n(C, \"pullAlgorithm\");\n                function P(B) {\n                    return Es(e, B);\n                }\n                n(P, \"cancelAlgorithm\"), e._readable = Ct(d, C, P, f, c), e._backpressure = void 0, e._backpressureChangePromise = void 0, e._backpressureChangePromise_resolve = void 0, ar(e, !0), e._transformStreamController = void 0;\n            }\n            n(gs, \"InitializeTransformStream\");\n            function oi(e) {\n                return !l(e) || !Object.prototype.hasOwnProperty.call(e, \"_transformStreamController\") ? !1 : e instanceof tt;\n            }\n            n(oi, \"IsTransformStream\");\n            function ii(e, t) {\n                oe(e._readable._readableStreamController, t), dn(e, t);\n            }\n            n(ii, \"TransformStreamError\");\n            function dn(e, t) {\n                lr(e._transformStreamController), wt(e._writable._writableStreamController, t), hn(e);\n            }\n            n(dn, \"TransformStreamErrorWritableAndUnblockWrite\");\n            function hn(e) {\n                e._backpressure && ar(e, !1);\n            }\n            n(hn, \"TransformStreamUnblockWrite\");\n            function ar(e, t) {\n                e._backpressureChangePromise !== void 0 && e._backpressureChangePromise_resolve(), e._backpressureChangePromise = E((r)=>{\n                    e._backpressureChangePromise_resolve = r;\n                }), e._backpressure = t;\n            }\n            n(ar, \"TransformStreamSetBackpressure\");\n            const Bn = class Bn {\n                constructor(){\n                    throw new TypeError(\"Illegal constructor\");\n                }\n                get desiredSize() {\n                    if (!sr(this)) throw ur(\"desiredSize\");\n                    const t = this._controlledTransformStream._readable._readableStreamController;\n                    return fn(t);\n                }\n                enqueue(t = void 0) {\n                    if (!sr(this)) throw ur(\"enqueue\");\n                    ai(this, t);\n                }\n                error(t = void 0) {\n                    if (!sr(this)) throw ur(\"error\");\n                    ws(this, t);\n                }\n                terminate() {\n                    if (!sr(this)) throw ur(\"terminate\");\n                    Rs(this);\n                }\n            };\n            n(Bn, \"TransformStreamDefaultController\");\n            let pe = Bn;\n            Object.defineProperties(pe.prototype, {\n                enqueue: {\n                    enumerable: !0\n                },\n                error: {\n                    enumerable: !0\n                },\n                terminate: {\n                    enumerable: !0\n                },\n                desiredSize: {\n                    enumerable: !0\n                }\n            }), h(pe.prototype.enqueue, \"enqueue\"), h(pe.prototype.error, \"error\"), h(pe.prototype.terminate, \"terminate\"), typeof Symbol.toStringTag == \"symbol\" && Object.defineProperty(pe.prototype, Symbol.toStringTag, {\n                value: \"TransformStreamDefaultController\",\n                configurable: !0\n            });\n            function sr(e) {\n                return !l(e) || !Object.prototype.hasOwnProperty.call(e, \"_controlledTransformStream\") ? !1 : e instanceof pe;\n            }\n            n(sr, \"IsTransformStreamDefaultController\");\n            function _s(e, t, r, s, f) {\n                t._controlledTransformStream = e, e._transformStreamController = t, t._transformAlgorithm = r, t._flushAlgorithm = s, t._cancelAlgorithm = f, t._finishPromise = void 0, t._finishPromise_resolve = void 0, t._finishPromise_reject = void 0;\n            }\n            n(_s, \"SetUpTransformStreamDefaultController\");\n            function Ss(e, t) {\n                const r = Object.create(pe.prototype);\n                let s, f, c;\n                t.transform !== void 0 ? s = n((d)=>t.transform(d, r), \"transformAlgorithm\") : s = n((d)=>{\n                    try {\n                        return ai(r, d), T(void 0);\n                    } catch (m) {\n                        return b(m);\n                    }\n                }, \"transformAlgorithm\"), t.flush !== void 0 ? f = n(()=>t.flush(r), \"flushAlgorithm\") : f = n(()=>T(void 0), \"flushAlgorithm\"), t.cancel !== void 0 ? c = n((d)=>t.cancel(d), \"cancelAlgorithm\") : c = n(()=>T(void 0), \"cancelAlgorithm\"), _s(e, r, s, f, c);\n            }\n            n(Ss, \"SetUpTransformStreamDefaultControllerFromTransformer\");\n            function lr(e) {\n                e._transformAlgorithm = void 0, e._flushAlgorithm = void 0, e._cancelAlgorithm = void 0;\n            }\n            n(lr, \"TransformStreamDefaultControllerClearAlgorithms\");\n            function ai(e, t) {\n                const r = e._controlledTransformStream, s = r._readable._readableStreamController;\n                if (!Je(s)) throw new TypeError(\"Readable side is not in a state that permits enqueue\");\n                try {\n                    Ke(s, t);\n                } catch (c) {\n                    throw dn(r, c), r._readable._storedError;\n                }\n                Za(s) !== r._backpressure && ar(r, !0);\n            }\n            n(ai, \"TransformStreamDefaultControllerEnqueue\");\n            function ws(e, t) {\n                ii(e._controlledTransformStream, t);\n            }\n            n(ws, \"TransformStreamDefaultControllerError\");\n            function si(e, t) {\n                const r = e._transformAlgorithm(t);\n                return F(r, void 0, (s)=>{\n                    throw ii(e._controlledTransformStream, s), s;\n                });\n            }\n            n(si, \"TransformStreamDefaultControllerPerformTransform\");\n            function Rs(e) {\n                const t = e._controlledTransformStream, r = t._readable._readableStreamController;\n                $e(r);\n                const s = new TypeError(\"TransformStream terminated\");\n                dn(t, s);\n            }\n            n(Rs, \"TransformStreamDefaultControllerTerminate\");\n            function Ts(e, t) {\n                const r = e._transformStreamController;\n                if (e._backpressure) {\n                    const s = e._backpressureChangePromise;\n                    return F(s, ()=>{\n                        const f = e._writable;\n                        if (f._state === \"erroring\") throw f._storedError;\n                        return si(r, t);\n                    });\n                }\n                return si(r, t);\n            }\n            n(Ts, \"TransformStreamDefaultSinkWriteAlgorithm\");\n            function Cs(e, t) {\n                const r = e._transformStreamController;\n                if (r._finishPromise !== void 0) return r._finishPromise;\n                const s = e._readable;\n                r._finishPromise = E((c, d)=>{\n                    r._finishPromise_resolve = c, r._finishPromise_reject = d;\n                });\n                const f = r._cancelAlgorithm(t);\n                return lr(r), _(f, ()=>(s._state === \"errored\" ? rt(r, s._storedError) : (oe(s._readableStreamController, t), pn(r)), null), (c)=>(oe(s._readableStreamController, c), rt(r, c), null)), r._finishPromise;\n            }\n            n(Cs, \"TransformStreamDefaultSinkAbortAlgorithm\");\n            function Ps(e) {\n                const t = e._transformStreamController;\n                if (t._finishPromise !== void 0) return t._finishPromise;\n                const r = e._readable;\n                t._finishPromise = E((f, c)=>{\n                    t._finishPromise_resolve = f, t._finishPromise_reject = c;\n                });\n                const s = t._flushAlgorithm();\n                return lr(t), _(s, ()=>(r._state === \"errored\" ? rt(t, r._storedError) : ($e(r._readableStreamController), pn(t)), null), (f)=>(oe(r._readableStreamController, f), rt(t, f), null)), t._finishPromise;\n            }\n            n(Ps, \"TransformStreamDefaultSinkCloseAlgorithm\");\n            function vs(e) {\n                return ar(e, !1), e._backpressureChangePromise;\n            }\n            n(vs, \"TransformStreamDefaultSourcePullAlgorithm\");\n            function Es(e, t) {\n                const r = e._transformStreamController;\n                if (r._finishPromise !== void 0) return r._finishPromise;\n                const s = e._writable;\n                r._finishPromise = E((c, d)=>{\n                    r._finishPromise_resolve = c, r._finishPromise_reject = d;\n                });\n                const f = r._cancelAlgorithm(t);\n                return lr(r), _(f, ()=>(s._state === \"errored\" ? rt(r, s._storedError) : (wt(s._writableStreamController, t), hn(e), pn(r)), null), (c)=>(wt(s._writableStreamController, c), hn(e), rt(r, c), null)), r._finishPromise;\n            }\n            n(Es, \"TransformStreamDefaultSourceCancelAlgorithm\");\n            function ur(e) {\n                return new TypeError(`TransformStreamDefaultController.prototype.${e} can only be used on a TransformStreamDefaultController`);\n            }\n            n(ur, \"defaultControllerBrandCheckException\");\n            function pn(e) {\n                e._finishPromise_resolve !== void 0 && (e._finishPromise_resolve(), e._finishPromise_resolve = void 0, e._finishPromise_reject = void 0);\n            }\n            n(pn, \"defaultControllerFinishPromiseResolve\");\n            function rt(e, t) {\n                e._finishPromise_reject !== void 0 && (Q(e._finishPromise), e._finishPromise_reject(t), e._finishPromise_resolve = void 0, e._finishPromise_reject = void 0);\n            }\n            n(rt, \"defaultControllerFinishPromiseReject\");\n            function li(e) {\n                return new TypeError(`TransformStream.prototype.${e} can only be used on a TransformStream`);\n            }\n            n(li, \"streamBrandCheckException\"), a.ByteLengthQueuingStrategy = Xe, a.CountQueuingStrategy = et, a.ReadableByteStreamController = te, a.ReadableStream = L, a.ReadableStreamBYOBReader = ce, a.ReadableStreamBYOBRequest = Re, a.ReadableStreamDefaultController = ne, a.ReadableStreamDefaultReader = fe, a.TransformStream = tt, a.TransformStreamDefaultController = pe, a.WritableStream = de, a.WritableStreamDefaultController = ke, a.WritableStreamDefaultWriter = re;\n        });\n    }(pr, pr.exports)), pr.exports;\n}\nn(Ls, \"requirePonyfill_es2018\");\nconst $s = 65536;\nif (!globalThis.ReadableStream) try {\n    const i1 = require(\"node:process\"), { emitWarning: o } = i1;\n    try {\n        i1.emitWarning = ()=>{}, Object.assign(globalThis, require(\"node:stream/web\")), i1.emitWarning = o;\n    } catch (a) {\n        throw i1.emitWarning = o, a;\n    }\n} catch  {\n    Object.assign(globalThis, Ls());\n}\ntry {\n    const { Blob: i1 } = require(\"buffer\");\n    i1 && !i1.prototype.stream && (i1.prototype.stream = n(function(a) {\n        let u = 0;\n        const l = this;\n        return new ReadableStream({\n            type: \"bytes\",\n            async pull (p) {\n                const g = await l.slice(u, Math.min(l.size, u + $s)).arrayBuffer();\n                u += g.byteLength, p.enqueue(new Uint8Array(g)), u === l.size && p.close();\n            }\n        });\n    }, \"name\"));\n} catch  {} /*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */ \nconst hi = 65536;\nasync function* qn(i1, o = !0) {\n    for (const a of i1)if (\"stream\" in a) yield* a.stream();\n    else if (ArrayBuffer.isView(a)) if (o) {\n        let u = a.byteOffset;\n        const l = a.byteOffset + a.byteLength;\n        for(; u !== l;){\n            const p = Math.min(l - u, hi), h = a.buffer.slice(u, u + p);\n            u += h.byteLength, yield new Uint8Array(h);\n        }\n    } else yield a;\n    else {\n        let u = 0, l = a;\n        for(; u !== l.size;){\n            const h = await l.slice(u, Math.min(l.size, u + hi)).arrayBuffer();\n            u += h.byteLength, yield new Uint8Array(h);\n        }\n    }\n}\nn(qn, \"toIterator\");\nconst pi = (Ve = class {\n    constructor(o = [], a = {}){\n        be(this, ve, []);\n        be(this, kt, \"\");\n        be(this, bt, 0);\n        be(this, Cr, \"transparent\");\n        if (typeof o != \"object\" || o === null) throw new TypeError(\"Failed to construct 'Blob': The provided value cannot be converted to a sequence.\");\n        if (typeof o[Symbol.iterator] != \"function\") throw new TypeError(\"Failed to construct 'Blob': The object must have a callable @@iterator property.\");\n        if (typeof a != \"object\" && typeof a != \"function\") throw new TypeError(\"Failed to construct 'Blob': parameter 2 cannot convert to dictionary.\");\n        a === null && (a = {});\n        const u = new TextEncoder;\n        for (const p of o){\n            let h;\n            ArrayBuffer.isView(p) ? h = new Uint8Array(p.buffer.slice(p.byteOffset, p.byteOffset + p.byteLength)) : p instanceof ArrayBuffer ? h = new Uint8Array(p.slice(0)) : p instanceof Ve ? h = p : h = u.encode(`${p}`), X(this, bt, O(this, bt) + (ArrayBuffer.isView(h) ? h.byteLength : h.size)), O(this, ve).push(h);\n        }\n        X(this, Cr, `${a.endings === void 0 ? \"transparent\" : a.endings}`);\n        const l = a.type === void 0 ? \"\" : String(a.type);\n        X(this, kt, /^[\\x20-\\x7E]*$/.test(l) ? l : \"\");\n    }\n    get size() {\n        return O(this, bt);\n    }\n    get type() {\n        return O(this, kt);\n    }\n    async text() {\n        const o = new TextDecoder;\n        let a = \"\";\n        for await (const u of qn(O(this, ve), !1))a += o.decode(u, {\n            stream: !0\n        });\n        return a += o.decode(), a;\n    }\n    async arrayBuffer() {\n        const o = new Uint8Array(this.size);\n        let a = 0;\n        for await (const u of qn(O(this, ve), !1))o.set(u, a), a += u.length;\n        return o.buffer;\n    }\n    stream() {\n        const o = qn(O(this, ve), !0);\n        return new globalThis.ReadableStream({\n            type: \"bytes\",\n            async pull (a) {\n                const u = await o.next();\n                u.done ? a.close() : a.enqueue(u.value);\n            },\n            async cancel () {\n                await o.return();\n            }\n        });\n    }\n    slice(o = 0, a = this.size, u = \"\") {\n        const { size: l } = this;\n        let p = o < 0 ? Math.max(l + o, 0) : Math.min(o, l), h = a < 0 ? Math.max(l + a, 0) : Math.min(a, l);\n        const g = Math.max(h - p, 0), A = O(this, ve), w = [];\n        let E = 0;\n        for (const b of A){\n            if (E >= g) break;\n            const q = ArrayBuffer.isView(b) ? b.byteLength : b.size;\n            if (p && q <= p) p -= q, h -= q;\n            else {\n                let _;\n                ArrayBuffer.isView(b) ? (_ = b.subarray(p, Math.min(q, h)), E += _.byteLength) : (_ = b.slice(p, Math.min(q, h)), E += _.size), h -= q, w.push(_), p = 0;\n            }\n        }\n        const T = new Ve([], {\n            type: String(u).toLowerCase()\n        });\n        return X(T, bt, g), X(T, ve, w), T;\n    }\n    get [Symbol.toStringTag]() {\n        return \"Blob\";\n    }\n    static [Symbol.hasInstance](o) {\n        return o && typeof o == \"object\" && typeof o.constructor == \"function\" && (typeof o.stream == \"function\" || typeof o.arrayBuffer == \"function\") && /^(Blob|File)$/.test(o[Symbol.toStringTag]);\n    }\n}, ve = new WeakMap, kt = new WeakMap, bt = new WeakMap, Cr = new WeakMap, n(Ve, \"Blob\"), Ve);\nObject.defineProperties(pi.prototype, {\n    size: {\n        enumerable: !0\n    },\n    type: {\n        enumerable: !0\n    },\n    slice: {\n        enumerable: !0\n    }\n});\nconst Ds = pi, ut = Ds, Ms = (Ot = class extends ut {\n    constructor(a, u, l = {}){\n        if (arguments.length < 2) throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`);\n        super(a, l);\n        be(this, Wt, 0);\n        be(this, qt, \"\");\n        l === null && (l = {});\n        const p = l.lastModified === void 0 ? Date.now() : Number(l.lastModified);\n        Number.isNaN(p) || X(this, Wt, p), X(this, qt, String(u));\n    }\n    get name() {\n        return O(this, qt);\n    }\n    get lastModified() {\n        return O(this, Wt);\n    }\n    get [Symbol.toStringTag]() {\n        return \"File\";\n    }\n    static [Symbol.hasInstance](a) {\n        return !!a && a instanceof ut && /^(File)$/.test(a[Symbol.toStringTag]);\n    }\n}, Wt = new WeakMap, qt = new WeakMap, n(Ot, \"File\"), Ot), Us = Ms, On = Us; /*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */ \nvar { toStringTag: Et, iterator: xs, hasInstance: Ns } = Symbol, bi = Math.random, Hs = \"append,set,get,getAll,delete,keys,values,entries,forEach,constructor\".split(\",\"), mi = n((i1, o, a)=>(i1 += \"\", /^(Blob|File)$/.test(o && o[Et]) ? [\n        (a = a !== void 0 ? a + \"\" : o[Et] == \"File\" ? o.name : \"blob\", i1),\n        o.name !== a || o[Et] == \"blob\" ? new On([\n            o\n        ], a, o) : o\n    ] : [\n        i1,\n        o + \"\"\n    ]), \"f\"), zn = n((i1, o)=>(o ? i1 : i1.replace(/\\r?\\n|\\r/g, `\\r\n`)).replace(/\\n/g, \"%0A\").replace(/\\r/g, \"%0D\").replace(/\"/g, \"%22\"), \"e$1\"), Me = n((i1, o, a)=>{\n    if (o.length < a) throw new TypeError(`Failed to execute '${i1}' on 'FormData': ${a} arguments required, but only ${o.length} present.`);\n}, \"x\");\nconst br = (zt = class {\n    constructor(...o){\n        be(this, ee, []);\n        if (o.length) throw new TypeError(\"Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.\");\n    }\n    get [Et]() {\n        return \"FormData\";\n    }\n    [xs]() {\n        return this.entries();\n    }\n    static [Ns](o) {\n        return o && typeof o == \"object\" && o[Et] === \"FormData\" && !Hs.some((a)=>typeof o[a] != \"function\");\n    }\n    append(...o) {\n        Me(\"append\", arguments, 2), O(this, ee).push(mi(...o));\n    }\n    delete(o) {\n        Me(\"delete\", arguments, 1), o += \"\", X(this, ee, O(this, ee).filter(([a])=>a !== o));\n    }\n    get(o) {\n        Me(\"get\", arguments, 1), o += \"\";\n        for(var a = O(this, ee), u = a.length, l = 0; l < u; l++)if (a[l][0] === o) return a[l][1];\n        return null;\n    }\n    getAll(o, a) {\n        return Me(\"getAll\", arguments, 1), a = [], o += \"\", O(this, ee).forEach((u)=>u[0] === o && a.push(u[1])), a;\n    }\n    has(o) {\n        return Me(\"has\", arguments, 1), o += \"\", O(this, ee).some((a)=>a[0] === o);\n    }\n    forEach(o, a) {\n        Me(\"forEach\", arguments, 1);\n        for (var [u, l] of this)o.call(a, l, u, this);\n    }\n    set(...o) {\n        Me(\"set\", arguments, 2);\n        var a = [], u = !0;\n        o = mi(...o), O(this, ee).forEach((l)=>{\n            l[0] === o[0] ? u && (u = !a.push(o)) : a.push(l);\n        }), u && a.push(o), X(this, ee, a);\n    }\n    *entries() {\n        yield* O(this, ee);\n    }\n    *keys() {\n        for (var [o] of this)yield o;\n    }\n    *values() {\n        for (var [, o] of this)yield o;\n    }\n}, ee = new WeakMap, n(zt, \"FormData\"), zt);\nfunction Vs(i1, o = ut) {\n    var a = `${bi()}${bi()}`.replace(/\\./g, \"\").slice(-28).padStart(32, \"-\"), u = [], l = `--${a}\\r\nContent-Disposition: form-data; name=\"`;\n    return i1.forEach((p, h)=>typeof p == \"string\" ? u.push(l + zn(h) + `\"\\r\n\\r\n${p.replace(/\\r(?!\\n)|(?<!\\r)\\n/g, `\\r\n`)}\\r\n`) : u.push(l + zn(h) + `\"; filename=\"${zn(p.name, 1)}\"\\r\nContent-Type: ${p.type || \"application/octet-stream\"}\\r\n\\r\n`, p, `\\r\n`)), u.push(`--${a}--`), new o(u, {\n        type: \"multipart/form-data; boundary=\" + a\n    });\n}\nn(Vs, \"formDataToBlob\");\nconst Un = class Un extends Error {\n    constructor(o, a){\n        super(o), Error.captureStackTrace(this, this.constructor), this.type = a;\n    }\n    get name() {\n        return this.constructor.name;\n    }\n    get [Symbol.toStringTag]() {\n        return this.constructor.name;\n    }\n};\nn(Un, \"FetchBaseError\");\nlet ft = Un;\nconst xn = class xn extends ft {\n    constructor(o, a, u){\n        super(o, a), u && (this.code = this.errno = u.code, this.erroredSysCall = u.syscall);\n    }\n};\nn(xn, \"FetchError\");\nlet G = xn;\nconst mr = Symbol.toStringTag, yi = n((i1)=>typeof i1 == \"object\" && typeof i1.append == \"function\" && typeof i1.delete == \"function\" && typeof i1.get == \"function\" && typeof i1.getAll == \"function\" && typeof i1.has == \"function\" && typeof i1.set == \"function\" && typeof i1.sort == \"function\" && i1[mr] === \"URLSearchParams\", \"isURLSearchParameters\"), yr = n((i1)=>i1 && typeof i1 == \"object\" && typeof i1.arrayBuffer == \"function\" && typeof i1.type == \"string\" && typeof i1.stream == \"function\" && typeof i1.constructor == \"function\" && /^(Blob|File)$/.test(i1[mr]), \"isBlob\"), Qs = n((i1)=>typeof i1 == \"object\" && (i1[mr] === \"AbortSignal\" || i1[mr] === \"EventTarget\"), \"isAbortSignal\"), Ys = n((i1, o)=>{\n    const a = new URL(o).hostname, u = new URL(i1).hostname;\n    return a === u || a.endsWith(`.${u}`);\n}, \"isDomainOrSubdomain\"), Gs = n((i1, o)=>{\n    const a = new URL(o).protocol, u = new URL(i1).protocol;\n    return a === u;\n}, \"isSameProtocol\"), Zs = (0,node_util__WEBPACK_IMPORTED_MODULE_5__.promisify)(node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline), H = Symbol(\"Body internals\"), Nn = class Nn {\n    constructor(o, { size: a = 0 } = {}){\n        let u = null;\n        o === null ? o = null : yi(o) ? o = node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(o.toString()) : yr(o) || node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.isBuffer(o) || (node_util__WEBPACK_IMPORTED_MODULE_5__.types.isAnyArrayBuffer(o) ? o = node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(o) : ArrayBuffer.isView(o) ? o = node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(o.buffer, o.byteOffset, o.byteLength) : o instanceof node_stream__WEBPACK_IMPORTED_MODULE_3__ || (o instanceof br ? (o = Vs(o), u = o.type.split(\"=\")[1]) : o = node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(String(o))));\n        let l = o;\n        node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.isBuffer(o) ? l = node_stream__WEBPACK_IMPORTED_MODULE_3__.Readable.from(o) : yr(o) && (l = node_stream__WEBPACK_IMPORTED_MODULE_3__.Readable.from(o.stream())), this[H] = {\n            body: o,\n            stream: l,\n            boundary: u,\n            disturbed: !1,\n            error: null\n        }, this.size = a, o instanceof node_stream__WEBPACK_IMPORTED_MODULE_3__ && o.on(\"error\", (p)=>{\n            const h = p instanceof ft ? p : new G(`Invalid response body while trying to fetch ${this.url}: ${p.message}`, \"system\", p);\n            this[H].error = h;\n        });\n    }\n    get body() {\n        return this[H].stream;\n    }\n    get bodyUsed() {\n        return this[H].disturbed;\n    }\n    async arrayBuffer() {\n        const { buffer: o, byteOffset: a, byteLength: u } = await In(this);\n        return o.slice(a, a + u);\n    }\n    async formData() {\n        const o = this.headers.get(\"content-type\");\n        if (o.startsWith(\"application/x-www-form-urlencoded\")) {\n            const u = new br, l = new URLSearchParams(await this.text());\n            for (const [p, h] of l)u.append(p, h);\n            return u;\n        }\n        const { toFormData: a } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/node-fetch-native\").then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/multipart-parser.mjs */ \"(ssr)/./node_modules/node-fetch-native/dist/chunks/multipart-parser.mjs\"));\n        return a(this.body, o);\n    }\n    async blob() {\n        const o = this.headers && this.headers.get(\"content-type\") || this[H].body && this[H].body.type || \"\", a = await this.arrayBuffer();\n        return new ut([\n            a\n        ], {\n            type: o\n        });\n    }\n    async json() {\n        const o = await this.text();\n        return JSON.parse(o);\n    }\n    async text() {\n        const o = await In(this);\n        return new TextDecoder().decode(o);\n    }\n    buffer() {\n        return In(this);\n    }\n};\nn(Nn, \"Body\");\nlet Ue = Nn;\nUe.prototype.buffer = (0,node_util__WEBPACK_IMPORTED_MODULE_5__.deprecate)(Ue.prototype.buffer, \"Please use 'response.arrayBuffer()' instead of 'response.buffer()'\", \"node-fetch#buffer\"), Object.defineProperties(Ue.prototype, {\n    body: {\n        enumerable: !0\n    },\n    bodyUsed: {\n        enumerable: !0\n    },\n    arrayBuffer: {\n        enumerable: !0\n    },\n    blob: {\n        enumerable: !0\n    },\n    json: {\n        enumerable: !0\n    },\n    text: {\n        enumerable: !0\n    },\n    data: {\n        get: (0,node_util__WEBPACK_IMPORTED_MODULE_5__.deprecate)(()=>{}, \"data doesn't exist, use json(), text(), arrayBuffer(), or body instead\", \"https://github.com/node-fetch/node-fetch/issues/1000 (response)\")\n    }\n});\nasync function In(i1) {\n    if (i1[H].disturbed) throw new TypeError(`body used already for: ${i1.url}`);\n    if (i1[H].disturbed = !0, i1[H].error) throw i1[H].error;\n    const { body: o } = i1;\n    if (o === null) return node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.alloc(0);\n    if (!(o instanceof node_stream__WEBPACK_IMPORTED_MODULE_3__)) return node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.alloc(0);\n    const a = [];\n    let u = 0;\n    try {\n        for await (const l of o){\n            if (i1.size > 0 && u + l.length > i1.size) {\n                const p = new G(`content size at ${i1.url} over limit: ${i1.size}`, \"max-size\");\n                throw o.destroy(p), p;\n            }\n            u += l.length, a.push(l);\n        }\n    } catch (l) {\n        throw l instanceof ft ? l : new G(`Invalid response body while trying to fetch ${i1.url}: ${l.message}`, \"system\", l);\n    }\n    if (o.readableEnded === !0 || o._readableState.ended === !0) try {\n        return a.every((l)=>typeof l == \"string\") ? node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(a.join(\"\")) : node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.concat(a, u);\n    } catch (l) {\n        throw new G(`Could not create Buffer from response body for ${i1.url}: ${l.message}`, \"system\", l);\n    }\n    else throw new G(`Premature close of server response while trying to fetch ${i1.url}`);\n}\nn(In, \"consumeBody\");\nconst Fn = n((i1, o)=>{\n    let a, u, { body: l } = i1[H];\n    if (i1.bodyUsed) throw new Error(\"cannot clone body after it is used\");\n    return l instanceof node_stream__WEBPACK_IMPORTED_MODULE_3__ && typeof l.getBoundary != \"function\" && (a = new node_stream__WEBPACK_IMPORTED_MODULE_3__.PassThrough({\n        highWaterMark: o\n    }), u = new node_stream__WEBPACK_IMPORTED_MODULE_3__.PassThrough({\n        highWaterMark: o\n    }), l.pipe(a), l.pipe(u), i1[H].stream = a, l = u), l;\n}, \"clone\"), Ks = (0,node_util__WEBPACK_IMPORTED_MODULE_5__.deprecate)((i1)=>i1.getBoundary(), \"form-data doesn't follow the spec and requires special treatment. Use alternative package\", \"https://github.com/node-fetch/node-fetch/issues/1167\"), gi = n((i1, o)=>i1 === null ? null : typeof i1 == \"string\" ? \"text/plain;charset=UTF-8\" : yi(i1) ? \"application/x-www-form-urlencoded;charset=UTF-8\" : yr(i1) ? i1.type || null : node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.isBuffer(i1) || node_util__WEBPACK_IMPORTED_MODULE_5__.types.isAnyArrayBuffer(i1) || ArrayBuffer.isView(i1) ? null : i1 instanceof br ? `multipart/form-data; boundary=${o[H].boundary}` : i1 && typeof i1.getBoundary == \"function\" ? `multipart/form-data;boundary=${Ks(i1)}` : i1 instanceof node_stream__WEBPACK_IMPORTED_MODULE_3__ ? null : \"text/plain;charset=UTF-8\", \"extractContentType\"), Js = n((i1)=>{\n    const { body: o } = i1[H];\n    return o === null ? 0 : yr(o) ? o.size : node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.isBuffer(o) ? o.length : o && typeof o.getLengthSync == \"function\" && o.hasKnownLength && o.hasKnownLength() ? o.getLengthSync() : null;\n}, \"getTotalBytes\"), Xs = n(async (i1, { body: o })=>{\n    o === null ? i1.end() : await Zs(o, i1);\n}, \"writeToStream\"), gr = typeof node_http__WEBPACK_IMPORTED_MODULE_0__.validateHeaderName == \"function\" ? node_http__WEBPACK_IMPORTED_MODULE_0__.validateHeaderName : (i1)=>{\n    if (!/^[\\^`\\-\\w!#$%&'*+.|~]+$/.test(i1)) {\n        const o = new TypeError(`Header name must be a valid HTTP token [${i1}]`);\n        throw Object.defineProperty(o, \"code\", {\n            value: \"ERR_INVALID_HTTP_TOKEN\"\n        }), o;\n    }\n}, jn = typeof node_http__WEBPACK_IMPORTED_MODULE_0__.validateHeaderValue == \"function\" ? node_http__WEBPACK_IMPORTED_MODULE_0__.validateHeaderValue : (i1, o)=>{\n    if (/[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/.test(o)) {\n        const a = new TypeError(`Invalid character in header content [\"${i1}\"]`);\n        throw Object.defineProperty(a, \"code\", {\n            value: \"ERR_INVALID_CHAR\"\n        }), a;\n    }\n}, Pr = class Pr extends URLSearchParams {\n    constructor(o){\n        let a = [];\n        if (o instanceof Pr) {\n            const u = o.raw();\n            for (const [l, p] of Object.entries(u))a.push(...p.map((h)=>[\n                    l,\n                    h\n                ]));\n        } else if (o != null) if (typeof o == \"object\" && !node_util__WEBPACK_IMPORTED_MODULE_5__.types.isBoxedPrimitive(o)) {\n            const u = o[Symbol.iterator];\n            if (u == null) a.push(...Object.entries(o));\n            else {\n                if (typeof u != \"function\") throw new TypeError(\"Header pairs must be iterable\");\n                a = [\n                    ...o\n                ].map((l)=>{\n                    if (typeof l != \"object\" || node_util__WEBPACK_IMPORTED_MODULE_5__.types.isBoxedPrimitive(l)) throw new TypeError(\"Each header pair must be an iterable object\");\n                    return [\n                        ...l\n                    ];\n                }).map((l)=>{\n                    if (l.length !== 2) throw new TypeError(\"Each header pair must be a name/value tuple\");\n                    return [\n                        ...l\n                    ];\n                });\n            }\n        } else throw new TypeError(\"Failed to construct 'Headers': The provided value is not of type '(sequence<sequence<ByteString>> or record<ByteString, ByteString>)\");\n        return a = a.length > 0 ? a.map(([u, l])=>(gr(u), jn(u, String(l)), [\n                String(u).toLowerCase(),\n                String(l)\n            ])) : void 0, super(a), new Proxy(this, {\n            get (u, l, p) {\n                switch(l){\n                    case \"append\":\n                    case \"set\":\n                        return (h, g)=>(gr(h), jn(h, String(g)), URLSearchParams.prototype[l].call(u, String(h).toLowerCase(), String(g)));\n                    case \"delete\":\n                    case \"has\":\n                    case \"getAll\":\n                        return (h)=>(gr(h), URLSearchParams.prototype[l].call(u, String(h).toLowerCase()));\n                    case \"keys\":\n                        return ()=>(u.sort(), new Set(URLSearchParams.prototype.keys.call(u)).keys());\n                    default:\n                        return Reflect.get(u, l, p);\n                }\n            }\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return this.constructor.name;\n    }\n    toString() {\n        return Object.prototype.toString.call(this);\n    }\n    get(o) {\n        const a = this.getAll(o);\n        if (a.length === 0) return null;\n        let u = a.join(\", \");\n        return /^content-encoding$/i.test(o) && (u = u.toLowerCase()), u;\n    }\n    forEach(o, a = void 0) {\n        for (const u of this.keys())Reflect.apply(o, a, [\n            this.get(u),\n            u,\n            this\n        ]);\n    }\n    *values() {\n        for (const o of this.keys())yield this.get(o);\n    }\n    *entries() {\n        for (const o of this.keys())yield [\n            o,\n            this.get(o)\n        ];\n    }\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n    raw() {\n        return [\n            ...this.keys()\n        ].reduce((o, a)=>(o[a] = this.getAll(a), o), {});\n    }\n    [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n        return [\n            ...this.keys()\n        ].reduce((o, a)=>{\n            const u = this.getAll(a);\n            return a === \"host\" ? o[a] = u[0] : o[a] = u.length > 1 ? u : u[0], o;\n        }, {});\n    }\n};\nn(Pr, \"Headers\");\nlet ye = Pr;\nObject.defineProperties(ye.prototype, [\n    \"get\",\n    \"entries\",\n    \"forEach\",\n    \"values\"\n].reduce((i1, o)=>(i1[o] = {\n        enumerable: !0\n    }, i1), {}));\nfunction el(i1 = []) {\n    return new ye(i1.reduce((o, a, u, l)=>(u % 2 === 0 && o.push(l.slice(u, u + 2)), o), []).filter(([o, a])=>{\n        try {\n            return gr(o), jn(o, String(a)), !0;\n        } catch  {\n            return !1;\n        }\n    }));\n}\nn(el, \"fromRawHeaders\");\nconst tl = new Set([\n    301,\n    302,\n    303,\n    307,\n    308\n]), Ln = n((i1)=>tl.has(i1), \"isRedirect\"), se = Symbol(\"Response internals\"), xe = class xe extends Ue {\n    constructor(o = null, a = {}){\n        super(o, a);\n        const u = a.status != null ? a.status : 200, l = new ye(a.headers);\n        if (o !== null && !l.has(\"Content-Type\")) {\n            const p = gi(o, this);\n            p && l.append(\"Content-Type\", p);\n        }\n        this[se] = {\n            type: \"default\",\n            url: a.url,\n            status: u,\n            statusText: a.statusText || \"\",\n            headers: l,\n            counter: a.counter,\n            highWaterMark: a.highWaterMark\n        };\n    }\n    get type() {\n        return this[se].type;\n    }\n    get url() {\n        return this[se].url || \"\";\n    }\n    get status() {\n        return this[se].status;\n    }\n    get ok() {\n        return this[se].status >= 200 && this[se].status < 300;\n    }\n    get redirected() {\n        return this[se].counter > 0;\n    }\n    get statusText() {\n        return this[se].statusText;\n    }\n    get headers() {\n        return this[se].headers;\n    }\n    get highWaterMark() {\n        return this[se].highWaterMark;\n    }\n    clone() {\n        return new xe(Fn(this, this.highWaterMark), {\n            type: this.type,\n            url: this.url,\n            status: this.status,\n            statusText: this.statusText,\n            headers: this.headers,\n            ok: this.ok,\n            redirected: this.redirected,\n            size: this.size,\n            highWaterMark: this.highWaterMark\n        });\n    }\n    static redirect(o, a = 302) {\n        if (!Ln(a)) throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n        return new xe(null, {\n            headers: {\n                location: new URL(o).toString()\n            },\n            status: a\n        });\n    }\n    static error() {\n        const o = new xe(null, {\n            status: 0,\n            statusText: \"\"\n        });\n        return o[se].type = \"error\", o;\n    }\n    static json(o = void 0, a = {}) {\n        const u = JSON.stringify(o);\n        if (u === void 0) throw new TypeError(\"data is not JSON serializable\");\n        const l = new ye(a && a.headers);\n        return l.has(\"content-type\") || l.set(\"content-type\", \"application/json\"), new xe(u, {\n            ...a,\n            headers: l\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"Response\";\n    }\n};\nn(xe, \"Response\");\nlet le = xe;\nObject.defineProperties(le.prototype, {\n    type: {\n        enumerable: !0\n    },\n    url: {\n        enumerable: !0\n    },\n    status: {\n        enumerable: !0\n    },\n    ok: {\n        enumerable: !0\n    },\n    redirected: {\n        enumerable: !0\n    },\n    statusText: {\n        enumerable: !0\n    },\n    headers: {\n        enumerable: !0\n    },\n    clone: {\n        enumerable: !0\n    }\n});\nconst rl = n((i1)=>{\n    if (i1.search) return i1.search;\n    const o = i1.href.length - 1, a = i1.hash || (i1.href[o] === \"#\" ? \"#\" : \"\");\n    return i1.href[o - a.length] === \"?\" ? \"?\" : \"\";\n}, \"getSearch\");\nfunction _i(i1, o = !1) {\n    return i1 == null || (i1 = new URL(i1), /^(about|blob|data):$/.test(i1.protocol)) ? \"no-referrer\" : (i1.username = \"\", i1.password = \"\", i1.hash = \"\", o && (i1.pathname = \"\", i1.search = \"\"), i1);\n}\nn(_i, \"stripURLForUseAsAReferrer\");\nconst Si = new Set([\n    \"\",\n    \"no-referrer\",\n    \"no-referrer-when-downgrade\",\n    \"same-origin\",\n    \"origin\",\n    \"strict-origin\",\n    \"origin-when-cross-origin\",\n    \"strict-origin-when-cross-origin\",\n    \"unsafe-url\"\n]), nl = \"strict-origin-when-cross-origin\";\nfunction ol(i1) {\n    if (!Si.has(i1)) throw new TypeError(`Invalid referrerPolicy: ${i1}`);\n    return i1;\n}\nn(ol, \"validateReferrerPolicy\");\nfunction il(i1) {\n    if (/^(http|ws)s:$/.test(i1.protocol)) return !0;\n    const o = i1.host.replace(/(^\\[)|(]$)/g, \"\"), a = (0,node_net__WEBPACK_IMPORTED_MODULE_8__.isIP)(o);\n    return a === 4 && /^127\\./.test(o) || a === 6 && /^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(o) ? !0 : i1.host === \"localhost\" || i1.host.endsWith(\".localhost\") ? !1 : i1.protocol === \"file:\";\n}\nn(il, \"isOriginPotentiallyTrustworthy\");\nfunction ct(i1) {\n    return /^about:(blank|srcdoc)$/.test(i1) || i1.protocol === \"data:\" || /^(blob|filesystem):$/.test(i1.protocol) ? !0 : il(i1);\n}\nn(ct, \"isUrlPotentiallyTrustworthy\");\nfunction al(i1, { referrerURLCallback: o, referrerOriginCallback: a } = {}) {\n    if (i1.referrer === \"no-referrer\" || i1.referrerPolicy === \"\") return null;\n    const u = i1.referrerPolicy;\n    if (i1.referrer === \"about:client\") return \"no-referrer\";\n    const l = i1.referrer;\n    let p = _i(l), h = _i(l, !0);\n    p.toString().length > 4096 && (p = h), o && (p = o(p)), a && (h = a(h));\n    const g = new URL(i1.url);\n    switch(u){\n        case \"no-referrer\":\n            return \"no-referrer\";\n        case \"origin\":\n            return h;\n        case \"unsafe-url\":\n            return p;\n        case \"strict-origin\":\n            return ct(p) && !ct(g) ? \"no-referrer\" : h.toString();\n        case \"strict-origin-when-cross-origin\":\n            return p.origin === g.origin ? p : ct(p) && !ct(g) ? \"no-referrer\" : h;\n        case \"same-origin\":\n            return p.origin === g.origin ? p : \"no-referrer\";\n        case \"origin-when-cross-origin\":\n            return p.origin === g.origin ? p : h;\n        case \"no-referrer-when-downgrade\":\n            return ct(p) && !ct(g) ? \"no-referrer\" : p;\n        default:\n            throw new TypeError(`Invalid referrerPolicy: ${u}`);\n    }\n}\nn(al, \"determineRequestsReferrer\");\nfunction sl(i1) {\n    const o = (i1.get(\"referrer-policy\") || \"\").split(/[,\\s]+/);\n    let a = \"\";\n    for (const u of o)u && Si.has(u) && (a = u);\n    return a;\n}\nn(sl, \"parseReferrerPolicyFromHeader\");\nconst $ = Symbol(\"Request internals\"), At = n((i1)=>typeof i1 == \"object\" && typeof i1[$] == \"object\", \"isRequest\"), ll = (0,node_util__WEBPACK_IMPORTED_MODULE_5__.deprecate)(()=>{}, \".data is not a valid RequestInit property, use .body instead\", \"https://github.com/node-fetch/node-fetch/issues/1000 (request)\"), vr = class vr extends Ue {\n    constructor(o, a = {}){\n        let u;\n        if (At(o) ? u = new URL(o.url) : (u = new URL(o), o = {}), u.username !== \"\" || u.password !== \"\") throw new TypeError(`${u} is an url with embedded credentials.`);\n        let l = a.method || o.method || \"GET\";\n        if (/^(delete|get|head|options|post|put)$/i.test(l) && (l = l.toUpperCase()), !At(a) && \"data\" in a && ll(), (a.body != null || At(o) && o.body !== null) && (l === \"GET\" || l === \"HEAD\")) throw new TypeError(\"Request with GET/HEAD method cannot have body\");\n        const p = a.body ? a.body : At(o) && o.body !== null ? Fn(o) : null;\n        super(p, {\n            size: a.size || o.size || 0\n        });\n        const h = new ye(a.headers || o.headers || {});\n        if (p !== null && !h.has(\"Content-Type\")) {\n            const w = gi(p, this);\n            w && h.set(\"Content-Type\", w);\n        }\n        let g = At(o) ? o.signal : null;\n        if (\"signal\" in a && (g = a.signal), g != null && !Qs(g)) throw new TypeError(\"Expected signal to be an instanceof AbortSignal or EventTarget\");\n        let A = a.referrer == null ? o.referrer : a.referrer;\n        if (A === \"\") A = \"no-referrer\";\n        else if (A) {\n            const w = new URL(A);\n            A = /^about:(\\/\\/)?client$/.test(w) ? \"client\" : w;\n        } else A = void 0;\n        this[$] = {\n            method: l,\n            redirect: a.redirect || o.redirect || \"follow\",\n            headers: h,\n            parsedURL: u,\n            signal: g,\n            referrer: A\n        }, this.follow = a.follow === void 0 ? o.follow === void 0 ? 20 : o.follow : a.follow, this.compress = a.compress === void 0 ? o.compress === void 0 ? !0 : o.compress : a.compress, this.counter = a.counter || o.counter || 0, this.agent = a.agent || o.agent, this.highWaterMark = a.highWaterMark || o.highWaterMark || 16384, this.insecureHTTPParser = a.insecureHTTPParser || o.insecureHTTPParser || !1, this.referrerPolicy = a.referrerPolicy || o.referrerPolicy || \"\";\n    }\n    get method() {\n        return this[$].method;\n    }\n    get url() {\n        return (0,node_url__WEBPACK_IMPORTED_MODULE_7__.format)(this[$].parsedURL);\n    }\n    get headers() {\n        return this[$].headers;\n    }\n    get redirect() {\n        return this[$].redirect;\n    }\n    get signal() {\n        return this[$].signal;\n    }\n    get referrer() {\n        if (this[$].referrer === \"no-referrer\") return \"\";\n        if (this[$].referrer === \"client\") return \"about:client\";\n        if (this[$].referrer) return this[$].referrer.toString();\n    }\n    get referrerPolicy() {\n        return this[$].referrerPolicy;\n    }\n    set referrerPolicy(o) {\n        this[$].referrerPolicy = ol(o);\n    }\n    clone() {\n        return new vr(this);\n    }\n    get [Symbol.toStringTag]() {\n        return \"Request\";\n    }\n};\nn(vr, \"Request\");\nlet dt = vr;\nObject.defineProperties(dt.prototype, {\n    method: {\n        enumerable: !0\n    },\n    url: {\n        enumerable: !0\n    },\n    headers: {\n        enumerable: !0\n    },\n    redirect: {\n        enumerable: !0\n    },\n    clone: {\n        enumerable: !0\n    },\n    signal: {\n        enumerable: !0\n    },\n    referrer: {\n        enumerable: !0\n    },\n    referrerPolicy: {\n        enumerable: !0\n    }\n});\nconst ul = n((i1)=>{\n    const { parsedURL: o } = i1[$], a = new ye(i1[$].headers);\n    a.has(\"Accept\") || a.set(\"Accept\", \"*/*\");\n    let u = null;\n    if (i1.body === null && /^(post|put)$/i.test(i1.method) && (u = \"0\"), i1.body !== null) {\n        const g = Js(i1);\n        typeof g == \"number\" && !Number.isNaN(g) && (u = String(g));\n    }\n    u && a.set(\"Content-Length\", u), i1.referrerPolicy === \"\" && (i1.referrerPolicy = nl), i1.referrer && i1.referrer !== \"no-referrer\" ? i1[$].referrer = al(i1) : i1[$].referrer = \"no-referrer\", i1[$].referrer instanceof URL && a.set(\"Referer\", i1.referrer), a.has(\"User-Agent\") || a.set(\"User-Agent\", \"node-fetch\"), i1.compress && !a.has(\"Accept-Encoding\") && a.set(\"Accept-Encoding\", \"gzip, deflate, br\");\n    let { agent: l } = i1;\n    typeof l == \"function\" && (l = l(o));\n    const p = rl(o), h = {\n        path: o.pathname + p,\n        method: i1.method,\n        headers: a[Symbol.for(\"nodejs.util.inspect.custom\")](),\n        insecureHTTPParser: i1.insecureHTTPParser,\n        agent: l\n    };\n    return {\n        parsedURL: o,\n        options: h\n    };\n}, \"getNodeRequestOptions\"), Hn = class Hn extends ft {\n    constructor(o, a = \"aborted\"){\n        super(o, a);\n    }\n};\nn(Hn, \"AbortError\");\nlet _r = Hn; /*! node-domexception. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */ \nif (!globalThis.DOMException) try {\n    const { MessageChannel: i1 } = require(\"worker_threads\"), o = new i1().port1, a = new ArrayBuffer;\n    o.postMessage(a, [\n        a,\n        a\n    ]);\n} catch (i1) {\n    i1.constructor.name === \"DOMException\" && (globalThis.DOMException = i1.constructor);\n}\nvar fl = globalThis.DOMException;\nconst cl = (0,_shared_node_fetch_native_1a4a356d_mjs__WEBPACK_IMPORTED_MODULE_6__.g)(fl), { stat: $n } = node_fs__WEBPACK_IMPORTED_MODULE_9__.promises, dl = n((i1, o)=>wi((0,node_fs__WEBPACK_IMPORTED_MODULE_9__.statSync)(i1), i1, o), \"blobFromSync\"), hl = n((i1, o)=>$n(i1).then((a)=>wi(a, i1, o)), \"blobFrom\"), pl = n((i1, o)=>$n(i1).then((a)=>Ri(a, i1, o)), \"fileFrom\"), bl = n((i1, o)=>Ri((0,node_fs__WEBPACK_IMPORTED_MODULE_9__.statSync)(i1), i1, o), \"fileFromSync\"), wi = n((i1, o, a = \"\")=>new ut([\n        new Sr({\n            path: o,\n            size: i1.size,\n            lastModified: i1.mtimeMs,\n            start: 0\n        })\n    ], {\n        type: a\n    }), \"fromBlob\"), Ri = n((i1, o, a = \"\")=>new On([\n        new Sr({\n            path: o,\n            size: i1.size,\n            lastModified: i1.mtimeMs,\n            start: 0\n        })\n    ], (0,node_path__WEBPACK_IMPORTED_MODULE_10__.basename)(o), {\n        type: a,\n        lastModified: i1.mtimeMs\n    }), \"fromFile\"), Er = class Er {\n    constructor(o){\n        be(this, Ne, void 0);\n        be(this, He, void 0);\n        X(this, Ne, o.path), X(this, He, o.start), this.size = o.size, this.lastModified = o.lastModified;\n    }\n    slice(o, a) {\n        return new Er({\n            path: O(this, Ne),\n            lastModified: this.lastModified,\n            size: a - o,\n            start: O(this, He) + o\n        });\n    }\n    async *stream() {\n        const { mtimeMs: o } = await $n(O(this, Ne));\n        if (o > this.lastModified) throw new cl(\"The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.\", \"NotReadableError\");\n        yield* (0,node_fs__WEBPACK_IMPORTED_MODULE_9__.createReadStream)(O(this, Ne), {\n            start: O(this, He),\n            end: O(this, He) + this.size - 1\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"Blob\";\n    }\n};\nNe = new WeakMap, He = new WeakMap, n(Er, \"BlobDataItem\");\nlet Sr = Er;\nconst ml = new Set([\n    \"data:\",\n    \"http:\",\n    \"https:\"\n]);\nasync function Ti(i1, o) {\n    return new Promise((a, u)=>{\n        const l = new dt(i1, o), { parsedURL: p, options: h } = ul(l);\n        if (!ml.has(p.protocol)) throw new TypeError(`node-fetch cannot load ${i1}. URL scheme \"${p.protocol.replace(/:$/, \"\")}\" is not supported.`);\n        if (p.protocol === \"data:\") {\n            const _ = js(l.url), V = new le(_, {\n                headers: {\n                    \"Content-Type\": _.typeFull\n                }\n            });\n            a(V);\n            return;\n        }\n        const g = (p.protocol === \"https:\" ? node_https__WEBPACK_IMPORTED_MODULE_1__ : node_http__WEBPACK_IMPORTED_MODULE_0__).request, { signal: A } = l;\n        let w = null;\n        const E = n(()=>{\n            const _ = new _r(\"The operation was aborted.\");\n            u(_), l.body && l.body instanceof node_stream__WEBPACK_IMPORTED_MODULE_3__.Readable && l.body.destroy(_), !(!w || !w.body) && w.body.emit(\"error\", _);\n        }, \"abort\");\n        if (A && A.aborted) {\n            E();\n            return;\n        }\n        const T = n(()=>{\n            E(), q();\n        }, \"abortAndFinalize\"), b = g(p.toString(), h);\n        A && A.addEventListener(\"abort\", T);\n        const q = n(()=>{\n            b.abort(), A && A.removeEventListener(\"abort\", T);\n        }, \"finalize\");\n        b.on(\"error\", (_)=>{\n            u(new G(`request to ${l.url} failed, reason: ${_.message}`, \"system\", _)), q();\n        }), yl(b, (_)=>{\n            w && w.body && w.body.destroy(_);\n        }), process.version < \"v14\" && b.on(\"socket\", (_)=>{\n            let V;\n            _.prependListener(\"end\", ()=>{\n                V = _._eventsCount;\n            }), _.prependListener(\"close\", (I)=>{\n                if (w && V < _._eventsCount && !I) {\n                    const F = new Error(\"Premature close\");\n                    F.code = \"ERR_STREAM_PREMATURE_CLOSE\", w.body.emit(\"error\", F);\n                }\n            });\n        }), b.on(\"response\", (_)=>{\n            b.setTimeout(0);\n            const V = el(_.rawHeaders);\n            if (Ln(_.statusCode)) {\n                const z = V.get(\"Location\");\n                let j = null;\n                try {\n                    j = z === null ? null : new URL(z, l.url);\n                } catch  {\n                    if (l.redirect !== \"manual\") {\n                        u(new G(`uri requested responds with an invalid redirect URL: ${z}`, \"invalid-redirect\")), q();\n                        return;\n                    }\n                }\n                switch(l.redirect){\n                    case \"error\":\n                        u(new G(`uri requested responds with a redirect, redirect mode is set to error: ${l.url}`, \"no-redirect\")), q();\n                        return;\n                    case \"manual\":\n                        break;\n                    case \"follow\":\n                        {\n                            if (j === null) break;\n                            if (l.counter >= l.follow) {\n                                u(new G(`maximum redirect reached at: ${l.url}`, \"max-redirect\")), q();\n                                return;\n                            }\n                            const U = {\n                                headers: new ye(l.headers),\n                                follow: l.follow,\n                                counter: l.counter + 1,\n                                agent: l.agent,\n                                compress: l.compress,\n                                method: l.method,\n                                body: Fn(l),\n                                signal: l.signal,\n                                size: l.size,\n                                referrer: l.referrer,\n                                referrerPolicy: l.referrerPolicy\n                            };\n                            if (!Ys(l.url, j) || !Gs(l.url, j)) for (const Ft of [\n                                \"authorization\",\n                                \"www-authenticate\",\n                                \"cookie\",\n                                \"cookie2\"\n                            ])U.headers.delete(Ft);\n                            if (_.statusCode !== 303 && l.body && o.body instanceof node_stream__WEBPACK_IMPORTED_MODULE_3__.Readable) {\n                                u(new G(\"Cannot follow redirect with body being a readable stream\", \"unsupported-redirect\")), q();\n                                return;\n                            }\n                            (_.statusCode === 303 || (_.statusCode === 301 || _.statusCode === 302) && l.method === \"POST\") && (U.method = \"GET\", U.body = void 0, U.headers.delete(\"content-length\"));\n                            const D = sl(V);\n                            D && (U.referrerPolicy = D), a(Ti(new dt(j, U))), q();\n                            return;\n                        }\n                    default:\n                        return u(new TypeError(`Redirect option '${l.redirect}' is not a valid value of RequestRedirect`));\n                }\n            }\n            A && _.once(\"end\", ()=>{\n                A.removeEventListener(\"abort\", T);\n            });\n            let I = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(_, new node_stream__WEBPACK_IMPORTED_MODULE_3__.PassThrough, (z)=>{\n                z && u(z);\n            });\n            process.version < \"v12.10\" && _.on(\"aborted\", T);\n            const F = {\n                url: l.url,\n                status: _.statusCode,\n                statusText: _.statusMessage,\n                headers: V,\n                size: l.size,\n                counter: l.counter,\n                highWaterMark: l.highWaterMark\n            }, Q = V.get(\"Content-Encoding\");\n            if (!l.compress || l.method === \"HEAD\" || Q === null || _.statusCode === 204 || _.statusCode === 304) {\n                w = new le(I, F), a(w);\n                return;\n            }\n            const ge = {\n                flush: node_zlib__WEBPACK_IMPORTED_MODULE_2__.Z_SYNC_FLUSH,\n                finishFlush: node_zlib__WEBPACK_IMPORTED_MODULE_2__.Z_SYNC_FLUSH\n            };\n            if (Q === \"gzip\" || Q === \"x-gzip\") {\n                I = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(I, node_zlib__WEBPACK_IMPORTED_MODULE_2__.createGunzip(ge), (z)=>{\n                    z && u(z);\n                }), w = new le(I, F), a(w);\n                return;\n            }\n            if (Q === \"deflate\" || Q === \"x-deflate\") {\n                const z = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(_, new node_stream__WEBPACK_IMPORTED_MODULE_3__.PassThrough, (j)=>{\n                    j && u(j);\n                });\n                z.once(\"data\", (j)=>{\n                    (j[0] & 15) === 8 ? I = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(I, node_zlib__WEBPACK_IMPORTED_MODULE_2__.createInflate(), (U)=>{\n                        U && u(U);\n                    }) : I = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(I, node_zlib__WEBPACK_IMPORTED_MODULE_2__.createInflateRaw(), (U)=>{\n                        U && u(U);\n                    }), w = new le(I, F), a(w);\n                }), z.once(\"end\", ()=>{\n                    w || (w = new le(I, F), a(w));\n                });\n                return;\n            }\n            if (Q === \"br\") {\n                I = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(I, node_zlib__WEBPACK_IMPORTED_MODULE_2__.createBrotliDecompress(), (z)=>{\n                    z && u(z);\n                }), w = new le(I, F), a(w);\n                return;\n            }\n            w = new le(I, F), a(w);\n        }), Xs(b, l).catch(u);\n    });\n}\nn(Ti, \"fetch$1\");\nfunction yl(i1, o) {\n    const a = node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(`0\\r\n\\r\n`);\n    let u = !1, l = !1, p;\n    i1.on(\"response\", (h)=>{\n        const { headers: g } = h;\n        u = g[\"transfer-encoding\"] === \"chunked\" && !g[\"content-length\"];\n    }), i1.on(\"socket\", (h)=>{\n        const g = n(()=>{\n            if (u && !l) {\n                const w = new Error(\"Premature close\");\n                w.code = \"ERR_STREAM_PREMATURE_CLOSE\", o(w);\n            }\n        }, \"onSocketClose\"), A = n((w)=>{\n            l = node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.compare(w.slice(-5), a) === 0, !l && p && (l = node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.compare(p.slice(-3), a.slice(0, 3)) === 0 && node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.compare(w.slice(-2), a.slice(3)) === 0), p = w;\n        }, \"onData\");\n        h.prependListener(\"close\", g), h.on(\"data\", A), i1.on(\"close\", ()=>{\n            h.removeListener(\"close\", g), h.removeListener(\"data\", A);\n        });\n    });\n}\nn(yl, \"fixResponseChunkedTransferBadEnding\");\nconst Ci = new WeakMap, Dn = new WeakMap;\nfunction W(i1) {\n    const o = Ci.get(i1);\n    return console.assert(o != null, \"'this' is expected an Event object, but got\", i1), o;\n}\nn(W, \"pd\");\nfunction Pi(i1) {\n    if (i1.passiveListener != null) {\n        typeof console < \"u\" && typeof console.error == \"function\" && console.error(\"Unable to preventDefault inside passive event listener invocation.\", i1.passiveListener);\n        return;\n    }\n    i1.event.cancelable && (i1.canceled = !0, typeof i1.event.preventDefault == \"function\" && i1.event.preventDefault());\n}\nn(Pi, \"setCancelFlag\");\nfunction ht(i1, o) {\n    Ci.set(this, {\n        eventTarget: i1,\n        event: o,\n        eventPhase: 2,\n        currentTarget: i1,\n        canceled: !1,\n        stopped: !1,\n        immediateStopped: !1,\n        passiveListener: null,\n        timeStamp: o.timeStamp || Date.now()\n    }), Object.defineProperty(this, \"isTrusted\", {\n        value: !1,\n        enumerable: !0\n    });\n    const a = Object.keys(o);\n    for(let u = 0; u < a.length; ++u){\n        const l = a[u];\n        l in this || Object.defineProperty(this, l, vi(l));\n    }\n}\nn(ht, \"Event\"), ht.prototype = {\n    get type () {\n        return W(this).event.type;\n    },\n    get target () {\n        return W(this).eventTarget;\n    },\n    get currentTarget () {\n        return W(this).currentTarget;\n    },\n    composedPath () {\n        const i1 = W(this).currentTarget;\n        return i1 == null ? [] : [\n            i1\n        ];\n    },\n    get NONE () {\n        return 0;\n    },\n    get CAPTURING_PHASE () {\n        return 1;\n    },\n    get AT_TARGET () {\n        return 2;\n    },\n    get BUBBLING_PHASE () {\n        return 3;\n    },\n    get eventPhase () {\n        return W(this).eventPhase;\n    },\n    stopPropagation () {\n        const i1 = W(this);\n        i1.stopped = !0, typeof i1.event.stopPropagation == \"function\" && i1.event.stopPropagation();\n    },\n    stopImmediatePropagation () {\n        const i1 = W(this);\n        i1.stopped = !0, i1.immediateStopped = !0, typeof i1.event.stopImmediatePropagation == \"function\" && i1.event.stopImmediatePropagation();\n    },\n    get bubbles () {\n        return !!W(this).event.bubbles;\n    },\n    get cancelable () {\n        return !!W(this).event.cancelable;\n    },\n    preventDefault () {\n        Pi(W(this));\n    },\n    get defaultPrevented () {\n        return W(this).canceled;\n    },\n    get composed () {\n        return !!W(this).event.composed;\n    },\n    get timeStamp () {\n        return W(this).timeStamp;\n    },\n    get srcElement () {\n        return W(this).eventTarget;\n    },\n    get cancelBubble () {\n        return W(this).stopped;\n    },\n    set cancelBubble (i){\n        if (!i) return;\n        const o = W(this);\n        o.stopped = !0, typeof o.event.cancelBubble == \"boolean\" && (o.event.cancelBubble = !0);\n    },\n    get returnValue () {\n        return !W(this).canceled;\n    },\n    set returnValue (i){\n        i || Pi(W(this));\n    },\n    initEvent () {}\n}, Object.defineProperty(ht.prototype, \"constructor\", {\n    value: ht,\n    configurable: !0,\n    writable: !0\n}),  false && (0);\nfunction vi(i1) {\n    return {\n        get () {\n            return W(this).event[i1];\n        },\n        set (o) {\n            W(this).event[i1] = o;\n        },\n        configurable: !0,\n        enumerable: !0\n    };\n}\nn(vi, \"defineRedirectDescriptor\");\nfunction gl(i1) {\n    return {\n        value () {\n            const o = W(this).event;\n            return o[i1].apply(o, arguments);\n        },\n        configurable: !0,\n        enumerable: !0\n    };\n}\nn(gl, \"defineCallDescriptor\");\nfunction _l(i1, o) {\n    const a = Object.keys(o);\n    if (a.length === 0) return i1;\n    function u(l, p) {\n        i1.call(this, l, p);\n    }\n    n(u, \"CustomEvent\"), u.prototype = Object.create(i1.prototype, {\n        constructor: {\n            value: u,\n            configurable: !0,\n            writable: !0\n        }\n    });\n    for(let l = 0; l < a.length; ++l){\n        const p = a[l];\n        if (!(p in i1.prototype)) {\n            const g = typeof Object.getOwnPropertyDescriptor(o, p).value == \"function\";\n            Object.defineProperty(u.prototype, p, g ? gl(p) : vi(p));\n        }\n    }\n    return u;\n}\nn(_l, \"defineWrapper\");\nfunction Ei(i1) {\n    if (i1 == null || i1 === Object.prototype) return ht;\n    let o = Dn.get(i1);\n    return o == null && (o = _l(Ei(Object.getPrototypeOf(i1)), i1), Dn.set(i1, o)), o;\n}\nn(Ei, \"getWrapper\");\nfunction Sl(i1, o) {\n    const a = Ei(Object.getPrototypeOf(o));\n    return new a(i1, o);\n}\nn(Sl, \"wrapEvent\");\nfunction wl(i1) {\n    return W(i1).immediateStopped;\n}\nn(wl, \"isStopped\");\nfunction Rl(i1, o) {\n    W(i1).eventPhase = o;\n}\nn(Rl, \"setEventPhase\");\nfunction Tl(i1, o) {\n    W(i1).currentTarget = o;\n}\nn(Tl, \"setCurrentTarget\");\nfunction Ai(i1, o) {\n    W(i1).passiveListener = o;\n}\nn(Ai, \"setPassiveListener\");\nconst Bi = new WeakMap, ki = 1, Wi = 2, wr = 3;\nfunction Rr(i1) {\n    return i1 !== null && typeof i1 == \"object\";\n}\nn(Rr, \"isObject\");\nfunction Bt(i1) {\n    const o = Bi.get(i1);\n    if (o == null) throw new TypeError(\"'this' is expected an EventTarget object, but got another value.\");\n    return o;\n}\nn(Bt, \"getListeners\");\nfunction Cl(i1) {\n    return {\n        get () {\n            let a = Bt(this).get(i1);\n            for(; a != null;){\n                if (a.listenerType === wr) return a.listener;\n                a = a.next;\n            }\n            return null;\n        },\n        set (o) {\n            typeof o != \"function\" && !Rr(o) && (o = null);\n            const a = Bt(this);\n            let u = null, l = a.get(i1);\n            for(; l != null;)l.listenerType === wr ? u !== null ? u.next = l.next : l.next !== null ? a.set(i1, l.next) : a.delete(i1) : u = l, l = l.next;\n            if (o !== null) {\n                const p = {\n                    listener: o,\n                    listenerType: wr,\n                    passive: !1,\n                    once: !1,\n                    next: null\n                };\n                u === null ? a.set(i1, p) : u.next = p;\n            }\n        },\n        configurable: !0,\n        enumerable: !0\n    };\n}\nn(Cl, \"defineEventAttributeDescriptor\");\nfunction qi(i1, o) {\n    Object.defineProperty(i1, `on${o}`, Cl(o));\n}\nn(qi, \"defineEventAttribute\");\nfunction Oi(i1) {\n    function o() {\n        Pe.call(this);\n    }\n    n(o, \"CustomEventTarget\"), o.prototype = Object.create(Pe.prototype, {\n        constructor: {\n            value: o,\n            configurable: !0,\n            writable: !0\n        }\n    });\n    for(let a = 0; a < i1.length; ++a)qi(o.prototype, i1[a]);\n    return o;\n}\nn(Oi, \"defineCustomEventTarget\");\nfunction Pe() {\n    if (this instanceof Pe) {\n        Bi.set(this, new Map);\n        return;\n    }\n    if (arguments.length === 1 && Array.isArray(arguments[0])) return Oi(arguments[0]);\n    if (arguments.length > 0) {\n        const i1 = new Array(arguments.length);\n        for(let o = 0; o < arguments.length; ++o)i1[o] = arguments[o];\n        return Oi(i1);\n    }\n    throw new TypeError(\"Cannot call a class as a function\");\n}\nn(Pe, \"EventTarget\"), Pe.prototype = {\n    addEventListener (i1, o, a) {\n        if (o == null) return;\n        if (typeof o != \"function\" && !Rr(o)) throw new TypeError(\"'listener' should be a function or an object.\");\n        const u = Bt(this), l = Rr(a), h = (l ? !!a.capture : !!a) ? ki : Wi, g = {\n            listener: o,\n            listenerType: h,\n            passive: l && !!a.passive,\n            once: l && !!a.once,\n            next: null\n        };\n        let A = u.get(i1);\n        if (A === void 0) {\n            u.set(i1, g);\n            return;\n        }\n        let w = null;\n        for(; A != null;){\n            if (A.listener === o && A.listenerType === h) return;\n            w = A, A = A.next;\n        }\n        w.next = g;\n    },\n    removeEventListener (i1, o, a) {\n        if (o == null) return;\n        const u = Bt(this), p = (Rr(a) ? !!a.capture : !!a) ? ki : Wi;\n        let h = null, g = u.get(i1);\n        for(; g != null;){\n            if (g.listener === o && g.listenerType === p) {\n                h !== null ? h.next = g.next : g.next !== null ? u.set(i1, g.next) : u.delete(i1);\n                return;\n            }\n            h = g, g = g.next;\n        }\n    },\n    dispatchEvent (i1) {\n        if (i1 == null || typeof i1.type != \"string\") throw new TypeError('\"event.type\" should be a string.');\n        const o = Bt(this), a = i1.type;\n        let u = o.get(a);\n        if (u == null) return !0;\n        const l = Sl(this, i1);\n        let p = null;\n        for(; u != null;){\n            if (u.once ? p !== null ? p.next = u.next : u.next !== null ? o.set(a, u.next) : o.delete(a) : p = u, Ai(l, u.passive ? u.listener : null), typeof u.listener == \"function\") try {\n                u.listener.call(this, l);\n            } catch (h) {\n                typeof console < \"u\" && typeof console.error == \"function\" && console.error(h);\n            }\n            else u.listenerType !== wr && typeof u.listener.handleEvent == \"function\" && u.listener.handleEvent(l);\n            if (wl(l)) break;\n            u = u.next;\n        }\n        return Ai(l, null), Rl(l, 0), Tl(l, null), !l.defaultPrevented;\n    }\n}, Object.defineProperty(Pe.prototype, \"constructor\", {\n    value: Pe,\n    configurable: !0,\n    writable: !0\n}),  false && 0;\nconst Vn = class Vn extends Pe {\n    constructor(){\n        throw super(), new TypeError(\"AbortSignal cannot be constructed directly\");\n    }\n    get aborted() {\n        const o = Tr.get(this);\n        if (typeof o != \"boolean\") throw new TypeError(`Expected 'this' to be an 'AbortSignal' object, but got ${this === null ? \"null\" : typeof this}`);\n        return o;\n    }\n};\nn(Vn, \"AbortSignal\");\nlet pt = Vn;\nqi(pt.prototype, \"abort\");\nfunction Pl() {\n    const i1 = Object.create(pt.prototype);\n    return Pe.call(i1), Tr.set(i1, !1), i1;\n}\nn(Pl, \"createAbortSignal\");\nfunction vl(i1) {\n    Tr.get(i1) === !1 && (Tr.set(i1, !0), i1.dispatchEvent({\n        type: \"abort\"\n    }));\n}\nn(vl, \"abortSignal\");\nconst Tr = new WeakMap;\nObject.defineProperties(pt.prototype, {\n    aborted: {\n        enumerable: !0\n    }\n}), typeof Symbol == \"function\" && typeof Symbol.toStringTag == \"symbol\" && Object.defineProperty(pt.prototype, Symbol.toStringTag, {\n    configurable: !0,\n    value: \"AbortSignal\"\n});\nlet Mn = (It = class {\n    constructor(){\n        zi.set(this, Pl());\n    }\n    get signal() {\n        return Ii(this);\n    }\n    abort() {\n        vl(Ii(this));\n    }\n}, n(It, \"AbortController\"), It);\nconst zi = new WeakMap;\nfunction Ii(i1) {\n    const o = zi.get(i1);\n    if (o == null) throw new TypeError(`Expected 'this' to be an 'AbortController' object, but got ${i1 === null ? \"null\" : typeof i1}`);\n    return o;\n}\nn(Ii, \"getSignal\"), Object.defineProperties(Mn.prototype, {\n    signal: {\n        enumerable: !0\n    },\n    abort: {\n        enumerable: !0\n    }\n}), typeof Symbol == \"function\" && typeof Symbol.toStringTag == \"symbol\" && Object.defineProperty(Mn.prototype, Symbol.toStringTag, {\n    configurable: !0,\n    value: \"AbortController\"\n});\nvar El = Object.defineProperty, Al = n((i1, o)=>El(i1, \"name\", {\n        value: o,\n        configurable: !0\n    }), \"e\");\nconst Fi = Ti;\nji();\nfunction ji() {\n    !globalThis.process?.versions?.node && !globalThis.process?.env.DISABLE_NODE_FETCH_NATIVE_WARN && console.warn(\"[node-fetch-native] Node.js compatible build of `node-fetch-native` is being used in a non-Node.js environment. Please make sure you are using proper export conditions or report this issue to https://github.com/unjs/node-fetch-native. You can set `process.env.DISABLE_NODE_FETCH_NATIVE_WARN` to disable this warning.\");\n}\nn(ji, \"s\"), Al(ji, \"checkNodeEnvironment\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-fetch-native/dist/node.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-fetch-native/dist/shared/node-fetch-native.1a4a356d.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/node-fetch-native/dist/shared/node-fetch-native.1a4a356d.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ n),\n/* harmony export */   g: () => (/* binding */ f)\n/* harmony export */ });\nvar t = Object.defineProperty;\nvar o = (e, l)=>t(e, \"name\", {\n        value: l,\n        configurable: !0\n    });\nvar n = typeof globalThis < \"u\" ? globalThis :  false ? 0 : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {};\nfunction f(e) {\n    return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, \"default\") ? e.default : e;\n}\no(f, \"getDefaultExportFromCjs\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC1uYXRpdmUvZGlzdC9zaGFyZWQvbm9kZS1mZXRjaC1uYXRpdmUuMWE0YTM1NmQubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBSUEsSUFBRUMsT0FBT0MsY0FBYztBQUFDLElBQUlDLElBQUUsQ0FBQ0MsR0FBRUMsSUFBSUwsRUFBRUksR0FBRSxRQUFPO1FBQUNFLE9BQU1EO1FBQUVFLGNBQWEsQ0FBQztJQUFDO0FBQUcsSUFBSUMsSUFBRSxPQUFPQyxhQUFXLE1BQUlBLGFBQVcsTUFBaUIsR0FBQ0MsQ0FBTUEsR0FBQyxPQUFPQyxTQUFPLE1BQUlBLFNBQU8sT0FBT0MsT0FBSyxNQUFJQSxPQUFLLENBQUM7QUFBRSxTQUFTQyxFQUFFVCxDQUFDO0lBQUUsT0FBT0EsS0FBR0EsRUFBRVUsVUFBVSxJQUFFYixPQUFPYyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDYixHQUFFLGFBQVdBLEVBQUVjLE9BQU8sR0FBQ2Q7QUFBQztBQUFDRCxFQUFFVSxHQUFFO0FBQWlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHByaXZ5LWlvL3dhZ21pLWRlbW8vLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC1uYXRpdmUvZGlzdC9zaGFyZWQvbm9kZS1mZXRjaC1uYXRpdmUuMWE0YTM1NmQubWpzP2U1MGMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHQ9T2JqZWN0LmRlZmluZVByb3BlcnR5O3ZhciBvPShlLGwpPT50KGUsXCJuYW1lXCIse3ZhbHVlOmwsY29uZmlndXJhYmxlOiEwfSk7dmFyIG49dHlwZW9mIGdsb2JhbFRoaXM8XCJ1XCI/Z2xvYmFsVGhpczp0eXBlb2Ygd2luZG93PFwidVwiP3dpbmRvdzp0eXBlb2YgZ2xvYmFsPFwidVwiP2dsb2JhbDp0eXBlb2Ygc2VsZjxcInVcIj9zZWxmOnt9O2Z1bmN0aW9uIGYoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZSYmT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJkZWZhdWx0XCIpP2UuZGVmYXVsdDplfW8oZixcImdldERlZmF1bHRFeHBvcnRGcm9tQ2pzXCIpO2V4cG9ydHtuIGFzIGMsZiBhcyBnfTtcbiJdLCJuYW1lcyI6WyJ0IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJvIiwiZSIsImwiLCJ2YWx1ZSIsImNvbmZpZ3VyYWJsZSIsIm4iLCJnbG9iYWxUaGlzIiwid2luZG93IiwiZ2xvYmFsIiwic2VsZiIsImYiLCJfX2VzTW9kdWxlIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVmYXVsdCIsImMiLCJnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-fetch-native/dist/shared/node-fetch-native.1a4a356d.mjs\n");

/***/ })

};
;